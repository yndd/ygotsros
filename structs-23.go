/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Router_Ospf_Area_AreaRange represents the /nokia-conf/configure/router/ospf/area/area-range YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_AreaRange struct {
	Advertise          *bool    `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixMask       *string  `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Router_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Router_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_AreaRange.
func (*NokiaConf_Configure_Router_Ospf_Area_AreaRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Bier represents the /nokia-conf/configure/router/ospf/area/bier YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Bier struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Template   *string                     `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Bier) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_Area_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_Router_Ospf_Area_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Bier) GetTemplate() string {
	if t == nil || t.Template == nil {
		return ""
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Bier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Bier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Bier.
func (*NokiaConf_Configure_Router_Ospf_Area_Bier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface represents the /nokia-conf/configure/router/ospf/area/interface YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface struct {
	AdjacencySet              map[uint32]*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet     `path:"adjacency-set" module:"nokia-conf"`
	AdjacencySid              *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid                `path:"adjacency-sid" module:"nokia-conf" yangPresence:"true"`
	AdminState                E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability *bool                                                                       `path:"advertise-router-capability" module:"nokia-conf"`
	AdvertiseSubnet           *bool                                                                       `path:"advertise-subnet" module:"nokia-conf"`
	ApplyGroups               []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey         *string                                                                     `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain    *string                                                                     `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType        E_NokiaTypesOspf_AuthenticationType                                         `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness               *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness                 `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	DeadInterval              *uint32                                                                     `path:"dead-interval" module:"nokia-conf"`
	FlexAlgo                  map[uint32]*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo         `path:"flex-algo" module:"nokia-conf"`
	HelloInterval             *uint32                                                                     `path:"hello-interval" module:"nokia-conf"`
	InterfaceName             *string                                                                     `path:"interface-name" module:"nokia-conf"`
	InterfaceType             E_NokiaTypesOspf_InterfaceType                                              `path:"interface-type" module:"nokia-conf"`
	LoadBalancingWeight       *uint32                                                                     `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate           `path:"loopfree-alternate" module:"nokia-conf"`
	LsaFilterOut              E_NokiaTypesOspf_LsaFilterOut                                               `path:"lsa-filter-out" module:"nokia-conf"`
	MessageDigestKey          map[uint16]*NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	Metric                    *uint32                                                                     `path:"metric" module:"nokia-conf"`
	Mtu                       *uint32                                                                     `path:"mtu" module:"nokia-conf"`
	Neighbor                  map[string]*NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor         `path:"neighbor" module:"nokia-conf"`
	NodeSid                   *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid                     `path:"node-sid" module:"nokia-conf" yangPresence:"true"`
	Passive                   *bool                                                                       `path:"passive" module:"nokia-conf"`
	PollInterval              *uint32                                                                     `path:"poll-interval" module:"nokia-conf"`
	Priority                  *uint16                                                                     `path:"priority" module:"nokia-conf"`
	RetransmitInterval        *uint32                                                                     `path:"retransmit-interval" module:"nokia-conf"`
	RibPriority               E_NokiaTypesOspf_RibPriority                                                `path:"rib-priority" module:"nokia-conf"`
	SidProtection             *bool                                                                       `path:"sid-protection" module:"nokia-conf"`
	TransitDelay              *uint32                                                                     `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface) IsYANGGoStruct() {}

// NewAdjacencySet creates a new entry in the AdjacencySet list of the
// NokiaConf_Configure_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) NewAdjacencySet(Id uint32) (*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[uint32]*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySet", key)
	}

	t.AdjacencySet[key] = &NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet{
		Id: &Id,
	}

	return t.AdjacencySet[key], nil
}

// RenameAdjacencySet renames an entry in the list AdjacencySet within
// the NokiaConf_Configure_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) RenameAdjacencySet(oldK, newK uint32) error {
	if _, ok := t.AdjacencySet[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySet", newK)
	}

	e, ok := t.AdjacencySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySet", oldK)
	}
	e.Id = &newK

	t.AdjacencySet[newK] = e
	delete(t.AdjacencySet, oldK)
	return nil
}

// GetOrCreateAdjacencySet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateAdjacencySet(Id uint32) *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet {

	key := Id

	if v, ok := t.AdjacencySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySet(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySet got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySet retrieves the value with the specified key from
// the AdjacencySet map field of NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAdjacencySet(Id uint32) *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.AdjacencySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) DeleteAdjacencySet(Id uint32) {
	key := Id

	delete(t.AdjacencySet, key)
}

// AppendAdjacencySet appends the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet struct to the
// list AdjacencySet of NokiaConf_Configure_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) AppendAdjacencySet(v *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[uint32]*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet)
	}

	if _, ok := t.AdjacencySet[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySet %v", key)
	}

	t.AdjacencySet[key] = v
	return nil
}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) NewFlexAlgo(FlexAlgoId uint32) (*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[uint32]*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo{
		FlexAlgoId: &FlexAlgoId,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) RenameFlexAlgo(oldK, newK uint32) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoId = &newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateFlexAlgo(FlexAlgoId uint32) *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo {

	key := FlexAlgoId

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetFlexAlgo(FlexAlgoId uint32) *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) DeleteFlexAlgo(FlexAlgoId uint32) {
	key := FlexAlgoId

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) AppendFlexAlgo(v *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) error {
	if v.FlexAlgoId == nil {
		return fmt.Errorf("invalid nil key received for FlexAlgoId")
	}

	key := *v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[uint32]*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) NewMessageDigestKey(KeyId uint16) (*NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey{
		KeyId: &KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) RenameMessageDigestKey(oldK, newK uint16) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = &newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) DeleteMessageDigestKey(KeyId uint16) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) AppendMessageDigestKey(v *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) NewNeighbor(Address string) (*NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor{
		Address: &Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateNeighbor(Address string) *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor {

	key := Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetNeighbor(Address string) *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) DeleteNeighbor(Address string) {
	key := Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) AppendNeighbor(v *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAdjacencySid retrieves the value of the AdjacencySid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateAdjacencySid() *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid {
	if t.AdjacencySid != nil {
		return t.AdjacencySid
	}
	t.AdjacencySid = &NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid{}
	return t.AdjacencySid
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateNodeSid retrieves the value of the NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetOrCreateNodeSid() *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid {
	if t.NodeSid != nil {
		return t.NodeSid
	}
	t.NodeSid = &NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid{}
	return t.NodeSid
}

// GetAdjacencySid returns the value of the AdjacencySid struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver or the field AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAdjacencySid() *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid {
	if t != nil && t.AdjacencySid != nil {
		return t.AdjacencySid
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetBfdLiveness() *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetNodeSid returns the value of the NodeSid struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Interface. If the receiver or the field NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetNodeSid() *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid {
	if t != nil && t.NodeSid != nil {
		return t.NodeSid
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAdvertiseSubnet retrieves the value of the leaf AdvertiseSubnet from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseSubnet is set, it can
// safely use t.GetAdvertiseSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAdvertiseSubnet() bool {
	if t == nil || t.AdvertiseSubnet == nil {
		return true
	}
	return *t.AdvertiseSubnet
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetInterfaceType() E_NokiaTypesOspf_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetLsaFilterOut() E_NokiaTypesOspf_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return NokiaTypesOspf_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPollInterval retrieves the value of the leaf PollInterval from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 120
	}
	return *t.PollInterval
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRibPriority retrieves the value of the leaf RibPriority from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibPriority is set, it can
// safely use t.GetRibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetRibPriority() E_NokiaTypesOspf_RibPriority {
	if t == nil || t.RibPriority == 0 {
		return 0
	}
	return t.RibPriority
}

// GetSidProtection retrieves the value of the leaf SidProtection from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidProtection is set, it can
// safely use t.GetSidProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetSidProtection() bool {
	if t == nil || t.SidProtection == nil {
		return true
	}
	return *t.SidProtection
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.AdvertiseSubnet == nil {
		var v bool = true
		t.AdvertiseSubnet = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = NokiaTypesOspf_LsaFilterOut_none
	}
	if t.PollInterval == nil {
		var v uint32 = 120
		t.PollInterval = &v
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.SidProtection == nil {
		var v bool = true
		t.SidProtection = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.AdjacencySid.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.NodeSid.PopulateDefaults()
	for _, e := range t.AdjacencySet {
		e.PopulateDefaults()
	}
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet represents the /nokia-conf/configure/router/ospf/area/interface/adjacency-set YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet struct {
	Id *uint32 `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid represents the /nokia-conf/configure/router/ospf/area/interface/adjacency-sid YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) IsYANGGoStruct() {}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_AdjacencySid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness represents the /nokia-conf/configure/router/ospf/area/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness struct {
	RemainDownOnFailure *bool `path:"remain-down-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetRemainDownOnFailure retrieves the value of the leaf RemainDownOnFailure from the NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainDownOnFailure is set, it can
// safely use t.GetRemainDownOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainDownOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) GetRemainDownOnFailure() bool {
	if t == nil || t.RemainDownOnFailure == nil {
		return false
	}
	return *t.RemainDownOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemainDownOnFailure == nil {
		var v bool = false
		t.RemainDownOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo represents the /nokia-conf/configure/router/ospf/area/interface/flex-algo YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo struct {
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	FlexAlgoId         *uint32                                                          `path:"flex-algo-id" module:"nokia-conf"`
	NodeSid            *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid `path:"node-sid" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateNodeSid retrieves the value of the NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) GetOrCreateNodeSid() *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid {
	if t.NodeSid != nil {
		return t.NodeSid
	}
	t.NodeSid = &NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid{}
	return t.NodeSid
}

// GetNodeSid returns the value of the NodeSid struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo. If the receiver or the field NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) GetNodeSid() *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid {
	if t != nil && t.NodeSid != nil {
		return t.NodeSid
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) GetFlexAlgoId() uint32 {
	if t == nil || t.FlexAlgoId == nil {
		return 0
	}
	return *t.FlexAlgoId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NodeSid.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlexAlgoId == nil {
		return nil, fmt.Errorf("nil value for key FlexAlgoId")
	}

	return map[string]interface{}{
		"flex-algo-id": *t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid represents the /nokia-conf/configure/router/ospf/area/interface/flex-algo/node-sid YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate represents the /nokia-conf/configure/router/ospf/area/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                       `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/router/ospf/area/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey represents the /nokia-conf/configure/router/ospf/area/interface/message-digest-key YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	KeyId              *uint16  `path:"key-id" module:"nokia-conf"`
	Md5                *string  `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_MessageDigestKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor represents the /nokia-conf/configure/router/ospf/area/interface/neighbor YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid represents the /nokia-conf/configure/router/ospf/area/interface/node-sid YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid struct {
	ClearNFlag *bool  `path:"clear-n-flag" module:"nokia-conf"`
	Index      *int64 `path:"index" module:"nokia-conf"`
	Label      *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) IsYANGGoStruct() {}

// GetClearNFlag retrieves the value of the leaf ClearNFlag from the NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearNFlag is set, it can
// safely use t.GetClearNFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearNFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) GetClearNFlag() bool {
	if t == nil || t.ClearNFlag == nil {
		return false
	}
	return *t.ClearNFlag
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearNFlag == nil {
		var v bool = false
		t.ClearNFlag = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid.
func (*NokiaConf_Configure_Router_Ospf_Area_Interface_NodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Nssa represents the /nokia-conf/configure/router/ospf/area/nssa YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Nssa struct {
	AreaRange             map[string]*NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange  `path:"area-range" module:"nokia-conf"`
	OriginateDefaultRoute *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"nokia-conf" yangPresence:"true"`
	RedistributeExternal  *bool                                                            `path:"redistribute-external" module:"nokia-conf"`
	Summaries             *bool                                                            `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Router_Ospf_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Router_Ospf_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Router_Ospf_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Router_Ospf_Area_Nssa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) AppendAreaRange(v *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) GetOrCreateOriginateDefaultRoute() *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from NokiaConf_Configure_Router_Ospf_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) GetOriginateDefaultRoute() *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the NokiaConf_Configure_Router_Ospf_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Router_Ospf_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Nssa.
func (*NokiaConf_Configure_Router_Ospf_Area_Nssa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange represents the /nokia-conf/configure/router/ospf/area/nssa/area-range YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange struct {
	Advertise          *bool    `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixMask       *string  `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange.
func (*NokiaConf_Configure_Router_Ospf_Area_Nssa_AreaRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute represents the /nokia-conf/configure/router/ospf/area/nssa/originate-default-route YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"nokia-conf"`
	TypeNssa       *bool `path:"type-nssa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return true
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = true
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute.
func (*NokiaConf_Configure_Router_Ospf_Area_Nssa_OriginateDefaultRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_Stub represents the /nokia-conf/configure/router/ospf/area/stub YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_Stub struct {
	DefaultMetric *uint32 `path:"default-metric" module:"nokia-conf"`
	Summaries     *bool   `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Router_Ospf_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Stub) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Router_Ospf_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Stub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_Stub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_Stub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_Stub.
func (*NokiaConf_Configure_Router_Ospf_Area_Stub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_VirtualLink represents the /nokia-conf/configure/router/ospf/area/virtual-link YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_VirtualLink struct {
	AdminState             E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey      *string                                                                       `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string                                                                       `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType     E_NokiaTypesOspf_AuthenticationType                                           `path:"authentication-type" module:"nokia-conf"`
	DeadInterval           *uint32                                                                       `path:"dead-interval" module:"nokia-conf"`
	HelloInterval          *uint32                                                                       `path:"hello-interval" module:"nokia-conf"`
	MessageDigestKey       map[uint16]*NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	RetransmitInterval     *uint32                                                                       `path:"retransmit-interval" module:"nokia-conf"`
	RouterId               *string                                                                       `path:"router-id" module:"nokia-conf"`
	TransitArea            *string                                                                       `path:"transit-area" module:"nokia-conf"`
	TransitDelay           *uint32                                                                       `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_VirtualLink) IsYANGGoStruct() {}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Router_Ospf_Area_VirtualLink struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) NewMessageDigestKey(KeyId uint16) (*NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey{
		KeyId: &KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Router_Ospf_Area_VirtualLink struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) RenameMessageDigestKey(oldK, newK uint16) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = &newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_VirtualLink. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetOrCreateMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Router_Ospf_Area_VirtualLink. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_Area_VirtualLink. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) DeleteMessageDigestKey(KeyId uint16) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Router_Ospf_Area_VirtualLink. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) AppendMessageDigestKey(v *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTransitArea retrieves the value of the leaf TransitArea from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitArea is set, it can
// safely use t.GetTransitArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitArea == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetTransitArea() string {
	if t == nil || t.TransitArea == nil {
		return ""
	}
	return *t.TransitArea
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_VirtualLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_VirtualLink struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterId == nil {
		return nil, fmt.Errorf("nil value for key RouterId")
	}

	if t.TransitArea == nil {
		return nil, fmt.Errorf("nil value for key TransitArea")
	}

	return map[string]interface{}{
		"router-id":    *t.RouterId,
		"transit-area": *t.TransitArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_VirtualLink.
func (*NokiaConf_Configure_Router_Ospf_Area_VirtualLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey represents the /nokia-conf/configure/router/ospf/area/virtual-link/message-digest-key YANG schema element.
type NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	KeyId              *uint16  `path:"key-id" module:"nokia-conf"`
	Md5                *string  `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey.
func (*NokiaConf_Configure_Router_Ospf_Area_VirtualLink_MessageDigestKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Asbr represents the /nokia-conf/configure/router/ospf/asbr YANG schema element.
type NokiaConf_Configure_Router_Ospf_Asbr struct {
	TracePath NokiaConf_Configure_Router_Ospf_Asbr_TracePath_Union `path:"trace-path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Asbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Asbr) IsYANGGoStruct() {}

// GetTracePath retrieves the value of the leaf TracePath from the NokiaConf_Configure_Router_Ospf_Asbr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracePath is set, it can
// safely use t.GetTracePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracePath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Asbr) GetTracePath() NokiaConf_Configure_Router_Ospf_Asbr_TracePath_Union {
	if t == nil || t.TracePath == nil {
		return NokiaConf_Configure_Router_Ospf_Asbr_TracePath_Enum_none
	}
	return t.TracePath
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Asbr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Asbr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TracePath == nil {
		t.TracePath = NokiaConf_Configure_Router_Ospf_Asbr_TracePath_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Asbr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Asbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Asbr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Asbr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Asbr.
func (*NokiaConf_Configure_Router_Ospf_Asbr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_DatabaseExport represents the /nokia-conf/configure/router/ospf/database-export YANG schema element.
type NokiaConf_Configure_Router_Ospf_DatabaseExport struct {
	BgpLsIdentifier *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier `path:"bgp-ls-identifier" module:"nokia-conf" yangPresence:"true"`
	IgpIdentifier   *uint64                                                         `path:"igp-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_DatabaseExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_DatabaseExport) IsYANGGoStruct() {}

// GetOrCreateBgpLsIdentifier retrieves the value of the BgpLsIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) GetOrCreateBgpLsIdentifier() *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier {
	if t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	t.BgpLsIdentifier = &NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier{}
	return t.BgpLsIdentifier
}

// GetBgpLsIdentifier returns the value of the BgpLsIdentifier struct pointer
// from NokiaConf_Configure_Router_Ospf_DatabaseExport. If the receiver or the field BgpLsIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) GetBgpLsIdentifier() *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier {
	if t != nil && t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	return nil
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the NokiaConf_Configure_Router_Ospf_DatabaseExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_DatabaseExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLsIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_DatabaseExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_DatabaseExport.
func (*NokiaConf_Configure_Router_Ospf_DatabaseExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier represents the /nokia-conf/configure/router/ospf/database-export/bgp-ls-identifier YANG schema element.
type NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Value == nil {
		var v uint32 = 0
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier.
func (*NokiaConf_Configure_Router_Ospf_DatabaseExport_BgpLsIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_EntropyLabel represents the /nokia-conf/configure/router/ospf/entropy-label YANG schema element.
type NokiaConf_Configure_Router_Ospf_EntropyLabel struct {
	OverrideTunnelElc *bool `path:"override-tunnel-elc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_EntropyLabel) IsYANGGoStruct() {}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Router_Ospf_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_EntropyLabel) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_EntropyLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_EntropyLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_EntropyLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_EntropyLabel.
func (*NokiaConf_Configure_Router_Ospf_EntropyLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_ExportLimit represents the /nokia-conf/configure/router/ospf/export-limit YANG schema element.
type NokiaConf_Configure_Router_Ospf_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Router_Ospf_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_Ospf_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_ExportLimit.
func (*NokiaConf_Configure_Router_Ospf_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_ExternalDbOverflow represents the /nokia-conf/configure/router/ospf/external-db-overflow YANG schema element.
type NokiaConf_Configure_Router_Ospf_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
	Limit    *uint32 `path:"limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Router_Ospf_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Router_Ospf_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_ExternalDbOverflow.
func (*NokiaConf_Configure_Router_Ospf_ExternalDbOverflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms represents the /nokia-conf/configure/router/ospf/flexible-algorithms YANG schema element.
type NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	FlexAlgo           map[uint32]*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo `path:"flex-algo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) IsYANGGoStruct() {}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) NewFlexAlgo(FlexAlgoId uint32) (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[uint32]*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo{
		FlexAlgoId: &FlexAlgoId,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) RenameFlexAlgo(oldK, newK uint32) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoId = &newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) GetOrCreateFlexAlgo(FlexAlgoId uint32) *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo {

	key := FlexAlgoId

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) GetFlexAlgo(FlexAlgoId uint32) *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) DeleteFlexAlgo(FlexAlgoId uint32) {
	key := FlexAlgoId

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) AppendFlexAlgo(v *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) error {
	if v.FlexAlgoId == nil {
		return fmt.Errorf("invalid nil key received for FlexAlgoId")
	}

	key := *v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[uint32]*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms.
func (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo represents the /nokia-conf/configure/router/ospf/flexible-algorithms/flex-algo YANG schema element.
type NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo struct {
	Advertise          *string                                                                        `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	FlexAlgoId         *uint32                                                                        `path:"flex-algo-id" module:"nokia-conf"`
	LoopfreeAlternate  *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	Participate        *bool                                                                          `path:"participate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetLoopfreeAlternate() *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetAdvertise() string {
	if t == nil || t.Advertise == nil {
		return ""
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetFlexAlgoId() uint32 {
	if t == nil || t.FlexAlgoId == nil {
		return 0
	}
	return *t.FlexAlgoId
}

// GetParticipate retrieves the value of the leaf Participate from the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Participate is set, it can
// safely use t.GetParticipate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Participate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetParticipate() bool {
	if t == nil || t.Participate == nil {
		return false
	}
	return *t.Participate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Participate == nil {
		var v bool = false
		t.Participate = &v
	}
	t.LoopfreeAlternate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlexAlgoId == nil {
		return nil, fmt.Errorf("nil value for key FlexAlgoId")
	}

	return map[string]interface{}{
		"flex-algo-id": *t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo.
func (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate represents the /nokia-conf/configure/router/ospf/flexible-algorithms/flex-algo/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate.
func (*NokiaConf_Configure_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_GracefulRestart represents the /nokia-conf/configure/router/ospf/graceful-restart YANG schema element.
type NokiaConf_Configure_Router_Ospf_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"nokia-conf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Router_Ospf_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the NokiaConf_Configure_Router_Ospf_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return true
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = true
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_GracefulRestart.
func (*NokiaConf_Configure_Router_Ospf_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_IgpShortcut represents the /nokia-conf/configure/router/ospf/igp-shortcut YANG schema element.
type NokiaConf_Configure_Router_Ospf_IgpShortcut struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	TunnelNextHop      *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop `path:"tunnel-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_IgpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut) IsYANGGoStruct() {}

// GetOrCreateTunnelNextHop retrieves the value of the TunnelNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) GetOrCreateTunnelNextHop() *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop {
	if t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	t.TunnelNextHop = &NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop{}
	return t.TunnelNextHop
}

// GetTunnelNextHop returns the value of the TunnelNextHop struct pointer
// from NokiaConf_Configure_Router_Ospf_IgpShortcut. If the receiver or the field TunnelNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) GetTunnelNextHop() *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop {
	if t != nil && t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_IgpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.TunnelNextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_IgpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_IgpShortcut.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop represents the /nokia-conf/configure/router/ospf/igp-shortcut/tunnel-next-hop YANG schema element.
type NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop struct {
	Family map[E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only]*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) NewFamily(FamilyType E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only) (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only]*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) RenameFamily(oldK, newK E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) GetOrCreateFamily(FamilyType E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only) *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) GetFamily(FamilyType E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only) *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) DeleteFamily(FamilyType E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family struct to the
// list Family of NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) AppendFamily(v *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only]*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family represents the /nokia-conf/configure/router/ospf/igp-shortcut/tunnel-next-hop/family YANG schema element.
type NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType         E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only                                        `path:"family-type" module:"nokia-conf"`
	Resolution         E_NokiaTypesSros_ResolutionType                                                    `path:"resolution" module:"nokia-conf"`
	ResolutionFilter   *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetResolutionFilter() *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetFamilyType() E_NokiaTypesIgp_TunnNextHopFamilyTypeV4Only {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetResolution() E_NokiaTypesSros_ResolutionType {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesSros_ResolutionType_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesSros_ResolutionType_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter represents the /nokia-conf/configure/router/ospf/igp-shortcut/tunnel-next-hop/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter struct {
	Rsvp *bool `path:"rsvp" module:"nokia-conf"`
	SrTe *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter.
func (*NokiaConf_Configure_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate represents the /nokia-conf/configure/router/ospf/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate struct {
	AugmentRouteTable *bool                                                               `path:"augment-route-table" module:"nokia-conf"`
	Exclude           *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude          `path:"exclude" module:"nokia-conf"`
	MultiHomedPrefix  *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix `path:"multi-homed-prefix" module:"nokia-conf" yangPresence:"true"`
	RemoteLfa         *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa        `path:"remote-lfa" module:"nokia-conf" yangPresence:"true"`
	TiLfa             *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa            `path:"ti-lfa" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetOrCreateMultiHomedPrefix retrieves the value of the MultiHomedPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetOrCreateMultiHomedPrefix() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix {
	if t.MultiHomedPrefix != nil {
		return t.MultiHomedPrefix
	}
	t.MultiHomedPrefix = &NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix{}
	return t.MultiHomedPrefix
}

// GetOrCreateRemoteLfa retrieves the value of the RemoteLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetOrCreateRemoteLfa() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa {
	if t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	t.RemoteLfa = &NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa{}
	return t.RemoteLfa
}

// GetOrCreateTiLfa retrieves the value of the TiLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetOrCreateTiLfa() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa {
	if t.TiLfa != nil {
		return t.TiLfa
	}
	t.TiLfa = &NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa{}
	return t.TiLfa
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Router_Ospf_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetMultiHomedPrefix returns the value of the MultiHomedPrefix struct pointer
// from NokiaConf_Configure_Router_Ospf_LoopfreeAlternate. If the receiver or the field MultiHomedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetMultiHomedPrefix() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix {
	if t != nil && t.MultiHomedPrefix != nil {
		return t.MultiHomedPrefix
	}
	return nil
}

// GetRemoteLfa returns the value of the RemoteLfa struct pointer
// from NokiaConf_Configure_Router_Ospf_LoopfreeAlternate. If the receiver or the field RemoteLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetRemoteLfa() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa {
	if t != nil && t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	return nil
}

// GetTiLfa returns the value of the TiLfa struct pointer
// from NokiaConf_Configure_Router_Ospf_LoopfreeAlternate. If the receiver or the field TiLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetTiLfa() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa {
	if t != nil && t.TiLfa != nil {
		return t.TiLfa
	}
	return nil
}

// GetAugmentRouteTable retrieves the value of the leaf AugmentRouteTable from the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AugmentRouteTable is set, it can
// safely use t.GetAugmentRouteTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AugmentRouteTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) GetAugmentRouteTable() bool {
	if t == nil || t.AugmentRouteTable == nil {
		return false
	}
	return *t.AugmentRouteTable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AugmentRouteTable == nil {
		var v bool = false
		t.AugmentRouteTable = &v
	}
	t.Exclude.PopulateDefaults()
	t.MultiHomedPrefix.PopulateDefaults()
	t.RemoteLfa.PopulateDefaults()
	t.TiLfa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/router/ospf/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix represents the /nokia-conf/configure/router/ospf/loopfree-alternate/multi-homed-prefix YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix struct {
	Preference E_NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) IsYANGGoStruct() {}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) GetPreference() E_NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference {
	if t == nil || t.Preference == 0 {
		return NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference_none
	}
	return t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == 0 {
		t.Preference = NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa represents the /nokia-conf/configure/router/ospf/loopfree-alternate/remote-lfa YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa struct {
	MaxPqCost   *uint32                                                                  `path:"max-pq-cost" module:"nokia-conf"`
	NodeProtect *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) GetNodeProtect() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxPqCost retrieves the value of the leaf MaxPqCost from the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqCost is set, it can
// safely use t.GetMaxPqCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) GetMaxPqCost() uint32 {
	if t == nil || t.MaxPqCost == nil {
		return 65535
	}
	return *t.MaxPqCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqCost == nil {
		var v uint32 = 65535
		t.MaxPqCost = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect represents the /nokia-conf/configure/router/ospf/loopfree-alternate/remote-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect struct {
	MaxPqNodes *uint32 `path:"max-pq-nodes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) IsYANGGoStruct() {}

// GetMaxPqNodes retrieves the value of the leaf MaxPqNodes from the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqNodes is set, it can
// safely use t.GetMaxPqNodes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqNodes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) GetMaxPqNodes() uint32 {
	if t == nil || t.MaxPqNodes == nil {
		return 16
	}
	return *t.MaxPqNodes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqNodes == nil {
		var v uint32 = 16
		t.MaxPqNodes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa represents the /nokia-conf/configure/router/ospf/loopfree-alternate/ti-lfa YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa struct {
	MaxSrFrrLabels *uint32                                                              `path:"max-sr-frr-labels" module:"nokia-conf"`
	NodeProtect    *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) GetNodeProtect() *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxSrFrrLabels retrieves the value of the leaf MaxSrFrrLabels from the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrFrrLabels is set, it can
// safely use t.GetMaxSrFrrLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrFrrLabels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) GetMaxSrFrrLabels() uint32 {
	if t == nil || t.MaxSrFrrLabels == nil {
		return 2
	}
	return *t.MaxSrFrrLabels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSrFrrLabels == nil {
		var v uint32 = 2
		t.MaxSrFrrLabels = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect represents the /nokia-conf/configure/router/ospf/loopfree-alternate/ti-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect.
func (*NokiaConf_Configure_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_OverloadOnBoot represents the /nokia-conf/configure/router/ospf/overload-on-boot YANG schema element.
type NokiaConf_Configure_Router_Ospf_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_OverloadOnBoot) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Ospf_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_OverloadOnBoot.
func (*NokiaConf_Configure_Router_Ospf_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_RibPriority represents the /nokia-conf/configure/router/ospf/rib-priority YANG schema element.
type NokiaConf_Configure_Router_Ospf_RibPriority struct {
	High *NokiaConf_Configure_Router_Ospf_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Router_Ospf_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Router_Ospf_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Router_Ospf_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority) GetHigh() *NokiaConf_Configure_Router_Ospf_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_RibPriority.
func (*NokiaConf_Configure_Router_Ospf_RibPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_RibPriority_High represents the /nokia-conf/configure/router/ospf/rib-priority/high YANG schema element.
type NokiaConf_Configure_Router_Ospf_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Router_Ospf_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_RibPriority_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_RibPriority_High.
func (*NokiaConf_Configure_Router_Ospf_RibPriority_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit represents the /nokia-conf/configure/router/ospf/rtr-adv-lsa-limit YANG schema element.
type NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit struct {
	LogOnly          *bool                                                                `path:"log-only" module:"nokia-conf"`
	MaxLsaCount      *uint32                                                              `path:"max-lsa-count" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                              `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) GetOverloadTimeout() NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit.
func (*NokiaConf_Configure_Router_Ospf_RtrAdvLsaLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting represents the /nokia-conf/configure/router/ospf/segment-routing YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting struct {
	AdjSidHold         NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjSidHold_Union         `path:"adj-sid-hold" module:"nokia-conf"`
	AdjacencySet       map[uint32]*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet `path:"adjacency-set" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	BackupNodeSid      *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid           `path:"backup-node-sid" module:"nokia-conf" yangPresence:"true"`
	ClassForwarding    *bool                                                                   `path:"class-forwarding" module:"nokia-conf"`
	EgressStatistics   *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics        `path:"egress-statistics" module:"nokia-conf"`
	EntropyLabel       *bool                                                                   `path:"entropy-label" module:"nokia-conf"`
	ExportTunnelTable  E_NokiaTypesIgp_ExportTunnelTableType                                   `path:"export-tunnel-table" module:"nokia-conf"`
	IngressStatistics  *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics       `path:"ingress-statistics" module:"nokia-conf"`
	MappingServer      *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer           `path:"mapping-server" module:"nokia-conf"`
	MaximumSidDepth    *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth         `path:"maximum-sid-depth" module:"nokia-conf"`
	PrefixSidRange     *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange          `path:"prefix-sid-range" module:"nokia-conf" yangPresence:"true"`
	Srlb               *string                                                                 `path:"srlb" module:"nokia-conf"`
	TunnelMtu          *uint32                                                                 `path:"tunnel-mtu" module:"nokia-conf"`
	TunnelTablePref    *uint32                                                                 `path:"tunnel-table-pref" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting) IsYANGGoStruct() {}

// NewAdjacencySet creates a new entry in the AdjacencySet list of the
// NokiaConf_Configure_Router_Ospf_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) NewAdjacencySet(Id uint32) (*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[uint32]*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySet", key)
	}

	t.AdjacencySet[key] = &NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet{
		Id: &Id,
	}

	return t.AdjacencySet[key], nil
}

// RenameAdjacencySet renames an entry in the list AdjacencySet within
// the NokiaConf_Configure_Router_Ospf_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) RenameAdjacencySet(oldK, newK uint32) error {
	if _, ok := t.AdjacencySet[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySet", newK)
	}

	e, ok := t.AdjacencySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySet", oldK)
	}
	e.Id = &newK

	t.AdjacencySet[newK] = e
	delete(t.AdjacencySet, oldK)
	return nil
}

// GetOrCreateAdjacencySet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreateAdjacencySet(Id uint32) *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet {

	key := Id

	if v, ok := t.AdjacencySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySet(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySet got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySet retrieves the value with the specified key from
// the AdjacencySet map field of NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetAdjacencySet(Id uint32) *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.AdjacencySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) DeleteAdjacencySet(Id uint32) {
	key := Id

	delete(t.AdjacencySet, key)
}

// AppendAdjacencySet appends the supplied NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet struct to the
// list AdjacencySet of NokiaConf_Configure_Router_Ospf_SegmentRouting. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) AppendAdjacencySet(v *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[uint32]*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet)
	}

	if _, ok := t.AdjacencySet[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySet %v", key)
	}

	t.AdjacencySet[key] = v
	return nil
}

// GetOrCreateBackupNodeSid retrieves the value of the BackupNodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreateBackupNodeSid() *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid {
	if t.BackupNodeSid != nil {
		return t.BackupNodeSid
	}
	t.BackupNodeSid = &NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid{}
	return t.BackupNodeSid
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreateEgressStatistics() *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreateIngressStatistics() *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics{}
	return t.IngressStatistics
}

// GetOrCreateMappingServer retrieves the value of the MappingServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreateMappingServer() *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer {
	if t.MappingServer != nil {
		return t.MappingServer
	}
	t.MappingServer = &NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer{}
	return t.MappingServer
}

// GetOrCreateMaximumSidDepth retrieves the value of the MaximumSidDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreateMaximumSidDepth() *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth {
	if t.MaximumSidDepth != nil {
		return t.MaximumSidDepth
	}
	t.MaximumSidDepth = &NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth{}
	return t.MaximumSidDepth
}

// GetOrCreatePrefixSidRange retrieves the value of the PrefixSidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetOrCreatePrefixSidRange() *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange {
	if t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	t.PrefixSidRange = &NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange{}
	return t.PrefixSidRange
}

// GetBackupNodeSid returns the value of the BackupNodeSid struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver or the field BackupNodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetBackupNodeSid() *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid {
	if t != nil && t.BackupNodeSid != nil {
		return t.BackupNodeSid
	}
	return nil
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetEgressStatistics() *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetIngressStatistics() *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetMappingServer returns the value of the MappingServer struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver or the field MappingServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetMappingServer() *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer {
	if t != nil && t.MappingServer != nil {
		return t.MappingServer
	}
	return nil
}

// GetMaximumSidDepth returns the value of the MaximumSidDepth struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver or the field MaximumSidDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetMaximumSidDepth() *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth {
	if t != nil && t.MaximumSidDepth != nil {
		return t.MaximumSidDepth
	}
	return nil
}

// GetPrefixSidRange returns the value of the PrefixSidRange struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting. If the receiver or the field PrefixSidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetPrefixSidRange() *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange {
	if t != nil && t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	return nil
}

// GetAdjSidHold retrieves the value of the leaf AdjSidHold from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSidHold is set, it can
// safely use t.GetAdjSidHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSidHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetAdjSidHold() NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjSidHold_Union {
	if t == nil || t.AdjSidHold == nil {
		return UnionUint32(15)
	}
	return t.AdjSidHold
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetClassForwarding() bool {
	if t == nil || t.ClassForwarding == nil {
		return false
	}
	return *t.ClassForwarding
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetExportTunnelTable retrieves the value of the leaf ExportTunnelTable from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportTunnelTable is set, it can
// safely use t.GetExportTunnelTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportTunnelTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetExportTunnelTable() E_NokiaTypesIgp_ExportTunnelTableType {
	if t == nil || t.ExportTunnelTable == 0 {
		return 0
	}
	return t.ExportTunnelTable
}

// GetSrlb retrieves the value of the leaf Srlb from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlb is set, it can
// safely use t.GetSrlb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetSrlb() string {
	if t == nil || t.Srlb == nil {
		return ""
	}
	return *t.Srlb
}

// GetTunnelMtu retrieves the value of the leaf TunnelMtu from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelMtu is set, it can
// safely use t.GetTunnelMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetTunnelMtu() uint32 {
	if t == nil || t.TunnelMtu == nil {
		return 0
	}
	return *t.TunnelMtu
}

// GetTunnelTablePref retrieves the value of the leaf TunnelTablePref from the NokiaConf_Configure_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTablePref is set, it can
// safely use t.GetTunnelTablePref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTablePref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) GetTunnelTablePref() uint32 {
	if t == nil || t.TunnelTablePref == nil {
		return 10
	}
	return *t.TunnelTablePref
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSidHold == nil {
		t.AdjSidHold = UnionUint32(15)
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClassForwarding == nil {
		var v bool = false
		t.ClassForwarding = &v
	}
	if t.TunnelTablePref == nil {
		var v uint32 = 10
		t.TunnelTablePref = &v
	}
	t.BackupNodeSid.PopulateDefaults()
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	t.MappingServer.PopulateDefaults()
	t.MaximumSidDepth.PopulateDefaults()
	t.PrefixSidRange.PopulateDefaults()
	for _, e := range t.AdjacencySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet represents the /nokia-conf/configure/router/ospf/segment-routing/adjacency-set YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet struct {
	Advertise          *bool                                                            `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                          `path:"id" module:"nokia-conf"`
	Parallel           *bool                                                            `path:"parallel" module:"nokia-conf"`
	Sid                *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid `path:"sid" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) IsYANGGoStruct() {}

// GetOrCreateSid retrieves the value of the Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetOrCreateSid() *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid {
	if t.Sid != nil {
		return t.Sid
	}
	t.Sid = &NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid{}
	return t.Sid
}

// GetSid returns the value of the Sid struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet. If the receiver or the field Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetSid() *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid {
	if t != nil && t.Sid != nil {
		return t.Sid
	}
	return nil
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetParallel retrieves the value of the leaf Parallel from the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Parallel is set, it can
// safely use t.GetParallel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Parallel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) GetParallel() bool {
	if t == nil || t.Parallel == nil {
		return true
	}
	return *t.Parallel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.Parallel == nil {
		var v bool = true
		t.Parallel = &v
	}
	t.Sid.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid represents the /nokia-conf/configure/router/ospf/segment-routing/adjacency-set/sid YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) IsYANGGoStruct() {}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_AdjacencySet_Sid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid represents the /nokia-conf/configure/router/ospf/segment-routing/backup-node-sid YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid struct {
	Index    *int64  `path:"index" module:"nokia-conf"`
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
	Label    *int64  `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_BackupNodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics represents the /nokia-conf/configure/router/ospf/segment-routing/egress-statistics YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics struct {
	AdjSet  *bool `path:"adj-set" module:"nokia-conf"`
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) IsYANGGoStruct() {}

// GetAdjSet retrieves the value of the leaf AdjSet from the NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSet is set, it can
// safely use t.GetAdjSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) GetAdjSet() bool {
	if t == nil || t.AdjSet == nil {
		return false
	}
	return *t.AdjSet
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSet == nil {
		var v bool = false
		t.AdjSet = &v
	}
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_EgressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics represents the /nokia-conf/configure/router/ospf/segment-routing/ingress-statistics YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics struct {
	AdjSet  *bool `path:"adj-set" module:"nokia-conf"`
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) IsYANGGoStruct() {}

// GetAdjSet retrieves the value of the leaf AdjSet from the NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSet is set, it can
// safely use t.GetAdjSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) GetAdjSet() bool {
	if t == nil || t.AdjSet == nil {
		return false
	}
	return *t.AdjSet
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSet == nil {
		var v bool = false
		t.AdjSet = &v
	}
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_IngressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer represents the /nokia-conf/configure/router/ospf/segment-routing/mapping-server YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer struct {
	AdminState E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	NodeSidMap map[uint32]*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap `path:"node-sid-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) IsYANGGoStruct() {}

// NewNodeSidMap creates a new entry in the NodeSidMap list of the
// NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) NewNodeSidMap(SidIndex uint32) (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NodeSidMap == nil {
		t.NodeSidMap = make(map[uint32]*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap)
	}

	key := SidIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NodeSidMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NodeSidMap", key)
	}

	t.NodeSidMap[key] = &NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap{
		SidIndex: &SidIndex,
	}

	return t.NodeSidMap[key], nil
}

// RenameNodeSidMap renames an entry in the list NodeSidMap within
// the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) RenameNodeSidMap(oldK, newK uint32) error {
	if _, ok := t.NodeSidMap[newK]; ok {
		return fmt.Errorf("key %v already exists in NodeSidMap", newK)
	}

	e, ok := t.NodeSidMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NodeSidMap", oldK)
	}
	e.SidIndex = &newK

	t.NodeSidMap[newK] = e
	delete(t.NodeSidMap, oldK)
	return nil
}

// GetOrCreateNodeSidMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) GetOrCreateNodeSidMap(SidIndex uint32) *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap {

	key := SidIndex

	if v, ok := t.NodeSidMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNodeSidMap(SidIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNodeSidMap got unexpected error: %v", err))
	}
	return v
}

// GetNodeSidMap retrieves the value with the specified key from
// the NodeSidMap map field of NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) GetNodeSidMap(SidIndex uint32) *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap {

	if t == nil {
		return nil
	}

	key := SidIndex

	if lm, ok := t.NodeSidMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteNodeSidMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) DeleteNodeSidMap(SidIndex uint32) {
	key := SidIndex

	delete(t.NodeSidMap, key)
}

// AppendNodeSidMap appends the supplied NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap struct to the
// list NodeSidMap of NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) AppendNodeSidMap(v *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) error {
	if v.SidIndex == nil {
		return fmt.Errorf("invalid nil key received for SidIndex")
	}

	key := *v.SidIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NodeSidMap == nil {
		t.NodeSidMap = make(map[uint32]*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap)
	}

	if _, ok := t.NodeSidMap[key]; ok {
		return fmt.Errorf("duplicate key for list NodeSidMap %v", key)
	}

	t.NodeSidMap[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.NodeSidMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap represents the /nokia-conf/configure/router/ospf/segment-routing/mapping-server/node-sid-map YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string                                                                        `path:"ip-prefix" module:"nokia-conf"`
	Range              *uint32                                                                        `path:"range" module:"nokia-conf"`
	Scope              *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope `path:"scope" module:"nokia-conf"`
	SidIndex           *uint32                                                                        `path:"sid-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) IsYANGGoStruct() {}

// GetOrCreateScope retrieves the value of the Scope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetOrCreateScope() *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope {
	if t.Scope != nil {
		return t.Scope
	}
	t.Scope = &NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope{}
	return t.Scope
}

// GetScope returns the value of the Scope struct pointer
// from NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap. If the receiver or the field Scope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetScope() *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope {
	if t != nil && t.Scope != nil {
		return t.Scope
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRange retrieves the value of the leaf Range from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetRange() uint32 {
	if t == nil || t.Range == nil {
		return 1
	}
	return *t.Range
}

// GetSidIndex retrieves the value of the leaf SidIndex from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidIndex is set, it can
// safely use t.GetSidIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetSidIndex() uint32 {
	if t == nil || t.SidIndex == nil {
		return 0
	}
	return *t.SidIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Range == nil {
		var v uint32 = 1
		t.Range = &v
	}
	t.Scope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SidIndex == nil {
		return nil, fmt.Errorf("nil value for key SidIndex")
	}

	return map[string]interface{}{
		"sid-index": *t.SidIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope represents the /nokia-conf/configure/router/ospf/segment-routing/mapping-server/node-sid-map/scope YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope struct {
	Area *string   `path:"area" module:"nokia-conf"`
	As   YANGEmpty `path:"as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) IsYANGGoStruct() {
}

// GetArea retrieves the value of the leaf Area from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Area is set, it can
// safely use t.GetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Area == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) GetArea() string {
	if t == nil || t.Area == nil {
		return ""
	}
	return *t.Area
}

// GetAs retrieves the value of the leaf As from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As is set, it can
// safely use t.GetAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) GetAs() YANGEmpty {
	if t == nil || t.As == false {
		return false
	}
	return t.As
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth represents the /nokia-conf/configure/router/ospf/segment-routing/maximum-sid-depth YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth struct {
	OverrideBmi  *int32 `path:"override-bmi" module:"nokia-conf"`
	OverrideErld *int32 `path:"override-erld" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) IsYANGGoStruct() {}

// GetOverrideBmi retrieves the value of the leaf OverrideBmi from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideBmi is set, it can
// safely use t.GetOverrideBmi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideBmi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) GetOverrideBmi() int32 {
	if t == nil || t.OverrideBmi == nil {
		return 0
	}
	return *t.OverrideBmi
}

// GetOverrideErld retrieves the value of the leaf OverrideErld from the NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideErld is set, it can
// safely use t.GetOverrideErld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideErld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) GetOverrideErld() int32 {
	if t == nil || t.OverrideErld == nil {
		return 0
	}
	return *t.OverrideErld
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_MaximumSidDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange represents the /nokia-conf/configure/router/ospf/segment-routing/prefix-sid-range YANG schema element.
type NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange struct {
	Global     YANGEmpty `path:"global" module:"nokia-conf"`
	MaxIndex   *uint32   `path:"max-index" module:"nokia-conf"`
	StartLabel *uint32   `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) IsYANGGoStruct() {}

// GetGlobal retrieves the value of the leaf Global from the NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global is set, it can
// safely use t.GetGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) GetGlobal() YANGEmpty {
	if t == nil || t.Global == false {
		return false
	}
	return t.Global
}

// GetMaxIndex retrieves the value of the leaf MaxIndex from the NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIndex is set, it can
// safely use t.GetMaxIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) GetMaxIndex() uint32 {
	if t == nil || t.MaxIndex == nil {
		return 1
	}
	return *t.MaxIndex
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxIndex == nil {
		var v uint32 = 1
		t.MaxIndex = &v
	}
	if t.StartLabel == nil {
		var v uint32 = 0
		t.StartLabel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange.
func (*NokiaConf_Configure_Router_Ospf_SegmentRouting_PrefixSidRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Timers represents the /nokia-conf/configure/router/ospf/timers YANG schema element.
type NokiaConf_Configure_Router_Ospf_Timers struct {
	IncrementalSpfWait *uint32                                             `path:"incremental-spf-wait" module:"nokia-conf"`
	LsaAccumulate      *uint32                                             `path:"lsa-accumulate" module:"nokia-conf"`
	LsaArrival         *uint32                                             `path:"lsa-arrival" module:"nokia-conf"`
	LsaGenerate        *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate `path:"lsa-generate" module:"nokia-conf"`
	RedistributeDelay  *uint32                                             `path:"redistribute-delay" module:"nokia-conf"`
	SpfWait            *NokiaConf_Configure_Router_Ospf_Timers_SpfWait     `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetOrCreateLsaGenerate() *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Router_Ospf_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Router_Ospf_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from NokiaConf_Configure_Router_Ospf_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetLsaGenerate() *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Router_Ospf_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetSpfWait() *NokiaConf_Configure_Router_Ospf_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the NokiaConf_Configure_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the NokiaConf_Configure_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the NokiaConf_Configure_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the NokiaConf_Configure_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Timers.
func (*NokiaConf_Configure_Router_Ospf_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate represents the /nokia-conf/configure/router/ospf/timers/lsa-generate YANG schema element.
type NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"nokia-conf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"nokia-conf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) IsYANGGoStruct() {}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate.
func (*NokiaConf_Configure_Router_Ospf_Timers_LsaGenerate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_Timers_SpfWait represents the /nokia-conf/configure/router/ospf/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Router_Ospf_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Router_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Router_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Router_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_Timers_SpfWait.
func (*NokiaConf_Configure_Router_Ospf_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions represents the /nokia-conf/configure/router/ospf/traffic-engineering-options YANG schema element.
type NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions struct {
	SrTe E_NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions_SrTe `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) IsYANGGoStruct() {}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) GetSrTe() E_NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions_SrTe {
	if t == nil || t.SrTe == 0 {
		return NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions_SrTe_false
	}
	return t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SrTe == 0 {
		t.SrTe = NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions_SrTe_false
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions.
func (*NokiaConf_Configure_Router_Ospf_TrafficEngineeringOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree represents the /nokia-conf/configure/router/p2mp-sr-tree YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        []E_NokiaConf_Configure_Router_P2MpSrTree_BfdLiveness                `path:"bfd-liveness" module:"nokia-conf"`
	P2MpPolicy         map[string]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy         `path:"p2mp-policy" module:"nokia-conf"`
	ReplicationSegment map[string]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment `path:"replication-segment" module:"nokia-conf"`
	ReservedLabelBlock *string                                                              `path:"reserved-label-block" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree) IsYANGGoStruct() {}

// NewP2MpPolicy creates a new entry in the P2MpPolicy list of the
// NokiaConf_Configure_Router_P2MpSrTree struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_P2MpSrTree) NewP2MpPolicy(P2MpPolicyName string) (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpPolicy == nil {
		t.P2MpPolicy = make(map[string]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy)
	}

	key := P2MpPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2MpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2MpPolicy", key)
	}

	t.P2MpPolicy[key] = &NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy{
		P2MpPolicyName: &P2MpPolicyName,
	}

	return t.P2MpPolicy[key], nil
}

// RenameP2MpPolicy renames an entry in the list P2MpPolicy within
// the NokiaConf_Configure_Router_P2MpSrTree struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) RenameP2MpPolicy(oldK, newK string) error {
	if _, ok := t.P2MpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in P2MpPolicy", newK)
	}

	e, ok := t.P2MpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in P2MpPolicy", oldK)
	}
	e.P2MpPolicyName = &newK

	t.P2MpPolicy[newK] = e
	delete(t.P2MpPolicy, oldK)
	return nil
}

// GetOrCreateP2MpPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetOrCreateP2MpPolicy(P2MpPolicyName string) *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy {

	key := P2MpPolicyName

	if v, ok := t.P2MpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewP2MpPolicy(P2MpPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateP2MpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetP2MpPolicy retrieves the value with the specified key from
// the P2MpPolicy map field of NokiaConf_Configure_Router_P2MpSrTree. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetP2MpPolicy(P2MpPolicyName string) *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy {

	if t == nil {
		return nil
	}

	key := P2MpPolicyName

	if lm, ok := t.P2MpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteP2MpPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_P2MpSrTree) DeleteP2MpPolicy(P2MpPolicyName string) {
	key := P2MpPolicyName

	delete(t.P2MpPolicy, key)
}

// AppendP2MpPolicy appends the supplied NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy struct to the
// list P2MpPolicy of NokiaConf_Configure_Router_P2MpSrTree. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_P2MpSrTree) AppendP2MpPolicy(v *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) error {
	if v.P2MpPolicyName == nil {
		return fmt.Errorf("invalid nil key received for P2MpPolicyName")
	}

	key := *v.P2MpPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpPolicy == nil {
		t.P2MpPolicy = make(map[string]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy)
	}

	if _, ok := t.P2MpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list P2MpPolicy %v", key)
	}

	t.P2MpPolicy[key] = v
	return nil
}

// NewReplicationSegment creates a new entry in the ReplicationSegment list of the
// NokiaConf_Configure_Router_P2MpSrTree struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_P2MpSrTree) NewReplicationSegment(PolicyName string) (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReplicationSegment == nil {
		t.ReplicationSegment = make(map[string]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ReplicationSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ReplicationSegment", key)
	}

	t.ReplicationSegment[key] = &NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment{
		PolicyName: &PolicyName,
	}

	return t.ReplicationSegment[key], nil
}

// RenameReplicationSegment renames an entry in the list ReplicationSegment within
// the NokiaConf_Configure_Router_P2MpSrTree struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) RenameReplicationSegment(oldK, newK string) error {
	if _, ok := t.ReplicationSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in ReplicationSegment", newK)
	}

	e, ok := t.ReplicationSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ReplicationSegment", oldK)
	}
	e.PolicyName = &newK

	t.ReplicationSegment[newK] = e
	delete(t.ReplicationSegment, oldK)
	return nil
}

// GetOrCreateReplicationSegment retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetOrCreateReplicationSegment(PolicyName string) *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment {

	key := PolicyName

	if v, ok := t.ReplicationSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReplicationSegment(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReplicationSegment got unexpected error: %v", err))
	}
	return v
}

// GetReplicationSegment retrieves the value with the specified key from
// the ReplicationSegment map field of NokiaConf_Configure_Router_P2MpSrTree. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetReplicationSegment(PolicyName string) *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.ReplicationSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteReplicationSegment deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_P2MpSrTree) DeleteReplicationSegment(PolicyName string) {
	key := PolicyName

	delete(t.ReplicationSegment, key)
}

// AppendReplicationSegment appends the supplied NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment struct to the
// list ReplicationSegment of NokiaConf_Configure_Router_P2MpSrTree. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_P2MpSrTree) AppendReplicationSegment(v *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReplicationSegment == nil {
		t.ReplicationSegment = make(map[string]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment)
	}

	if _, ok := t.ReplicationSegment[key]; ok {
		return fmt.Errorf("duplicate key for list ReplicationSegment %v", key)
	}

	t.ReplicationSegment[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetBfdLiveness() []E_NokiaConf_Configure_Router_P2MpSrTree_BfdLiveness {
	if t == nil || t.BfdLiveness == nil {
		return nil
	}
	return t.BfdLiveness
}

// GetReservedLabelBlock retrieves the value of the leaf ReservedLabelBlock from the NokiaConf_Configure_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedLabelBlock is set, it can
// safely use t.GetReservedLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree) GetReservedLabelBlock() string {
	if t == nil || t.ReservedLabelBlock == nil {
		return ""
	}
	return *t.ReservedLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.P2MpPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.ReplicationSegment {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree.
func (*NokiaConf_Configure_Router_P2MpSrTree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy represents the /nokia-conf/configure/router/p2mp-sr-tree/p2mp-policy YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy struct {
	AdminState         E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	CandidatePath      map[string]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath `path:"candidate-path" module:"nokia-conf"`
	P2MpPolicyName     *string                                                                    `path:"p2mp-policy-name" module:"nokia-conf"`
	RootAddress        *string                                                                    `path:"root-address" module:"nokia-conf"`
	TreeId             *uint32                                                                    `path:"tree-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) IsYANGGoStruct() {}

// NewCandidatePath creates a new entry in the CandidatePath list of the
// NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) NewCandidatePath(CandidatePathName string) (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[string]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath)
	}

	key := CandidatePathName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CandidatePath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CandidatePath", key)
	}

	t.CandidatePath[key] = &NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath{
		CandidatePathName: &CandidatePathName,
	}

	return t.CandidatePath[key], nil
}

// RenameCandidatePath renames an entry in the list CandidatePath within
// the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) RenameCandidatePath(oldK, newK string) error {
	if _, ok := t.CandidatePath[newK]; ok {
		return fmt.Errorf("key %v already exists in CandidatePath", newK)
	}

	e, ok := t.CandidatePath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CandidatePath", oldK)
	}
	e.CandidatePathName = &newK

	t.CandidatePath[newK] = e
	delete(t.CandidatePath, oldK)
	return nil
}

// GetOrCreateCandidatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetOrCreateCandidatePath(CandidatePathName string) *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath {

	key := CandidatePathName

	if v, ok := t.CandidatePath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCandidatePath(CandidatePathName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCandidatePath got unexpected error: %v", err))
	}
	return v
}

// GetCandidatePath retrieves the value with the specified key from
// the CandidatePath map field of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetCandidatePath(CandidatePathName string) *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath {

	if t == nil {
		return nil
	}

	key := CandidatePathName

	if lm, ok := t.CandidatePath[key]; ok {
		return lm
	}
	return nil
}

// DeleteCandidatePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) DeleteCandidatePath(CandidatePathName string) {
	key := CandidatePathName

	delete(t.CandidatePath, key)
}

// AppendCandidatePath appends the supplied NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct to the
// list CandidatePath of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) AppendCandidatePath(v *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) error {
	if v.CandidatePathName == nil {
		return fmt.Errorf("invalid nil key received for CandidatePathName")
	}

	key := *v.CandidatePathName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[string]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath)
	}

	if _, ok := t.CandidatePath[key]; ok {
		return fmt.Errorf("duplicate key for list CandidatePath %v", key)
	}

	t.CandidatePath[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetP2MpPolicyName retrieves the value of the leaf P2MpPolicyName from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpPolicyName is set, it can
// safely use t.GetP2MpPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetP2MpPolicyName() string {
	if t == nil || t.P2MpPolicyName == nil {
		return ""
	}
	return *t.P2MpPolicyName
}

// GetRootAddress retrieves the value of the leaf RootAddress from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootAddress is set, it can
// safely use t.GetRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetRootAddress() string {
	if t == nil || t.RootAddress == nil {
		return "0.0.0.0"
	}
	return *t.RootAddress
}

// GetTreeId retrieves the value of the leaf TreeId from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TreeId is set, it can
// safely use t.GetTreeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TreeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) GetTreeId() uint32 {
	if t == nil || t.TreeId == nil {
		return 0
	}
	return *t.TreeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RootAddress == nil {
		var v string = "0.0.0.0"
		t.RootAddress = &v
	}
	if t.TreeId == nil {
		var v uint32 = 0
		t.TreeId = &v
	}
	for _, e := range t.CandidatePath {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.P2MpPolicyName == nil {
		return nil, fmt.Errorf("nil value for key P2MpPolicyName")
	}

	return map[string]interface{}{
		"p2mp-policy-name": *t.P2MpPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy.
func (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath represents the /nokia-conf/configure/router/p2mp-sr-tree/p2mp-policy/candidate-path YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct {
	ActiveInstance     *uint32                                                                                  `path:"active-instance" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CandidatePathName  *string                                                                                  `path:"candidate-path-name" module:"nokia-conf"`
	PathInstances      map[uint32]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances `path:"path-instances" module:"nokia-conf"`
	Preference         *uint32                                                                                  `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) IsYANGGoStruct() {}

// NewPathInstances creates a new entry in the PathInstances list of the
// NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) NewPathInstances(Index uint32) (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathInstances == nil {
		t.PathInstances = make(map[uint32]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathInstances[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathInstances", key)
	}

	t.PathInstances[key] = &NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances{
		Index: &Index,
	}

	return t.PathInstances[key], nil
}

// RenamePathInstances renames an entry in the list PathInstances within
// the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) RenamePathInstances(oldK, newK uint32) error {
	if _, ok := t.PathInstances[newK]; ok {
		return fmt.Errorf("key %v already exists in PathInstances", newK)
	}

	e, ok := t.PathInstances[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathInstances", oldK)
	}
	e.Index = &newK

	t.PathInstances[newK] = e
	delete(t.PathInstances, oldK)
	return nil
}

// GetOrCreatePathInstances retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetOrCreatePathInstances(Index uint32) *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances {

	key := Index

	if v, ok := t.PathInstances[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathInstances(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathInstances got unexpected error: %v", err))
	}
	return v
}

// GetPathInstances retrieves the value with the specified key from
// the PathInstances map field of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetPathInstances(Index uint32) *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.PathInstances[key]; ok {
		return lm
	}
	return nil
}

// DeletePathInstances deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) DeletePathInstances(Index uint32) {
	key := Index

	delete(t.PathInstances, key)
}

// AppendPathInstances appends the supplied NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances struct to the
// list PathInstances of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) AppendPathInstances(v *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathInstances == nil {
		t.PathInstances = make(map[uint32]*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances)
	}

	if _, ok := t.PathInstances[key]; ok {
		return fmt.Errorf("duplicate key for list PathInstances %v", key)
	}

	t.PathInstances[key] = v
	return nil
}

// GetActiveInstance retrieves the value of the leaf ActiveInstance from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveInstance is set, it can
// safely use t.GetActiveInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetActiveInstance() uint32 {
	if t == nil || t.ActiveInstance == nil {
		return 0
	}
	return *t.ActiveInstance
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCandidatePathName retrieves the value of the leaf CandidatePathName from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CandidatePathName is set, it can
// safely use t.GetCandidatePathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CandidatePathName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetCandidatePathName() string {
	if t == nil || t.CandidatePathName == nil {
		return ""
	}
	return *t.CandidatePathName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	for _, e := range t.PathInstances {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CandidatePathName == nil {
		return nil, fmt.Errorf("nil value for key CandidatePathName")
	}

	return map[string]interface{}{
		"candidate-path-name": *t.CandidatePathName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath.
func (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances represents the /nokia-conf/configure/router/p2mp-sr-tree/p2mp-policy/candidate-path/path-instances YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	InstanceId         *uint32  `path:"instance-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances.
func (*NokiaConf_Configure_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment represents the /nokia-conf/configure/router/p2mp-sr-tree/replication-segment YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment struct {
	AdminState         E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	DownstreamNodes    map[int32]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes `path:"downstream-nodes" module:"nokia-conf"`
	InstanceId         *uint32                                                                             `path:"instance-id" module:"nokia-conf"`
	PolicyName         *string                                                                             `path:"policy-name" module:"nokia-conf"`
	ReplicationSid     *uint32                                                                             `path:"replication-sid" module:"nokia-conf"`
	RootAddress        *string                                                                             `path:"root-address" module:"nokia-conf"`
	SidAction          E_NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_SidAction                `path:"sid-action" module:"nokia-conf"`
	TreeId             *uint32                                                                             `path:"tree-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) IsYANGGoStruct() {}

// NewDownstreamNodes creates a new entry in the DownstreamNodes list of the
// NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) NewDownstreamNodes(DownstreamIndex int32) (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DownstreamNodes == nil {
		t.DownstreamNodes = make(map[int32]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes)
	}

	key := DownstreamIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DownstreamNodes[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DownstreamNodes", key)
	}

	t.DownstreamNodes[key] = &NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes{
		DownstreamIndex: &DownstreamIndex,
	}

	return t.DownstreamNodes[key], nil
}

// RenameDownstreamNodes renames an entry in the list DownstreamNodes within
// the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) RenameDownstreamNodes(oldK, newK int32) error {
	if _, ok := t.DownstreamNodes[newK]; ok {
		return fmt.Errorf("key %v already exists in DownstreamNodes", newK)
	}

	e, ok := t.DownstreamNodes[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DownstreamNodes", oldK)
	}
	e.DownstreamIndex = &newK

	t.DownstreamNodes[newK] = e
	delete(t.DownstreamNodes, oldK)
	return nil
}

// GetOrCreateDownstreamNodes retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetOrCreateDownstreamNodes(DownstreamIndex int32) *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes {

	key := DownstreamIndex

	if v, ok := t.DownstreamNodes[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDownstreamNodes(DownstreamIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDownstreamNodes got unexpected error: %v", err))
	}
	return v
}

// GetDownstreamNodes retrieves the value with the specified key from
// the DownstreamNodes map field of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetDownstreamNodes(DownstreamIndex int32) *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes {

	if t == nil {
		return nil
	}

	key := DownstreamIndex

	if lm, ok := t.DownstreamNodes[key]; ok {
		return lm
	}
	return nil
}

// DeleteDownstreamNodes deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) DeleteDownstreamNodes(DownstreamIndex int32) {
	key := DownstreamIndex

	delete(t.DownstreamNodes, key)
}

// AppendDownstreamNodes appends the supplied NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes struct to the
// list DownstreamNodes of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) AppendDownstreamNodes(v *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) error {
	if v.DownstreamIndex == nil {
		return fmt.Errorf("invalid nil key received for DownstreamIndex")
	}

	key := *v.DownstreamIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DownstreamNodes == nil {
		t.DownstreamNodes = make(map[int32]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes)
	}

	if _, ok := t.DownstreamNodes[key]; ok {
		return fmt.Errorf("duplicate key for list DownstreamNodes %v", key)
	}

	t.DownstreamNodes[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetReplicationSid retrieves the value of the leaf ReplicationSid from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplicationSid is set, it can
// safely use t.GetReplicationSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplicationSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetReplicationSid() uint32 {
	if t == nil || t.ReplicationSid == nil {
		return 0
	}
	return *t.ReplicationSid
}

// GetRootAddress retrieves the value of the leaf RootAddress from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootAddress is set, it can
// safely use t.GetRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetRootAddress() string {
	if t == nil || t.RootAddress == nil {
		return ""
	}
	return *t.RootAddress
}

// GetSidAction retrieves the value of the leaf SidAction from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidAction is set, it can
// safely use t.GetSidAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetSidAction() E_NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_SidAction {
	if t == nil || t.SidAction == 0 {
		return NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_SidAction_none
	}
	return t.SidAction
}

// GetTreeId retrieves the value of the leaf TreeId from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TreeId is set, it can
// safely use t.GetTreeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TreeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) GetTreeId() uint32 {
	if t == nil || t.TreeId == nil {
		return 0
	}
	return *t.TreeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.InstanceId == nil {
		var v uint32 = 0
		t.InstanceId = &v
	}
	if t.ReplicationSid == nil {
		var v uint32 = 0
		t.ReplicationSid = &v
	}
	if t.SidAction == 0 {
		t.SidAction = NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_SidAction_none
	}
	if t.TreeId == nil {
		var v uint32 = 0
		t.TreeId = &v
	}
	for _, e := range t.DownstreamNodes {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes represents the /nokia-conf/configure/router/p2mp-sr-tree/replication-segment/downstream-nodes YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes struct {
	AdminState           E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	DownstreamIndex      *int32                                                                          `path:"downstream-index" module:"nokia-conf"`
	Label                *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label `path:"label" module:"nokia-conf"`
	NextHopAddress       *string                                                                         `path:"next-hop-address" module:"nokia-conf"`
	NextHopInterfaceName *string                                                                         `path:"next-hop-interface-name" module:"nokia-conf"`
	ProtectNexthopId     *int32                                                                          `path:"protect-nexthop-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) IsYANGGoStruct() {}

// GetOrCreateLabel retrieves the value of the Label field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetOrCreateLabel() *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label {
	if t.Label != nil {
		return t.Label
	}
	t.Label = &NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label{}
	return t.Label
}

// GetLabel returns the value of the Label struct pointer
// from NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes. If the receiver or the field Label is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetLabel() *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label {
	if t != nil && t.Label != nil {
		return t.Label
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDownstreamIndex retrieves the value of the leaf DownstreamIndex from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownstreamIndex is set, it can
// safely use t.GetDownstreamIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownstreamIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetDownstreamIndex() int32 {
	if t == nil || t.DownstreamIndex == nil {
		return 0
	}
	return *t.DownstreamIndex
}

// GetNextHopAddress retrieves the value of the leaf NextHopAddress from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopAddress is set, it can
// safely use t.GetNextHopAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetNextHopAddress() string {
	if t == nil || t.NextHopAddress == nil {
		return "0.0.0.0"
	}
	return *t.NextHopAddress
}

// GetNextHopInterfaceName retrieves the value of the leaf NextHopInterfaceName from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopInterfaceName is set, it can
// safely use t.GetNextHopInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetNextHopInterfaceName() string {
	if t == nil || t.NextHopInterfaceName == nil {
		return ""
	}
	return *t.NextHopInterfaceName
}

// GetProtectNexthopId retrieves the value of the leaf ProtectNexthopId from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectNexthopId is set, it can
// safely use t.GetProtectNexthopId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectNexthopId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetProtectNexthopId() int32 {
	if t == nil || t.ProtectNexthopId == nil {
		return 0
	}
	return *t.ProtectNexthopId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NextHopAddress == nil {
		var v string = "0.0.0.0"
		t.NextHopAddress = &v
	}
	t.Label.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DownstreamIndex == nil {
		return nil, fmt.Errorf("nil value for key DownstreamIndex")
	}

	return map[string]interface{}{
		"downstream-index": *t.DownstreamIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label represents the /nokia-conf/configure/router/p2mp-sr-tree/replication-segment/downstream-nodes/label YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label struct {
	SidList map[uint32]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList `path:"sid-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) IsYANGGoStruct() {
}

// NewSidList creates a new entry in the SidList list of the
// NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) NewSidList(Index uint32) (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SidList == nil {
		t.SidList = make(map[uint32]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SidList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SidList", key)
	}

	t.SidList[key] = &NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList{
		Index: &Index,
	}

	return t.SidList[key], nil
}

// RenameSidList renames an entry in the list SidList within
// the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) RenameSidList(oldK, newK uint32) error {
	if _, ok := t.SidList[newK]; ok {
		return fmt.Errorf("key %v already exists in SidList", newK)
	}

	e, ok := t.SidList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SidList", oldK)
	}
	e.Index = &newK

	t.SidList[newK] = e
	delete(t.SidList, oldK)
	return nil
}

// GetOrCreateSidList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) GetOrCreateSidList(Index uint32) *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList {

	key := Index

	if v, ok := t.SidList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSidList(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSidList got unexpected error: %v", err))
	}
	return v
}

// GetSidList retrieves the value with the specified key from
// the SidList map field of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) GetSidList(Index uint32) *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.SidList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSidList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) DeleteSidList(Index uint32) {
	key := Index

	delete(t.SidList, key)
}

// AppendSidList appends the supplied NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList struct to the
// list SidList of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) AppendSidList(v *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SidList == nil {
		t.SidList = make(map[uint32]*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList)
	}

	if _, ok := t.SidList[key]; ok {
		return fmt.Errorf("duplicate key for list SidList %v", key)
	}

	t.SidList[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SidList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList represents the /nokia-conf/configure/router/p2mp-sr-tree/replication-segment/downstream-nodes/label/sid-list YANG schema element.
type NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	ReplicationSid     *uint32  `path:"replication-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetReplicationSid retrieves the value of the leaf ReplicationSid from the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplicationSid is set, it can
// safely use t.GetReplicationSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplicationSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) GetReplicationSid() uint32 {
	if t == nil || t.ReplicationSid == nil {
		return 0
	}
	return *t.ReplicationSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList.
func (*NokiaConf_Configure_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcep represents the /nokia-conf/configure/router/pcep YANG schema element.
type NokiaConf_Configure_Router_Pcep struct {
	ApplyGroups        []string                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Pcc                *NokiaConf_Configure_Router_Pcep_Pcc `path:"pcc" module:"nokia-conf" yangPresence:"true"`
	Pce                *NokiaConf_Configure_Router_Pcep_Pce `path:"pce" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcep) IsYANGGoStruct() {}

// GetOrCreatePcc retrieves the value of the Pcc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pcep) GetOrCreatePcc() *NokiaConf_Configure_Router_Pcep_Pcc {
	if t.Pcc != nil {
		return t.Pcc
	}
	t.Pcc = &NokiaConf_Configure_Router_Pcep_Pcc{}
	return t.Pcc
}

// GetOrCreatePce retrieves the value of the Pce field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pcep) GetOrCreatePce() *NokiaConf_Configure_Router_Pcep_Pce {
	if t.Pce != nil {
		return t.Pce
	}
	t.Pce = &NokiaConf_Configure_Router_Pcep_Pce{}
	return t.Pce
}

// GetPcc returns the value of the Pcc struct pointer
// from NokiaConf_Configure_Router_Pcep. If the receiver or the field Pcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pcep) GetPcc() *NokiaConf_Configure_Router_Pcep_Pcc {
	if t != nil && t.Pcc != nil {
		return t.Pcc
	}
	return nil
}

// GetPce returns the value of the Pce struct pointer
// from NokiaConf_Configure_Router_Pcep. If the receiver or the field Pce is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pcep) GetPce() *NokiaConf_Configure_Router_Pcep_Pce {
	if t != nil && t.Pce != nil {
		return t.Pce
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pcep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pcep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pcc.PopulateDefaults()
	t.Pce.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcep.
func (*NokiaConf_Configure_Router_Pcep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcep_Pcc represents the /nokia-conf/configure/router/pcep/pcc YANG schema element.
type NokiaConf_Configure_Router_Pcep_Pcc struct {
	AdminState            E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	DeadTimer             *uint32                                              `path:"dead-timer" module:"nokia-conf"`
	Keepalive             *uint32                                              `path:"keepalive" module:"nokia-conf"`
	LocalAddress          *string                                              `path:"local-address" module:"nokia-conf"`
	LocalAddressIpv6      *string                                              `path:"local-address-ipv6" module:"nokia-conf"`
	MaxSrtePceInitLsps    *uint32                                              `path:"max-srte-pce-init-lsps" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Router_Pcep_Pcc_Peer `path:"peer" module:"nokia-conf"`
	RedelegationTimer     *uint32                                              `path:"redelegation-timer" module:"nokia-conf"`
	ReportPathConstraints *bool                                                `path:"report-path-constraints" module:"nokia-conf"`
	StateTimer            *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer      `path:"state-timer" module:"nokia-conf"`
	UnknownMessageRate    *uint32                                              `path:"unknown-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcep_Pcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcep_Pcc) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Router_Pcep_Pcc struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) NewPeer(IpAddress string) (*NokiaConf_Configure_Router_Pcep_Pcc_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_Pcep_Pcc_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Router_Pcep_Pcc_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Router_Pcep_Pcc struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pcep_Pcc. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Router_Pcep_Pcc_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Router_Pcep_Pcc. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetPeer(IpAddress string) *NokiaConf_Configure_Router_Pcep_Pcc_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pcep_Pcc. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Router_Pcep_Pcc_Peer struct to the
// list Peer of NokiaConf_Configure_Router_Pcep_Pcc. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pcep_Pcc_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) AppendPeer(v *NokiaConf_Configure_Router_Pcep_Pcc_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_Pcep_Pcc_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateStateTimer retrieves the value of the StateTimer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetOrCreateStateTimer() *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer {
	if t.StateTimer != nil {
		return t.StateTimer
	}
	t.StateTimer = &NokiaConf_Configure_Router_Pcep_Pcc_StateTimer{}
	return t.StateTimer
}

// GetStateTimer returns the value of the StateTimer struct pointer
// from NokiaConf_Configure_Router_Pcep_Pcc. If the receiver or the field StateTimer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetStateTimer() *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer {
	if t != nil && t.StateTimer != nil {
		return t.StateTimer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetDeadTimer() uint32 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalAddressIpv6 retrieves the value of the leaf LocalAddressIpv6 from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddressIpv6 is set, it can
// safely use t.GetLocalAddressIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddressIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetLocalAddressIpv6() string {
	if t == nil || t.LocalAddressIpv6 == nil {
		return ""
	}
	return *t.LocalAddressIpv6
}

// GetMaxSrtePceInitLsps retrieves the value of the leaf MaxSrtePceInitLsps from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrtePceInitLsps is set, it can
// safely use t.GetMaxSrtePceInitLsps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrtePceInitLsps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetMaxSrtePceInitLsps() uint32 {
	if t == nil || t.MaxSrtePceInitLsps == nil {
		return 8191
	}
	return *t.MaxSrtePceInitLsps
}

// GetRedelegationTimer retrieves the value of the leaf RedelegationTimer from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedelegationTimer is set, it can
// safely use t.GetRedelegationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedelegationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetRedelegationTimer() uint32 {
	if t == nil || t.RedelegationTimer == nil {
		return 90
	}
	return *t.RedelegationTimer
}

// GetReportPathConstraints retrieves the value of the leaf ReportPathConstraints from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportPathConstraints is set, it can
// safely use t.GetReportPathConstraints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportPathConstraints == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetReportPathConstraints() bool {
	if t == nil || t.ReportPathConstraints == nil {
		return true
	}
	return *t.ReportPathConstraints
}

// GetUnknownMessageRate retrieves the value of the leaf UnknownMessageRate from the NokiaConf_Configure_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMessageRate is set, it can
// safely use t.GetUnknownMessageRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMessageRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) GetUnknownMessageRate() uint32 {
	if t == nil || t.UnknownMessageRate == nil {
		return 10
	}
	return *t.UnknownMessageRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcep_Pcc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DeadTimer == nil {
		var v uint32 = 120
		t.DeadTimer = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 30
		t.Keepalive = &v
	}
	if t.MaxSrtePceInitLsps == nil {
		var v uint32 = 8191
		t.MaxSrtePceInitLsps = &v
	}
	if t.RedelegationTimer == nil {
		var v uint32 = 90
		t.RedelegationTimer = &v
	}
	if t.ReportPathConstraints == nil {
		var v bool = true
		t.ReportPathConstraints = &v
	}
	if t.UnknownMessageRate == nil {
		var v uint32 = 10
		t.UnknownMessageRate = &v
	}
	t.StateTimer.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcep_Pcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcep_Pcc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcep_Pcc.
func (*NokiaConf_Configure_Router_Pcep_Pcc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcep_Pcc_Peer represents the /nokia-conf/configure/router/pcep/pcc/peer YANG schema element.
type NokiaConf_Configure_Router_Pcep_Pcc_Peer struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string                                                    `path:"ip-address" module:"nokia-conf"`
	Preference         *uint32                                                    `path:"preference" module:"nokia-conf"`
	RoutePreference    E_NokiaConf_Configure_Router_Pcep_Pcc_Peer_RoutePreference `path:"route-preference" module:"nokia-conf"`
	TlsClientProfile   *string                                                    `path:"tls-client-profile" module:"nokia-conf"`
	TlsWaitTimer       *uint32                                                    `path:"tls-wait-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcep_Pcc_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcep_Pcc_Peer) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetRoutePreference() E_NokiaConf_Configure_Router_Pcep_Pcc_Peer_RoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaConf_Configure_Router_Pcep_Pcc_Peer_RoutePreference_both
	}
	return t.RoutePreference
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// GetTlsWaitTimer retrieves the value of the leaf TlsWaitTimer from the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsWaitTimer is set, it can
// safely use t.GetTlsWaitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsWaitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) GetTlsWaitTimer() uint32 {
	if t == nil || t.TlsWaitTimer == nil {
		return 60
	}
	return *t.TlsWaitTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcep_Pcc_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 0
		t.Preference = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaConf_Configure_Router_Pcep_Pcc_Peer_RoutePreference_both
	}
	if t.TlsWaitTimer == nil {
		var v uint32 = 60
		t.TlsWaitTimer = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pcep_Pcc_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcep_Pcc_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcep_Pcc_Peer.
func (*NokiaConf_Configure_Router_Pcep_Pcc_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcep_Pcc_StateTimer represents the /nokia-conf/configure/router/pcep/pcc/state-timer YANG schema element.
type NokiaConf_Configure_Router_Pcep_Pcc_StateTimer struct {
	Timer       *uint32                                                      `path:"timer" module:"nokia-conf"`
	TimerAction E_NokiaConf_Configure_Router_Pcep_Pcc_StateTimer_TimerAction `path:"timer-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcep_Pcc_StateTimer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) IsYANGGoStruct() {}

// GetTimer retrieves the value of the leaf Timer from the NokiaConf_Configure_Router_Pcep_Pcc_StateTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timer is set, it can
// safely use t.GetTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) GetTimer() uint32 {
	if t == nil || t.Timer == nil {
		return 180
	}
	return *t.Timer
}

// GetTimerAction retrieves the value of the leaf TimerAction from the NokiaConf_Configure_Router_Pcep_Pcc_StateTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimerAction is set, it can
// safely use t.GetTimerAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimerAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) GetTimerAction() E_NokiaConf_Configure_Router_Pcep_Pcc_StateTimer_TimerAction {
	if t == nil || t.TimerAction == 0 {
		return NokiaConf_Configure_Router_Pcep_Pcc_StateTimer_TimerAction_remove
	}
	return t.TimerAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcep_Pcc_StateTimer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timer == nil {
		var v uint32 = 180
		t.Timer = &v
	}
	if t.TimerAction == 0 {
		t.TimerAction = NokiaConf_Configure_Router_Pcep_Pcc_StateTimer_TimerAction_remove
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcep_Pcc_StateTimer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcep_Pcc_StateTimer.
func (*NokiaConf_Configure_Router_Pcep_Pcc_StateTimer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcep_Pce represents the /nokia-conf/configure/router/pcep/pce YANG schema element.
type NokiaConf_Configure_Router_Pcep_Pce struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DeadTimer          *uint32                     `path:"dead-timer" module:"nokia-conf"`
	Keepalive          *uint32                     `path:"keepalive" module:"nokia-conf"`
	LocalAddress       *string                     `path:"local-address" module:"nokia-conf"`
	LocalAddressIpv6   *string                     `path:"local-address-ipv6" module:"nokia-conf"`
	TlsServerProfile   *string                     `path:"tls-server-profile" module:"nokia-conf"`
	TlsWaitTimer       *uint32                     `path:"tls-wait-timer" module:"nokia-conf"`
	UnknownMessageRate *uint32                     `path:"unknown-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcep_Pce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcep_Pce) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetDeadTimer() uint32 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalAddressIpv6 retrieves the value of the leaf LocalAddressIpv6 from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddressIpv6 is set, it can
// safely use t.GetLocalAddressIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddressIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetLocalAddressIpv6() string {
	if t == nil || t.LocalAddressIpv6 == nil {
		return ""
	}
	return *t.LocalAddressIpv6
}

// GetTlsServerProfile retrieves the value of the leaf TlsServerProfile from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsServerProfile is set, it can
// safely use t.GetTlsServerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsServerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetTlsServerProfile() string {
	if t == nil || t.TlsServerProfile == nil {
		return ""
	}
	return *t.TlsServerProfile
}

// GetTlsWaitTimer retrieves the value of the leaf TlsWaitTimer from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsWaitTimer is set, it can
// safely use t.GetTlsWaitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsWaitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetTlsWaitTimer() uint32 {
	if t == nil || t.TlsWaitTimer == nil {
		return 60
	}
	return *t.TlsWaitTimer
}

// GetUnknownMessageRate retrieves the value of the leaf UnknownMessageRate from the NokiaConf_Configure_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMessageRate is set, it can
// safely use t.GetUnknownMessageRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMessageRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcep_Pce) GetUnknownMessageRate() uint32 {
	if t == nil || t.UnknownMessageRate == nil {
		return 10
	}
	return *t.UnknownMessageRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcep_Pce
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcep_Pce) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DeadTimer == nil {
		var v uint32 = 120
		t.DeadTimer = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 30
		t.Keepalive = &v
	}
	if t.TlsWaitTimer == nil {
		var v uint32 = 60
		t.TlsWaitTimer = &v
	}
	if t.UnknownMessageRate == nil {
		var v uint32 = 10
		t.UnknownMessageRate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcep_Pce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcep_Pce) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcep_Pce) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcep_Pce.
func (*NokiaConf_Configure_Router_Pcep_Pce) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcp represents the /nokia-conf/configure/router/pcp YANG schema element.
type NokiaConf_Configure_Router_Pcp struct {
	Server map[string]*NokiaConf_Configure_Router_Pcp_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcp) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Router_Pcp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pcp) NewServer(Name string) (*NokiaConf_Configure_Router_Pcp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Router_Pcp_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Router_Pcp_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Router_Pcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pcp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Name = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pcp) GetOrCreateServer(Name string) *NokiaConf_Configure_Router_Pcp_Server {

	key := Name

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Router_Pcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pcp) GetServer(Name string) *NokiaConf_Configure_Router_Pcp_Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pcp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pcp) DeleteServer(Name string) {
	key := Name

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Router_Pcp_Server struct to the
// list Server of NokiaConf_Configure_Router_Pcp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pcp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pcp) AppendServer(v *NokiaConf_Configure_Router_Pcp_Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Router_Pcp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcp.
func (*NokiaConf_Configure_Router_Pcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcp_Server represents the /nokia-conf/configure/router/pcp/server YANG schema element.
type NokiaConf_Configure_Router_Pcp_Server struct {
	AdminState           E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                     `path:"description" module:"nokia-conf"`
	DualStackLiteAddress *string                                                     `path:"dual-stack-lite-address" module:"nokia-conf"`
	FwdInsideRouter      *string                                                     `path:"fwd-inside-router" module:"nokia-conf"`
	Interface            map[string]*NokiaConf_Configure_Router_Pcp_Server_Interface `path:"interface" module:"nokia-conf"`
	Name                 *string                                                     `path:"name" module:"nokia-conf"`
	Policy               *string                                                     `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcp_Server) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_Pcp_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pcp_Server) NewInterface(Name string) (*NokiaConf_Configure_Router_Pcp_Server_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Pcp_Server_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Pcp_Server_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_Pcp_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pcp_Server) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pcp_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetOrCreateInterface(Name string) *NokiaConf_Configure_Router_Pcp_Server_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_Pcp_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetInterface(Name string) *NokiaConf_Configure_Router_Pcp_Server_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pcp_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pcp_Server) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Pcp_Server_Interface struct to the
// list Interface of NokiaConf_Configure_Router_Pcp_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pcp_Server_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pcp_Server) AppendInterface(v *NokiaConf_Configure_Router_Pcp_Server_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Pcp_Server_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDualStackLiteAddress retrieves the value of the leaf DualStackLiteAddress from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DualStackLiteAddress is set, it can
// safely use t.GetDualStackLiteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DualStackLiteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetDualStackLiteAddress() string {
	if t == nil || t.DualStackLiteAddress == nil {
		return ""
	}
	return *t.DualStackLiteAddress
}

// GetFwdInsideRouter retrieves the value of the leaf FwdInsideRouter from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdInsideRouter is set, it can
// safely use t.GetFwdInsideRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdInsideRouter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetFwdInsideRouter() string {
	if t == nil || t.FwdInsideRouter == nil {
		return ""
	}
	return *t.FwdInsideRouter
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pcp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pcp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcp_Server.
func (*NokiaConf_Configure_Router_Pcp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pcp_Server_Interface represents the /nokia-conf/configure/router/pcp/server/interface YANG schema element.
type NokiaConf_Configure_Router_Pcp_Server_Interface struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pcp_Server_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pcp_Server_Interface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Pcp_Server_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pcp_Server_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pcp_Server_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pcp_Server_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pcp_Server_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pcp_Server_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcp_Server_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pcp_Server_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pcp_Server_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pcp_Server_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pcp_Server_Interface.
func (*NokiaConf_Configure_Router_Pcp_Server_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim represents the /nokia-conf/configure/router/pim YANG schema element.
type NokiaConf_Configure_Router_Pim struct {
	AdminState           E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	ApplyTo              E_NokiaConf_Configure_Router_Pim_ApplyTo                 `path:"apply-to" module:"nokia-conf"`
	Import               *NokiaConf_Configure_Router_Pim_Import                   `path:"import" module:"nokia-conf"`
	Interface            map[string]*NokiaConf_Configure_Router_Pim_Interface     `path:"interface" module:"nokia-conf"`
	Ipv4                 *NokiaConf_Configure_Router_Pim_Ipv4                     `path:"ipv4" module:"nokia-conf"`
	Ipv6                 *NokiaConf_Configure_Router_Pim_Ipv6                     `path:"ipv6" module:"nokia-conf"`
	LagUsageOptimization *bool                                                    `path:"lag-usage-optimization" module:"nokia-conf"`
	McEcmpBalance        *bool                                                    `path:"mc-ecmp-balance" module:"nokia-conf"`
	McEcmpBalanceHold    *uint32                                                  `path:"mc-ecmp-balance-hold" module:"nokia-conf"`
	McEcmpHashing        *NokiaConf_Configure_Router_Pim_McEcmpHashing            `path:"mc-ecmp-hashing" module:"nokia-conf" yangPresence:"true"`
	MdtSpt               *bool                                                    `path:"mdt-spt" module:"nokia-conf"`
	NonDrAttractTraffic  *bool                                                    `path:"non-dr-attract-traffic" module:"nokia-conf"`
	PimSsmScaling        *bool                                                    `path:"pim-ssm-scaling" module:"nokia-conf"`
	Rp                   *NokiaConf_Configure_Router_Pim_Rp                       `path:"rp" module:"nokia-conf"`
	Rpfv                 *NokiaConf_Configure_Router_Pim_Rpfv                     `path:"rpfv" module:"nokia-conf"`
	SptSwitchover        map[string]*NokiaConf_Configure_Router_Pim_SptSwitchover `path:"spt-switchover" module:"nokia-conf"`
	SsmGroups            *NokiaConf_Configure_Router_Pim_SsmGroups                `path:"ssm-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim) NewInterface(InterfaceName string) (*NokiaConf_Configure_Router_Pim_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Pim_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Pim_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Router_Pim_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetInterface(InterfaceName string) *NokiaConf_Configure_Router_Pim_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Pim_Interface struct to the
// list Interface of NokiaConf_Configure_Router_Pim. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim) AppendInterface(v *NokiaConf_Configure_Router_Pim_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSptSwitchover creates a new entry in the SptSwitchover list of the
// NokiaConf_Configure_Router_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim) NewSptSwitchover(IpPrefix string) (*NokiaConf_Configure_Router_Pim_SptSwitchover, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SptSwitchover == nil {
		t.SptSwitchover = make(map[string]*NokiaConf_Configure_Router_Pim_SptSwitchover)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SptSwitchover[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SptSwitchover", key)
	}

	t.SptSwitchover[key] = &NokiaConf_Configure_Router_Pim_SptSwitchover{
		IpPrefix: &IpPrefix,
	}

	return t.SptSwitchover[key], nil
}

// RenameSptSwitchover renames an entry in the list SptSwitchover within
// the NokiaConf_Configure_Router_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim) RenameSptSwitchover(oldK, newK string) error {
	if _, ok := t.SptSwitchover[newK]; ok {
		return fmt.Errorf("key %v already exists in SptSwitchover", newK)
	}

	e, ok := t.SptSwitchover[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SptSwitchover", oldK)
	}
	e.IpPrefix = &newK

	t.SptSwitchover[newK] = e
	delete(t.SptSwitchover, oldK)
	return nil
}

// GetOrCreateSptSwitchover retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateSptSwitchover(IpPrefix string) *NokiaConf_Configure_Router_Pim_SptSwitchover {

	key := IpPrefix

	if v, ok := t.SptSwitchover[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSptSwitchover(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSptSwitchover got unexpected error: %v", err))
	}
	return v
}

// GetSptSwitchover retrieves the value with the specified key from
// the SptSwitchover map field of NokiaConf_Configure_Router_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetSptSwitchover(IpPrefix string) *NokiaConf_Configure_Router_Pim_SptSwitchover {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SptSwitchover[key]; ok {
		return lm
	}
	return nil
}

// DeleteSptSwitchover deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim) DeleteSptSwitchover(IpPrefix string) {
	key := IpPrefix

	delete(t.SptSwitchover, key)
}

// AppendSptSwitchover appends the supplied NokiaConf_Configure_Router_Pim_SptSwitchover struct to the
// list SptSwitchover of NokiaConf_Configure_Router_Pim. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_SptSwitchover already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim) AppendSptSwitchover(v *NokiaConf_Configure_Router_Pim_SptSwitchover) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SptSwitchover == nil {
		t.SptSwitchover = make(map[string]*NokiaConf_Configure_Router_Pim_SptSwitchover)
	}

	if _, ok := t.SptSwitchover[key]; ok {
		return fmt.Errorf("duplicate key for list SptSwitchover %v", key)
	}

	t.SptSwitchover[key] = v
	return nil
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateImport() *NokiaConf_Configure_Router_Pim_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Router_Pim_Import{}
	return t.Import
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateIpv4() *NokiaConf_Configure_Router_Pim_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Pim_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateIpv6() *NokiaConf_Configure_Router_Pim_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Pim_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMcEcmpHashing retrieves the value of the McEcmpHashing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateMcEcmpHashing() *NokiaConf_Configure_Router_Pim_McEcmpHashing {
	if t.McEcmpHashing != nil {
		return t.McEcmpHashing
	}
	t.McEcmpHashing = &NokiaConf_Configure_Router_Pim_McEcmpHashing{}
	return t.McEcmpHashing
}

// GetOrCreateRp retrieves the value of the Rp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateRp() *NokiaConf_Configure_Router_Pim_Rp {
	if t.Rp != nil {
		return t.Rp
	}
	t.Rp = &NokiaConf_Configure_Router_Pim_Rp{}
	return t.Rp
}

// GetOrCreateRpfv retrieves the value of the Rpfv field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateRpfv() *NokiaConf_Configure_Router_Pim_Rpfv {
	if t.Rpfv != nil {
		return t.Rpfv
	}
	t.Rpfv = &NokiaConf_Configure_Router_Pim_Rpfv{}
	return t.Rpfv
}

// GetOrCreateSsmGroups retrieves the value of the SsmGroups field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim) GetOrCreateSsmGroups() *NokiaConf_Configure_Router_Pim_SsmGroups {
	if t.SsmGroups != nil {
		return t.SsmGroups
	}
	t.SsmGroups = &NokiaConf_Configure_Router_Pim_SsmGroups{}
	return t.SsmGroups
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetImport() *NokiaConf_Configure_Router_Pim_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetIpv4() *NokiaConf_Configure_Router_Pim_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetIpv6() *NokiaConf_Configure_Router_Pim_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMcEcmpHashing returns the value of the McEcmpHashing struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field McEcmpHashing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetMcEcmpHashing() *NokiaConf_Configure_Router_Pim_McEcmpHashing {
	if t != nil && t.McEcmpHashing != nil {
		return t.McEcmpHashing
	}
	return nil
}

// GetRp returns the value of the Rp struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field Rp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetRp() *NokiaConf_Configure_Router_Pim_Rp {
	if t != nil && t.Rp != nil {
		return t.Rp
	}
	return nil
}

// GetRpfv returns the value of the Rpfv struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field Rpfv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetRpfv() *NokiaConf_Configure_Router_Pim_Rpfv {
	if t != nil && t.Rpfv != nil {
		return t.Rpfv
	}
	return nil
}

// GetSsmGroups returns the value of the SsmGroups struct pointer
// from NokiaConf_Configure_Router_Pim. If the receiver or the field SsmGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim) GetSsmGroups() *NokiaConf_Configure_Router_Pim_SsmGroups {
	if t != nil && t.SsmGroups != nil {
		return t.SsmGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetApplyTo retrieves the value of the leaf ApplyTo from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyTo is set, it can
// safely use t.GetApplyTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyTo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetApplyTo() E_NokiaConf_Configure_Router_Pim_ApplyTo {
	if t == nil || t.ApplyTo == 0 {
		return NokiaConf_Configure_Router_Pim_ApplyTo_none
	}
	return t.ApplyTo
}

// GetLagUsageOptimization retrieves the value of the leaf LagUsageOptimization from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagUsageOptimization is set, it can
// safely use t.GetLagUsageOptimization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagUsageOptimization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetLagUsageOptimization() bool {
	if t == nil || t.LagUsageOptimization == nil {
		return false
	}
	return *t.LagUsageOptimization
}

// GetMcEcmpBalance retrieves the value of the leaf McEcmpBalance from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEcmpBalance is set, it can
// safely use t.GetMcEcmpBalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEcmpBalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetMcEcmpBalance() bool {
	if t == nil || t.McEcmpBalance == nil {
		return true
	}
	return *t.McEcmpBalance
}

// GetMcEcmpBalanceHold retrieves the value of the leaf McEcmpBalanceHold from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEcmpBalanceHold is set, it can
// safely use t.GetMcEcmpBalanceHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEcmpBalanceHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetMcEcmpBalanceHold() uint32 {
	if t == nil || t.McEcmpBalanceHold == nil {
		return 0
	}
	return *t.McEcmpBalanceHold
}

// GetMdtSpt retrieves the value of the leaf MdtSpt from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSpt is set, it can
// safely use t.GetMdtSpt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSpt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetMdtSpt() bool {
	if t == nil || t.MdtSpt == nil {
		return false
	}
	return *t.MdtSpt
}

// GetNonDrAttractTraffic retrieves the value of the leaf NonDrAttractTraffic from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonDrAttractTraffic is set, it can
// safely use t.GetNonDrAttractTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonDrAttractTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetNonDrAttractTraffic() bool {
	if t == nil || t.NonDrAttractTraffic == nil {
		return false
	}
	return *t.NonDrAttractTraffic
}

// GetPimSsmScaling retrieves the value of the leaf PimSsmScaling from the NokiaConf_Configure_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PimSsmScaling is set, it can
// safely use t.GetPimSsmScaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PimSsmScaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim) GetPimSsmScaling() bool {
	if t == nil || t.PimSsmScaling == nil {
		return false
	}
	return *t.PimSsmScaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ApplyTo == 0 {
		t.ApplyTo = NokiaConf_Configure_Router_Pim_ApplyTo_none
	}
	if t.LagUsageOptimization == nil {
		var v bool = false
		t.LagUsageOptimization = &v
	}
	if t.McEcmpBalance == nil {
		var v bool = true
		t.McEcmpBalance = &v
	}
	if t.MdtSpt == nil {
		var v bool = false
		t.MdtSpt = &v
	}
	if t.NonDrAttractTraffic == nil {
		var v bool = false
		t.NonDrAttractTraffic = &v
	}
	if t.PimSsmScaling == nil {
		var v bool = false
		t.PimSsmScaling = &v
	}
	t.Import.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.McEcmpHashing.PopulateDefaults()
	t.Rp.PopulateDefaults()
	t.Rpfv.PopulateDefaults()
	t.SsmGroups.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SptSwitchover {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim.
func (*NokiaConf_Configure_Router_Pim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Import represents the /nokia-conf/configure/router/pim/import YANG schema element.
type NokiaConf_Configure_Router_Pim_Import struct {
	JoinPolicy     []string `path:"join-policy" module:"nokia-conf"`
	RegisterPolicy []string `path:"register-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Import) IsYANGGoStruct() {}

// GetJoinPolicy retrieves the value of the leaf JoinPolicy from the NokiaConf_Configure_Router_Pim_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPolicy is set, it can
// safely use t.GetJoinPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Import) GetJoinPolicy() []string {
	if t == nil || t.JoinPolicy == nil {
		return nil
	}
	return t.JoinPolicy
}

// GetRegisterPolicy retrieves the value of the leaf RegisterPolicy from the NokiaConf_Configure_Router_Pim_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RegisterPolicy is set, it can
// safely use t.GetRegisterPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RegisterPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Import) GetRegisterPolicy() []string {
	if t == nil || t.RegisterPolicy == nil {
		return nil
	}
	return t.RegisterPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Import.
func (*NokiaConf_Configure_Router_Pim_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface represents the /nokia-conf/configure/router/pim/interface YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface struct {
	AdminState         E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AssertPeriod       *int32                                                      `path:"assert-period" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness       `path:"bfd-liveness" module:"nokia-conf"`
	BierSignalingType  *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType `path:"bier-signaling-type" module:"nokia-conf"`
	BsmCheckRtrAlert   *bool                                                       `path:"bsm-check-rtr-alert" module:"nokia-conf"`
	HelloInterval      *int32                                                      `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier    *uint32                                                     `path:"hello-multiplier" module:"nokia-conf"`
	ImprovedAssert     *bool                                                       `path:"improved-assert" module:"nokia-conf"`
	InstantPruneEcho   *bool                                                       `path:"instant-prune-echo" module:"nokia-conf"`
	InterfaceName      *string                                                     `path:"interface-name" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Router_Pim_Interface_Ipv4              `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Router_Pim_Interface_Ipv6              `path:"ipv6" module:"nokia-conf"`
	MaxGroups          *uint32                                                     `path:"max-groups" module:"nokia-conf"`
	Mcac               *NokiaConf_Configure_Router_Pim_Interface_Mcac              `path:"mcac" module:"nokia-conf"`
	MulticastSenders   E_NokiaConf_Configure_Router_Pim_Interface_MulticastSenders `path:"multicast-senders" module:"nokia-conf"`
	P2MpLdpTreeJoin    *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin   `path:"p2mp-ldp-tree-join" module:"nokia-conf"`
	Priority           *uint32                                                     `path:"priority" module:"nokia-conf"`
	StickyDr           *NokiaConf_Configure_Router_Pim_Interface_StickyDr          `path:"sticky-dr" module:"nokia-conf" yangPresence:"true"`
	ThreeWayHello      *bool                                                       `path:"three-way-hello" module:"nokia-conf"`
	TrackingSupport    *bool                                                       `path:"tracking-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Router_Pim_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateBierSignalingType retrieves the value of the BierSignalingType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateBierSignalingType() *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType {
	if t.BierSignalingType != nil {
		return t.BierSignalingType
	}
	t.BierSignalingType = &NokiaConf_Configure_Router_Pim_Interface_BierSignalingType{}
	return t.BierSignalingType
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Router_Pim_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Pim_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Router_Pim_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Pim_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateMcac() *NokiaConf_Configure_Router_Pim_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Router_Pim_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateP2MpLdpTreeJoin retrieves the value of the P2MpLdpTreeJoin field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateP2MpLdpTreeJoin() *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin {
	if t.P2MpLdpTreeJoin != nil {
		return t.P2MpLdpTreeJoin
	}
	t.P2MpLdpTreeJoin = &NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin{}
	return t.P2MpLdpTreeJoin
}

// GetOrCreateStickyDr retrieves the value of the StickyDr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetOrCreateStickyDr() *NokiaConf_Configure_Router_Pim_Interface_StickyDr {
	if t.StickyDr != nil {
		return t.StickyDr
	}
	t.StickyDr = &NokiaConf_Configure_Router_Pim_Interface_StickyDr{}
	return t.StickyDr
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetBfdLiveness() *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBierSignalingType returns the value of the BierSignalingType struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field BierSignalingType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetBierSignalingType() *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType {
	if t != nil && t.BierSignalingType != nil {
		return t.BierSignalingType
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetIpv4() *NokiaConf_Configure_Router_Pim_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetIpv6() *NokiaConf_Configure_Router_Pim_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetMcac() *NokiaConf_Configure_Router_Pim_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetP2MpLdpTreeJoin returns the value of the P2MpLdpTreeJoin struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field P2MpLdpTreeJoin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetP2MpLdpTreeJoin() *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin {
	if t != nil && t.P2MpLdpTreeJoin != nil {
		return t.P2MpLdpTreeJoin
	}
	return nil
}

// GetStickyDr returns the value of the StickyDr struct pointer
// from NokiaConf_Configure_Router_Pim_Interface. If the receiver or the field StickyDr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetStickyDr() *NokiaConf_Configure_Router_Pim_Interface_StickyDr {
	if t != nil && t.StickyDr != nil {
		return t.StickyDr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAssertPeriod retrieves the value of the leaf AssertPeriod from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssertPeriod is set, it can
// safely use t.GetAssertPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssertPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetAssertPeriod() int32 {
	if t == nil || t.AssertPeriod == nil {
		return 60
	}
	return *t.AssertPeriod
}

// GetBsmCheckRtrAlert retrieves the value of the leaf BsmCheckRtrAlert from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BsmCheckRtrAlert is set, it can
// safely use t.GetBsmCheckRtrAlert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BsmCheckRtrAlert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetBsmCheckRtrAlert() bool {
	if t == nil || t.BsmCheckRtrAlert == nil {
		return false
	}
	return *t.BsmCheckRtrAlert
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetHelloInterval() int32 {
	if t == nil || t.HelloInterval == nil {
		return 30
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetHelloMultiplier() uint32 {
	if t == nil || t.HelloMultiplier == nil {
		return 35
	}
	return *t.HelloMultiplier
}

// GetImprovedAssert retrieves the value of the leaf ImprovedAssert from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImprovedAssert is set, it can
// safely use t.GetImprovedAssert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImprovedAssert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetImprovedAssert() bool {
	if t == nil || t.ImprovedAssert == nil {
		return true
	}
	return *t.ImprovedAssert
}

// GetInstantPruneEcho retrieves the value of the leaf InstantPruneEcho from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstantPruneEcho is set, it can
// safely use t.GetInstantPruneEcho() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstantPruneEcho == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetInstantPruneEcho() bool {
	if t == nil || t.InstantPruneEcho == nil {
		return false
	}
	return *t.InstantPruneEcho
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxGroups retrieves the value of the leaf MaxGroups from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroups is set, it can
// safely use t.GetMaxGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetMaxGroups() uint32 {
	if t == nil || t.MaxGroups == nil {
		return 0
	}
	return *t.MaxGroups
}

// GetMulticastSenders retrieves the value of the leaf MulticastSenders from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastSenders is set, it can
// safely use t.GetMulticastSenders() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastSenders == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetMulticastSenders() E_NokiaConf_Configure_Router_Pim_Interface_MulticastSenders {
	if t == nil || t.MulticastSenders == 0 {
		return NokiaConf_Configure_Router_Pim_Interface_MulticastSenders_auto
	}
	return t.MulticastSenders
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetThreeWayHello retrieves the value of the leaf ThreeWayHello from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeWayHello is set, it can
// safely use t.GetThreeWayHello() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeWayHello == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetThreeWayHello() bool {
	if t == nil || t.ThreeWayHello == nil {
		return false
	}
	return *t.ThreeWayHello
}

// GetTrackingSupport retrieves the value of the leaf TrackingSupport from the NokiaConf_Configure_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackingSupport is set, it can
// safely use t.GetTrackingSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackingSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface) GetTrackingSupport() bool {
	if t == nil || t.TrackingSupport == nil {
		return false
	}
	return *t.TrackingSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AssertPeriod == nil {
		var v int32 = 60
		t.AssertPeriod = &v
	}
	if t.BsmCheckRtrAlert == nil {
		var v bool = false
		t.BsmCheckRtrAlert = &v
	}
	if t.HelloInterval == nil {
		var v int32 = 30
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint32 = 35
		t.HelloMultiplier = &v
	}
	if t.ImprovedAssert == nil {
		var v bool = true
		t.ImprovedAssert = &v
	}
	if t.InstantPruneEcho == nil {
		var v bool = false
		t.InstantPruneEcho = &v
	}
	if t.MaxGroups == nil {
		var v uint32 = 0
		t.MaxGroups = &v
	}
	if t.MulticastSenders == 0 {
		t.MulticastSenders = NokiaConf_Configure_Router_Pim_Interface_MulticastSenders_auto
	}
	if t.Priority == nil {
		var v uint32 = 1
		t.Priority = &v
	}
	if t.ThreeWayHello == nil {
		var v bool = false
		t.ThreeWayHello = &v
	}
	if t.TrackingSupport == nil {
		var v bool = false
		t.TrackingSupport = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.BierSignalingType.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Mcac.PopulateDefaults()
	t.P2MpLdpTreeJoin.PopulateDefaults()
	t.StickyDr.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface.
func (*NokiaConf_Configure_Router_Pim_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_BfdLiveness represents the /nokia-conf/configure/router/pim/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_BfdLiveness struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Pim_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Pim_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_BfdLiveness.
func (*NokiaConf_Configure_Router_Pim_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_BierSignalingType represents the /nokia-conf/configure/router/pim/interface/bier-signaling-type YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_BierSignalingType struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_BierSignalingType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Pim_Interface_BierSignalingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Pim_Interface_BierSignalingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_BierSignalingType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_BierSignalingType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_BierSignalingType.
func (*NokiaConf_Configure_Router_Pim_Interface_BierSignalingType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Ipv4 represents the /nokia-conf/configure/router/pim/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Ipv4 struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	MonitorOperGroup   *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	Multicast          *bool                                                           `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Router_Pim_Interface_Ipv4. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) GetMonitorOperGroup() *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMulticast retrieves the value of the leaf Multicast from the NokiaConf_Configure_Router_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multicast is set, it can
// safely use t.GetMulticast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) GetMulticast() bool {
	if t == nil || t.Multicast == nil {
		return true
	}
	return *t.Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multicast == nil {
		var v bool = true
		t.Multicast = &v
	}
	t.MonitorOperGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Ipv4.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup represents the /nokia-conf/configure/router/pim/interface/ipv4/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup struct {
	Name          *string                                                                    `path:"name" module:"nokia-conf"`
	Operation     E_NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup_Operation `path:"operation" module:"nokia-conf"`
	PriorityDelta *uint32                                                                    `path:"priority-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) GetOperation() E_NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup_Operation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// GetPriorityDelta retrieves the value of the leaf PriorityDelta from the NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDelta is set, it can
// safely use t.GetPriorityDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) GetPriorityDelta() uint32 {
	if t == nil || t.PriorityDelta == nil {
		return 0
	}
	return *t.PriorityDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv4_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Ipv6 represents the /nokia-conf/configure/router/pim/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Ipv6 struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	MonitorOperGroup   *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	Multicast          *bool                                                           `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv6) IsYANGGoStruct() {}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Router_Pim_Interface_Ipv6. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) GetMonitorOperGroup() *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMulticast retrieves the value of the leaf Multicast from the NokiaConf_Configure_Router_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multicast is set, it can
// safely use t.GetMulticast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) GetMulticast() bool {
	if t == nil || t.Multicast == nil {
		return true
	}
	return *t.Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multicast == nil {
		var v bool = true
		t.Multicast = &v
	}
	t.MonitorOperGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Ipv6.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup represents the /nokia-conf/configure/router/pim/interface/ipv6/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup struct {
	Name          *string                                                                    `path:"name" module:"nokia-conf"`
	Operation     E_NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup_Operation `path:"operation" module:"nokia-conf"`
	PriorityDelta *uint32                                                                    `path:"priority-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) GetOperation() E_NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup_Operation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// GetPriorityDelta retrieves the value of the leaf PriorityDelta from the NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDelta is set, it can
// safely use t.GetPriorityDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) GetPriorityDelta() uint32 {
	if t == nil || t.PriorityDelta == nil {
		return 0
	}
	return *t.PriorityDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup.
func (*NokiaConf_Configure_Router_Pim_Interface_Ipv6_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Mcac represents the /nokia-conf/configure/router/pim/interface/mcac YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                      `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                      `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Router_Pim_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Router_Pim_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Router_Pim_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Pim_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Mcac.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/router/pim/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints represents the /nokia-conf/configure/router/pim/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints struct {
	AdminState       E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	Level            map[uint32]*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level      `path:"level" module:"nokia-conf"`
	NumberDown       map[uint32]*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                              `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) NewLevel(LevelId uint32) (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId uint32) *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) GetLevel(LevelId uint32) *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) DeleteLevel(LevelId uint32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown uint32) (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: &NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK uint32) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown uint32) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) error {
	if v.NumberLagPortDown == nil {
		return fmt.Errorf("invalid nil key received for NumberLagPortDown")
	}

	key := *v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/router/pim/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	LevelId            *uint32  `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) GetLevelId() uint32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/router/pim/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	NumberLagPortDown  *uint32  `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() uint32 {
	if t == nil || t.NumberLagPortDown == nil {
		return 0
	}
	return *t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberLagPortDown == nil {
		return nil, fmt.Errorf("nil value for key NumberLagPortDown")
	}

	return map[string]interface{}{
		"number-lag-port-down": *t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Router_Pim_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin represents the /nokia-conf/configure/router/pim/interface/p2mp-ldp-tree-join YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin.
func (*NokiaConf_Configure_Router_Pim_Interface_P2MpLdpTreeJoin) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Interface_StickyDr represents the /nokia-conf/configure/router/pim/interface/sticky-dr YANG schema element.
type NokiaConf_Configure_Router_Pim_Interface_StickyDr struct {
	Priority *uint32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Interface_StickyDr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Interface_StickyDr) IsYANGGoStruct() {}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Pim_Interface_StickyDr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Interface_StickyDr) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1024
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Interface_StickyDr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Interface_StickyDr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == nil {
		var v uint32 = 1024
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_StickyDr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Interface_StickyDr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Interface_StickyDr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Interface_StickyDr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Interface_StickyDr.
func (*NokiaConf_Configure_Router_Pim_Interface_StickyDr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Ipv4 represents the /nokia-conf/configure/router/pim/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Pim_Ipv4 struct {
	AdminState              E_NokiaTypesSros_AdminState                    `path:"admin-state" module:"nokia-conf"`
	Gtm                     *NokiaConf_Configure_Router_Pim_Ipv4_Gtm       `path:"gtm" module:"nokia-conf"`
	MulticastFastFailover   *bool                                          `path:"multicast-fast-failover" module:"nokia-conf"`
	RpfTable                E_NokiaConf_Configure_Router_Pim_Ipv4_RpfTable `path:"rpf-table" module:"nokia-conf"`
	SsmAssertCompatibleMode *bool                                          `path:"ssm-assert-compatible-mode" module:"nokia-conf"`
	SsmDefaultRange         *bool                                          `path:"ssm-default-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Ipv4) IsYANGGoStruct() {}

// GetOrCreateGtm retrieves the value of the Gtm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetOrCreateGtm() *NokiaConf_Configure_Router_Pim_Ipv4_Gtm {
	if t.Gtm != nil {
		return t.Gtm
	}
	t.Gtm = &NokiaConf_Configure_Router_Pim_Ipv4_Gtm{}
	return t.Gtm
}

// GetGtm returns the value of the Gtm struct pointer
// from NokiaConf_Configure_Router_Pim_Ipv4. If the receiver or the field Gtm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetGtm() *NokiaConf_Configure_Router_Pim_Ipv4_Gtm {
	if t != nil && t.Gtm != nil {
		return t.Gtm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMulticastFastFailover retrieves the value of the leaf MulticastFastFailover from the NokiaConf_Configure_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastFastFailover is set, it can
// safely use t.GetMulticastFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastFastFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetMulticastFastFailover() bool {
	if t == nil || t.MulticastFastFailover == nil {
		return false
	}
	return *t.MulticastFastFailover
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetRpfTable() E_NokiaConf_Configure_Router_Pim_Ipv4_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Router_Pim_Ipv4_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSsmAssertCompatibleMode retrieves the value of the leaf SsmAssertCompatibleMode from the NokiaConf_Configure_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmAssertCompatibleMode is set, it can
// safely use t.GetSsmAssertCompatibleMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmAssertCompatibleMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetSsmAssertCompatibleMode() bool {
	if t == nil || t.SsmAssertCompatibleMode == nil {
		return false
	}
	return *t.SsmAssertCompatibleMode
}

// GetSsmDefaultRange retrieves the value of the leaf SsmDefaultRange from the NokiaConf_Configure_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmDefaultRange is set, it can
// safely use t.GetSsmDefaultRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmDefaultRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) GetSsmDefaultRange() bool {
	if t == nil || t.SsmDefaultRange == nil {
		return true
	}
	return *t.SsmDefaultRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MulticastFastFailover == nil {
		var v bool = false
		t.MulticastFastFailover = &v
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Router_Pim_Ipv4_RpfTable_rtable_u
	}
	if t.SsmAssertCompatibleMode == nil {
		var v bool = false
		t.SsmAssertCompatibleMode = &v
	}
	if t.SsmDefaultRange == nil {
		var v bool = true
		t.SsmDefaultRange = &v
	}
	t.Gtm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Ipv4.
func (*NokiaConf_Configure_Router_Pim_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Ipv4_Gtm represents the /nokia-conf/configure/router/pim/ipv4/gtm YANG schema element.
type NokiaConf_Configure_Router_Pim_Ipv4_Gtm struct {
	AutoDiscovery E_NokiaConf_Configure_Router_Pim_Ipv4_Gtm_AutoDiscovery `path:"auto-discovery" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Ipv4_Gtm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Ipv4_Gtm) IsYANGGoStruct() {}

// GetAutoDiscovery retrieves the value of the leaf AutoDiscovery from the NokiaConf_Configure_Router_Pim_Ipv4_Gtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoDiscovery is set, it can
// safely use t.GetAutoDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv4_Gtm) GetAutoDiscovery() E_NokiaConf_Configure_Router_Pim_Ipv4_Gtm_AutoDiscovery {
	if t == nil || t.AutoDiscovery == 0 {
		return 0
	}
	return t.AutoDiscovery
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Ipv4_Gtm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Ipv4_Gtm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Ipv4_Gtm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Ipv4_Gtm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Ipv4_Gtm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Ipv4_Gtm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Ipv4_Gtm.
func (*NokiaConf_Configure_Router_Pim_Ipv4_Gtm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Ipv6 represents the /nokia-conf/configure/router/pim/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Pim_Ipv6 struct {
	AdminState            E_NokiaTypesSros_AdminState                    `path:"admin-state" module:"nokia-conf"`
	MulticastFastFailover *bool                                          `path:"multicast-fast-failover" module:"nokia-conf"`
	RpfTable              E_NokiaConf_Configure_Router_Pim_Ipv6_RpfTable `path:"rpf-table" module:"nokia-conf"`
	SsmDefaultRange       *bool                                          `path:"ssm-default-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMulticastFastFailover retrieves the value of the leaf MulticastFastFailover from the NokiaConf_Configure_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastFastFailover is set, it can
// safely use t.GetMulticastFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastFastFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) GetMulticastFastFailover() bool {
	if t == nil || t.MulticastFastFailover == nil {
		return false
	}
	return *t.MulticastFastFailover
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) GetRpfTable() E_NokiaConf_Configure_Router_Pim_Ipv6_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Router_Pim_Ipv6_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSsmDefaultRange retrieves the value of the leaf SsmDefaultRange from the NokiaConf_Configure_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmDefaultRange is set, it can
// safely use t.GetSsmDefaultRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmDefaultRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) GetSsmDefaultRange() bool {
	if t == nil || t.SsmDefaultRange == nil {
		return true
	}
	return *t.SsmDefaultRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MulticastFastFailover == nil {
		var v bool = false
		t.MulticastFastFailover = &v
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Router_Pim_Ipv6_RpfTable_rtable_u
	}
	if t.SsmDefaultRange == nil {
		var v bool = true
		t.SsmDefaultRange = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Ipv6.
func (*NokiaConf_Configure_Router_Pim_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_McEcmpHashing represents the /nokia-conf/configure/router/pim/mc-ecmp-hashing YANG schema element.
type NokiaConf_Configure_Router_Pim_McEcmpHashing struct {
	Rebalance *bool `path:"rebalance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_McEcmpHashing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_McEcmpHashing) IsYANGGoStruct() {}

// GetRebalance retrieves the value of the leaf Rebalance from the NokiaConf_Configure_Router_Pim_McEcmpHashing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rebalance is set, it can
// safely use t.GetRebalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rebalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_McEcmpHashing) GetRebalance() bool {
	if t == nil || t.Rebalance == nil {
		return false
	}
	return *t.Rebalance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_McEcmpHashing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_McEcmpHashing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rebalance == nil {
		var v bool = false
		t.Rebalance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_McEcmpHashing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_McEcmpHashing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_McEcmpHashing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_McEcmpHashing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_McEcmpHashing.
func (*NokiaConf_Configure_Router_Pim_McEcmpHashing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp represents the /nokia-conf/configure/router/pim/rp YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp struct {
	Bootstrap *NokiaConf_Configure_Router_Pim_Rp_Bootstrap `path:"bootstrap" module:"nokia-conf"`
	Ipv4      *NokiaConf_Configure_Router_Pim_Rp_Ipv4      `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Router_Pim_Rp_Ipv6      `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp) IsYANGGoStruct() {}

// GetOrCreateBootstrap retrieves the value of the Bootstrap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp) GetOrCreateBootstrap() *NokiaConf_Configure_Router_Pim_Rp_Bootstrap {
	if t.Bootstrap != nil {
		return t.Bootstrap
	}
	t.Bootstrap = &NokiaConf_Configure_Router_Pim_Rp_Bootstrap{}
	return t.Bootstrap
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp) GetOrCreateIpv4() *NokiaConf_Configure_Router_Pim_Rp_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Pim_Rp_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp) GetOrCreateIpv6() *NokiaConf_Configure_Router_Pim_Rp_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Pim_Rp_Ipv6{}
	return t.Ipv6
}

// GetBootstrap returns the value of the Bootstrap struct pointer
// from NokiaConf_Configure_Router_Pim_Rp. If the receiver or the field Bootstrap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp) GetBootstrap() *NokiaConf_Configure_Router_Pim_Rp_Bootstrap {
	if t != nil && t.Bootstrap != nil {
		return t.Bootstrap
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Pim_Rp. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp) GetIpv4() *NokiaConf_Configure_Router_Pim_Rp_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Pim_Rp. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp) GetIpv6() *NokiaConf_Configure_Router_Pim_Rp_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bootstrap.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp.
func (*NokiaConf_Configure_Router_Pim_Rp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Bootstrap represents the /nokia-conf/configure/router/pim/rp/bootstrap YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Bootstrap struct {
	Export []string `path:"export" module:"nokia-conf"`
	Import []string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Bootstrap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Bootstrap) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Router_Pim_Rp_Bootstrap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Bootstrap) GetExport() []string {
	if t == nil || t.Export == nil {
		return nil
	}
	return t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Router_Pim_Rp_Bootstrap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Bootstrap) GetImport() []string {
	if t == nil || t.Import == nil {
		return nil
	}
	return t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Bootstrap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Bootstrap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Bootstrap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Bootstrap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Bootstrap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Bootstrap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Bootstrap.
func (*NokiaConf_Configure_Router_Pim_Rp_Bootstrap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4 represents the /nokia-conf/configure/router/pim/rp/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4 struct {
	Anycast         map[NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast `path:"anycast" module:"nokia-conf"`
	AutoRpDiscovery *bool                                                                                                  `path:"auto-rp-discovery" module:"nokia-conf"`
	BsrCandidate    *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate                                                   `path:"bsr-candidate" module:"nokia-conf"`
	Candidate       *bool                                                                                                  `path:"candidate" module:"nokia-conf"`
	MappingAgent    *bool                                                                                                  `path:"mapping-agent" module:"nokia-conf"`
	RpCandidate     *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate                                                    `path:"rp-candidate" module:"nokia-conf"`
	Static          *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static                                                         `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key represents the key for list Anycast of element /nokia-conf/configure/router/pim/rp/ipv4.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key struct {
	Ipv4Address string `path:"ipv4-address"`
	RpSetPeer   string `path:"rp-set-peer"`
}

// NewAnycast creates a new entry in the Anycast list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) NewAnycast(Ipv4Address string, RpSetPeer string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast)
	}

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Anycast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Anycast", key)
	}

	t.Anycast[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast{
		Ipv4Address: &Ipv4Address,
		RpSetPeer:   &RpSetPeer,
	}

	return t.Anycast[key], nil
}

// RenameAnycast renames an entry in the list Anycast within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) RenameAnycast(oldK, newK NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key) error {
	if _, ok := t.Anycast[newK]; ok {
		return fmt.Errorf("key %v already exists in Anycast", newK)
	}

	e, ok := t.Anycast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Anycast", oldK)
	}
	e.Ipv4Address = &newK.Ipv4Address
	e.RpSetPeer = &newK.RpSetPeer

	t.Anycast[newK] = e
	delete(t.Anycast, oldK)
	return nil
}

// GetOrCreateAnycast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetOrCreateAnycast(Ipv4Address string, RpSetPeer string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast {

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	if v, ok := t.Anycast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnycast(Ipv4Address, RpSetPeer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnycast got unexpected error: %v", err))
	}
	return v
}

// GetAnycast retrieves the value with the specified key from
// the Anycast map field of NokiaConf_Configure_Router_Pim_Rp_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetAnycast(Ipv4Address string, RpSetPeer string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	if lm, ok := t.Anycast[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnycast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) DeleteAnycast(Ipv4Address string, RpSetPeer string) {
	key := NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	delete(t.Anycast, key)
}

// AppendAnycast appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast struct to the
// list Anycast of NokiaConf_Configure_Router_Pim_Rp_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) AppendAnycast(v *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key for Ipv4Address")
	}

	if v.RpSetPeer == nil {
		return fmt.Errorf("invalid nil key for RpSetPeer")
	}

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: *v.Ipv4Address,
		RpSetPeer:   *v.RpSetPeer,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast)
	}

	if _, ok := t.Anycast[key]; ok {
		return fmt.Errorf("duplicate key for list Anycast %v", key)
	}

	t.Anycast[key] = v
	return nil
}

// GetOrCreateBsrCandidate retrieves the value of the BsrCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetOrCreateBsrCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate {
	if t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	t.BsrCandidate = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate{}
	return t.BsrCandidate
}

// GetOrCreateRpCandidate retrieves the value of the RpCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetOrCreateRpCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate {
	if t.RpCandidate != nil {
		return t.RpCandidate
	}
	t.RpCandidate = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate{}
	return t.RpCandidate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetOrCreateStatic() *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static{}
	return t.Static
}

// GetBsrCandidate returns the value of the BsrCandidate struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv4. If the receiver or the field BsrCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetBsrCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate {
	if t != nil && t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	return nil
}

// GetRpCandidate returns the value of the RpCandidate struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv4. If the receiver or the field RpCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetRpCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate {
	if t != nil && t.RpCandidate != nil {
		return t.RpCandidate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv4. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetStatic() *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAutoRpDiscovery retrieves the value of the leaf AutoRpDiscovery from the NokiaConf_Configure_Router_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoRpDiscovery is set, it can
// safely use t.GetAutoRpDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoRpDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetAutoRpDiscovery() bool {
	if t == nil || t.AutoRpDiscovery == nil {
		return false
	}
	return *t.AutoRpDiscovery
}

// GetCandidate retrieves the value of the leaf Candidate from the NokiaConf_Configure_Router_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Candidate is set, it can
// safely use t.GetCandidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Candidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetCandidate() bool {
	if t == nil || t.Candidate == nil {
		return false
	}
	return *t.Candidate
}

// GetMappingAgent retrieves the value of the leaf MappingAgent from the NokiaConf_Configure_Router_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MappingAgent is set, it can
// safely use t.GetMappingAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MappingAgent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) GetMappingAgent() bool {
	if t == nil || t.MappingAgent == nil {
		return false
	}
	return *t.MappingAgent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoRpDiscovery == nil {
		var v bool = false
		t.AutoRpDiscovery = &v
	}
	if t.Candidate == nil {
		var v bool = false
		t.Candidate = &v
	}
	if t.MappingAgent == nil {
		var v bool = false
		t.MappingAgent = &v
	}
	t.BsrCandidate.PopulateDefaults()
	t.RpCandidate.PopulateDefaults()
	t.Static.PopulateDefaults()
	for _, e := range t.Anycast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast represents the /nokia-conf/configure/router/pim/rp/ipv4/anycast YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast struct {
	Ipv4Address *string `path:"ipv4-address" module:"nokia-conf"`
	RpSetPeer   *string `path:"rp-set-peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) IsYANGGoStruct() {}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetRpSetPeer retrieves the value of the leaf RpSetPeer from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpSetPeer is set, it can
// safely use t.GetRpSetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpSetPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) GetRpSetPeer() string {
	if t == nil || t.RpSetPeer == nil {
		return ""
	}
	return *t.RpSetPeer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	if t.RpSetPeer == nil {
		return nil, fmt.Errorf("nil value for key RpSetPeer")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
		"rp-set-peer":  *t.RpSetPeer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Anycast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate represents the /nokia-conf/configure/router/pim/rp/ipv4/bsr-candidate YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate struct {
	Address     *string                     `path:"address" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HashMaskLen *int32                      `path:"hash-mask-len" module:"nokia-conf"`
	Priority    *int32                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHashMaskLen retrieves the value of the leaf HashMaskLen from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMaskLen is set, it can
// safely use t.GetHashMaskLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMaskLen == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) GetHashMaskLen() int32 {
	if t == nil || t.HashMaskLen == nil {
		return 30
	}
	return *t.HashMaskLen
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HashMaskLen == nil {
		var v int32 = 30
		t.HashMaskLen = &v
	}
	if t.Priority == nil {
		var v int32 = 0
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_BsrCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate represents the /nokia-conf/configure/router/pim/rp/ipv4/rp-candidate YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate struct {
	Address    *string                                                                   `path:"address" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange `path:"group-range" module:"nokia-conf"`
	Holdtime   *int32                                                                    `path:"holdtime" module:"nokia-conf"`
	Priority   *int32                                                                    `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) NewGroupRange(Ipv4Prefix string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv4Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) GetOrCreateGroupRange(Ipv4Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange {

	key := Ipv4Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) GetGroupRange(Ipv4Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) DeleteGroupRange(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) AppendGroupRange(v *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldtime retrieves the value of the leaf Holdtime from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Holdtime is set, it can
// safely use t.GetHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Holdtime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) GetHoldtime() int32 {
	if t == nil || t.Holdtime == nil {
		return 150
	}
	return *t.Holdtime
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 192
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Holdtime == nil {
		var v int32 = 150
		t.Holdtime = &v
	}
	if t.Priority == nil {
		var v int32 = 192
		t.Priority = &v
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange represents the /nokia-conf/configure/router/pim/rp/ipv4/rp-candidate/group-range YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange struct {
	Ipv4Prefix *string `path:"ipv4-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) IsYANGGoStruct() {}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static represents the /nokia-conf/configure/router/pim/rp/ipv4/static YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static struct {
	Address map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) GetAddress(Ipv4Address string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address struct to the
// list Address of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) AppendAddress(v *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address represents the /nokia-conf/configure/router/pim/rp/ipv4/static/address YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupPrefix        map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	Ipv4Address        *string                                                                       `path:"ipv4-address" module:"nokia-conf"`
	Override           *bool                                                                         `path:"override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) NewGroupPrefix(Ipv4Prefix string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.Ipv4Prefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) GetOrCreateGroupPrefix(Ipv4Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix {

	key := Ipv4Prefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) GetGroupPrefix(Ipv4Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) DeleteGroupPrefix(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) AppendGroupPrefix(v *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetOverride retrieves the value of the leaf Override from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Override is set, it can
// safely use t.GetOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Override == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) GetOverride() bool {
	if t == nil || t.Override == nil {
		return false
	}
	return *t.Override
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Override == nil {
		var v bool = false
		t.Override = &v
	}
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix represents the /nokia-conf/configure/router/pim/rp/ipv4/static/address/group-prefix YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct {
	Ipv4Prefix *string `path:"ipv4-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) IsYANGGoStruct() {}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6 represents the /nokia-conf/configure/router/pim/rp/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6 struct {
	Anycast      map[NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast `path:"anycast" module:"nokia-conf"`
	BsrCandidate *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate                                                   `path:"bsr-candidate" module:"nokia-conf"`
	EmbeddedRp   *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp                                                     `path:"embedded-rp" module:"nokia-conf" yangPresence:"true"`
	RpCandidate  *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate                                                    `path:"rp-candidate" module:"nokia-conf"`
	Static       *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static                                                         `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key represents the key for list Anycast of element /nokia-conf/configure/router/pim/rp/ipv6.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key struct {
	Ipv6Address string `path:"ipv6-address"`
	RpSetPeer   string `path:"rp-set-peer"`
}

// NewAnycast creates a new entry in the Anycast list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) NewAnycast(Ipv6Address string, RpSetPeer string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast)
	}

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Anycast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Anycast", key)
	}

	t.Anycast[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast{
		Ipv6Address: &Ipv6Address,
		RpSetPeer:   &RpSetPeer,
	}

	return t.Anycast[key], nil
}

// RenameAnycast renames an entry in the list Anycast within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) RenameAnycast(oldK, newK NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key) error {
	if _, ok := t.Anycast[newK]; ok {
		return fmt.Errorf("key %v already exists in Anycast", newK)
	}

	e, ok := t.Anycast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Anycast", oldK)
	}
	e.Ipv6Address = &newK.Ipv6Address
	e.RpSetPeer = &newK.RpSetPeer

	t.Anycast[newK] = e
	delete(t.Anycast, oldK)
	return nil
}

// GetOrCreateAnycast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetOrCreateAnycast(Ipv6Address string, RpSetPeer string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast {

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	if v, ok := t.Anycast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnycast(Ipv6Address, RpSetPeer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnycast got unexpected error: %v", err))
	}
	return v
}

// GetAnycast retrieves the value with the specified key from
// the Anycast map field of NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetAnycast(Ipv6Address string, RpSetPeer string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	if lm, ok := t.Anycast[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnycast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) DeleteAnycast(Ipv6Address string, RpSetPeer string) {
	key := NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	delete(t.Anycast, key)
}

// AppendAnycast appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast struct to the
// list Anycast of NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) AppendAnycast(v *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key for Ipv6Address")
	}

	if v.RpSetPeer == nil {
		return fmt.Errorf("invalid nil key for RpSetPeer")
	}

	key := NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: *v.Ipv6Address,
		RpSetPeer:   *v.RpSetPeer,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast)
	}

	if _, ok := t.Anycast[key]; ok {
		return fmt.Errorf("duplicate key for list Anycast %v", key)
	}

	t.Anycast[key] = v
	return nil
}

// GetOrCreateBsrCandidate retrieves the value of the BsrCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetOrCreateBsrCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate {
	if t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	t.BsrCandidate = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate{}
	return t.BsrCandidate
}

// GetOrCreateEmbeddedRp retrieves the value of the EmbeddedRp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetOrCreateEmbeddedRp() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp {
	if t.EmbeddedRp != nil {
		return t.EmbeddedRp
	}
	t.EmbeddedRp = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp{}
	return t.EmbeddedRp
}

// GetOrCreateRpCandidate retrieves the value of the RpCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetOrCreateRpCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate {
	if t.RpCandidate != nil {
		return t.RpCandidate
	}
	t.RpCandidate = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate{}
	return t.RpCandidate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetOrCreateStatic() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static{}
	return t.Static
}

// GetBsrCandidate returns the value of the BsrCandidate struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the receiver or the field BsrCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetBsrCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate {
	if t != nil && t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	return nil
}

// GetEmbeddedRp returns the value of the EmbeddedRp struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the receiver or the field EmbeddedRp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetEmbeddedRp() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp {
	if t != nil && t.EmbeddedRp != nil {
		return t.EmbeddedRp
	}
	return nil
}

// GetRpCandidate returns the value of the RpCandidate struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the receiver or the field RpCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetRpCandidate() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate {
	if t != nil && t.RpCandidate != nil {
		return t.RpCandidate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Router_Pim_Rp_Ipv6. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) GetStatic() *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BsrCandidate.PopulateDefaults()
	t.EmbeddedRp.PopulateDefaults()
	t.RpCandidate.PopulateDefaults()
	t.Static.PopulateDefaults()
	for _, e := range t.Anycast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast represents the /nokia-conf/configure/router/pim/rp/ipv6/anycast YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast struct {
	Ipv6Address *string `path:"ipv6-address" module:"nokia-conf"`
	RpSetPeer   *string `path:"rp-set-peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetRpSetPeer retrieves the value of the leaf RpSetPeer from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpSetPeer is set, it can
// safely use t.GetRpSetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpSetPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) GetRpSetPeer() string {
	if t == nil || t.RpSetPeer == nil {
		return ""
	}
	return *t.RpSetPeer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	if t.RpSetPeer == nil {
		return nil, fmt.Errorf("nil value for key RpSetPeer")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
		"rp-set-peer":  *t.RpSetPeer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Anycast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate represents the /nokia-conf/configure/router/pim/rp/ipv6/bsr-candidate YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate struct {
	Address     *string                     `path:"address" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HashMaskLen *int32                      `path:"hash-mask-len" module:"nokia-conf"`
	Priority    *int32                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHashMaskLen retrieves the value of the leaf HashMaskLen from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMaskLen is set, it can
// safely use t.GetHashMaskLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMaskLen == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) GetHashMaskLen() int32 {
	if t == nil || t.HashMaskLen == nil {
		return 126
	}
	return *t.HashMaskLen
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HashMaskLen == nil {
		var v int32 = 126
		t.HashMaskLen = &v
	}
	if t.Priority == nil {
		var v int32 = 0
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_BsrCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp represents the /nokia-conf/configure/router/pim/rp/ipv6/embedded-rp YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp struct {
	AdminState E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) NewGroupRange(Ipv6Prefix string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) GetOrCreateGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange {

	key := Ipv6Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) GetGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) DeleteGroupRange(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) AppendGroupRange(v *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange represents the /nokia-conf/configure/router/pim/rp/ipv6/embedded-rp/group-range YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate represents the /nokia-conf/configure/router/pim/rp/ipv6/rp-candidate YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate struct {
	Address    *string                                                                   `path:"address" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange `path:"group-range" module:"nokia-conf"`
	Holdtime   *int32                                                                    `path:"holdtime" module:"nokia-conf"`
	Priority   *int32                                                                    `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) NewGroupRange(Ipv6Prefix string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) GetOrCreateGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange {

	key := Ipv6Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) GetGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) DeleteGroupRange(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) AppendGroupRange(v *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldtime retrieves the value of the leaf Holdtime from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Holdtime is set, it can
// safely use t.GetHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Holdtime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) GetHoldtime() int32 {
	if t == nil || t.Holdtime == nil {
		return 150
	}
	return *t.Holdtime
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 192
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Holdtime == nil {
		var v int32 = 150
		t.Holdtime = &v
	}
	if t.Priority == nil {
		var v int32 = 192
		t.Priority = &v
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange represents the /nokia-conf/configure/router/pim/rp/ipv6/rp-candidate/group-range YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static represents the /nokia-conf/configure/router/pim/rp/ipv6/static YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static struct {
	Address map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) GetAddress(Ipv6Address string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address struct to the
// list Address of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) AppendAddress(v *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address represents the /nokia-conf/configure/router/pim/rp/ipv6/static/address YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupPrefix        map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	Ipv6Address        *string                                                                       `path:"ipv6-address" module:"nokia-conf"`
	Override           *bool                                                                         `path:"override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) NewGroupPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) GetOrCreateGroupPrefix(Ipv6Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix {

	key := Ipv6Prefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) GetGroupPrefix(Ipv6Prefix string) *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) DeleteGroupPrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) AppendGroupPrefix(v *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetOverride retrieves the value of the leaf Override from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Override is set, it can
// safely use t.GetOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Override == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) GetOverride() bool {
	if t == nil || t.Override == nil {
		return false
	}
	return *t.Override
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Override == nil {
		var v bool = false
		t.Override = &v
	}
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix represents the /nokia-conf/configure/router/pim/rp/ipv6/static/address/group-prefix YANG schema element.
type NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix.
func (*NokiaConf_Configure_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_Rpfv represents the /nokia-conf/configure/router/pim/rpfv YANG schema element.
type NokiaConf_Configure_Router_Pim_Rpfv struct {
	Core *bool `path:"core" module:"nokia-conf"`
	Mvpn *bool `path:"mvpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_Rpfv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_Rpfv) IsYANGGoStruct() {}

// GetCore retrieves the value of the leaf Core from the NokiaConf_Configure_Router_Pim_Rpfv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Core is set, it can
// safely use t.GetCore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Core == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rpfv) GetCore() bool {
	if t == nil || t.Core == nil {
		return false
	}
	return *t.Core
}

// GetMvpn retrieves the value of the leaf Mvpn from the NokiaConf_Configure_Router_Pim_Rpfv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mvpn is set, it can
// safely use t.GetMvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mvpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_Rpfv) GetMvpn() bool {
	if t == nil || t.Mvpn == nil {
		return false
	}
	return *t.Mvpn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_Rpfv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_Rpfv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Core == nil {
		var v bool = false
		t.Core = &v
	}
	if t.Mvpn == nil {
		var v bool = false
		t.Mvpn = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rpfv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_Rpfv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_Rpfv) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_Rpfv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_Rpfv.
func (*NokiaConf_Configure_Router_Pim_Rpfv) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_SptSwitchover represents the /nokia-conf/configure/router/pim/spt-switchover YANG schema element.
type NokiaConf_Configure_Router_Pim_SptSwitchover struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string                                                      `path:"ip-prefix" module:"nokia-conf"`
	Threshold          NokiaConf_Configure_Router_Pim_SptSwitchover_Threshold_Union `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_SptSwitchover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_SptSwitchover) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Router_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) GetThreshold() NokiaConf_Configure_Router_Pim_SptSwitchover_Threshold_Union {
	if t == nil || t.Threshold == nil {
		return nil
	}
	return t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_SptSwitchover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_SptSwitchover struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_SptSwitchover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_SptSwitchover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_SptSwitchover.
func (*NokiaConf_Configure_Router_Pim_SptSwitchover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_SsmGroups represents the /nokia-conf/configure/router/pim/ssm-groups YANG schema element.
type NokiaConf_Configure_Router_Pim_SsmGroups struct {
	GroupRange map[string]*NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_SsmGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_SsmGroups) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Pim_SsmGroups struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) NewGroupRange(IpPrefix string) (*NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange{
		IpPrefix: &IpPrefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Pim_SsmGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.IpPrefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_SsmGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) GetOrCreateGroupRange(IpPrefix string) *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange {

	key := IpPrefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Pim_SsmGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) GetGroupRange(IpPrefix string) *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Pim_SsmGroups. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) DeleteGroupRange(IpPrefix string) {
	key := IpPrefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Pim_SsmGroups. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) AppendGroupRange(v *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_SsmGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_SsmGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_SsmGroups.
func (*NokiaConf_Configure_Router_Pim_SsmGroups) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange represents the /nokia-conf/configure/router/pim/ssm-groups/group-range YANG schema element.
type NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange.
func (*NokiaConf_Configure_Router_Pim_SsmGroups_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius represents the /nokia-conf/configure/router/radius YANG schema element.
type NokiaConf_Configure_Router_Radius struct {
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Proxy              map[string]*NokiaConf_Configure_Router_Radius_Proxy  `path:"proxy" module:"nokia-conf"`
	Server             map[string]*NokiaConf_Configure_Router_Radius_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius) IsYANGGoStruct() {}

// NewProxy creates a new entry in the Proxy list of the
// NokiaConf_Configure_Router_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Radius) NewProxy(Name string) (*NokiaConf_Configure_Router_Radius_Proxy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Proxy == nil {
		t.Proxy = make(map[string]*NokiaConf_Configure_Router_Radius_Proxy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Proxy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Proxy", key)
	}

	t.Proxy[key] = &NokiaConf_Configure_Router_Radius_Proxy{
		Name: &Name,
	}

	return t.Proxy[key], nil
}

// RenameProxy renames an entry in the list Proxy within
// the NokiaConf_Configure_Router_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Radius) RenameProxy(oldK, newK string) error {
	if _, ok := t.Proxy[newK]; ok {
		return fmt.Errorf("key %v already exists in Proxy", newK)
	}

	e, ok := t.Proxy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Proxy", oldK)
	}
	e.Name = &newK

	t.Proxy[newK] = e
	delete(t.Proxy, oldK)
	return nil
}

// GetOrCreateProxy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Radius) GetOrCreateProxy(Name string) *NokiaConf_Configure_Router_Radius_Proxy {

	key := Name

	if v, ok := t.Proxy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProxy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProxy got unexpected error: %v", err))
	}
	return v
}

// GetProxy retrieves the value with the specified key from
// the Proxy map field of NokiaConf_Configure_Router_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Radius) GetProxy(Name string) *NokiaConf_Configure_Router_Radius_Proxy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Proxy[key]; ok {
		return lm
	}
	return nil
}

// DeleteProxy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Radius) DeleteProxy(Name string) {
	key := Name

	delete(t.Proxy, key)
}

// AppendProxy appends the supplied NokiaConf_Configure_Router_Radius_Proxy struct to the
// list Proxy of NokiaConf_Configure_Router_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Radius_Proxy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Radius) AppendProxy(v *NokiaConf_Configure_Router_Radius_Proxy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Proxy == nil {
		t.Proxy = make(map[string]*NokiaConf_Configure_Router_Radius_Proxy)
	}

	if _, ok := t.Proxy[key]; ok {
		return fmt.Errorf("duplicate key for list Proxy %v", key)
	}

	t.Proxy[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Router_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Radius) NewServer(Name string) (*NokiaConf_Configure_Router_Radius_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Router_Radius_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Router_Radius_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Router_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Radius) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Name = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Radius) GetOrCreateServer(Name string) *NokiaConf_Configure_Router_Radius_Server {

	key := Name

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Router_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Radius) GetServer(Name string) *NokiaConf_Configure_Router_Radius_Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Radius) DeleteServer(Name string) {
	key := Name

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Router_Radius_Server struct to the
// list Server of NokiaConf_Configure_Router_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Radius_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Radius) AppendServer(v *NokiaConf_Configure_Router_Radius_Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Router_Radius_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Proxy {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius.
func (*NokiaConf_Configure_Router_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy represents the /nokia-conf/configure/router/radius/proxy YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy struct {
	AdminState             E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AttributeMatching      *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching    `path:"attribute-matching" module:"nokia-conf"`
	Cache                  *NokiaConf_Configure_Router_Radius_Proxy_Cache                `path:"cache" module:"nokia-conf"`
	Defaults               *NokiaConf_Configure_Router_Radius_Proxy_Defaults             `path:"defaults" module:"nokia-conf"`
	Description            *string                                                       `path:"description" module:"nokia-conf"`
	Interface              map[string]*NokiaConf_Configure_Router_Radius_Proxy_Interface `path:"interface" module:"nokia-conf"`
	LoadBalanceKey         *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey       `path:"load-balance-key" module:"nokia-conf"`
	Name                   *string                                                       `path:"name" module:"nokia-conf"`
	Purpose                E_NokiaConf_Configure_Router_Radius_Proxy_Purpose             `path:"purpose" module:"nokia-conf"`
	PythonPolicy           *string                                                       `path:"python-policy" module:"nokia-conf"`
	Secret                 *string                                                       `path:"secret" module:"nokia-conf"`
	SendAccountingResponse *bool                                                         `path:"send-accounting-response" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Router_Radius_Proxy_WlanGw               `path:"wlan-gw" module:"nokia-conf"`
	WlanGwGroup            *uint32                                                       `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_Radius_Proxy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Radius_Proxy) NewInterface(InterfaceName string) (*NokiaConf_Configure_Router_Radius_Proxy_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Radius_Proxy_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Radius_Proxy_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_Radius_Proxy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius_Proxy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Router_Radius_Proxy_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_Radius_Proxy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetInterface(InterfaceName string) *NokiaConf_Configure_Router_Radius_Proxy_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius_Proxy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Radius_Proxy) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Radius_Proxy_Interface struct to the
// list Interface of NokiaConf_Configure_Router_Radius_Proxy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Radius_Proxy_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Radius_Proxy) AppendInterface(v *NokiaConf_Configure_Router_Radius_Proxy_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Radius_Proxy_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAttributeMatching retrieves the value of the AttributeMatching field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetOrCreateAttributeMatching() *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching {
	if t.AttributeMatching != nil {
		return t.AttributeMatching
	}
	t.AttributeMatching = &NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching{}
	return t.AttributeMatching
}

// GetOrCreateCache retrieves the value of the Cache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetOrCreateCache() *NokiaConf_Configure_Router_Radius_Proxy_Cache {
	if t.Cache != nil {
		return t.Cache
	}
	t.Cache = &NokiaConf_Configure_Router_Radius_Proxy_Cache{}
	return t.Cache
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetOrCreateDefaults() *NokiaConf_Configure_Router_Radius_Proxy_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Router_Radius_Proxy_Defaults{}
	return t.Defaults
}

// GetOrCreateLoadBalanceKey retrieves the value of the LoadBalanceKey field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetOrCreateLoadBalanceKey() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey {
	if t.LoadBalanceKey != nil {
		return t.LoadBalanceKey
	}
	t.LoadBalanceKey = &NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey{}
	return t.LoadBalanceKey
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetOrCreateWlanGw() *NokiaConf_Configure_Router_Radius_Proxy_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Router_Radius_Proxy_WlanGw{}
	return t.WlanGw
}

// GetAttributeMatching returns the value of the AttributeMatching struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy. If the receiver or the field AttributeMatching is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetAttributeMatching() *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching {
	if t != nil && t.AttributeMatching != nil {
		return t.AttributeMatching
	}
	return nil
}

// GetCache returns the value of the Cache struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy. If the receiver or the field Cache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetCache() *NokiaConf_Configure_Router_Radius_Proxy_Cache {
	if t != nil && t.Cache != nil {
		return t.Cache
	}
	return nil
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetDefaults() *NokiaConf_Configure_Router_Radius_Proxy_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetLoadBalanceKey returns the value of the LoadBalanceKey struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy. If the receiver or the field LoadBalanceKey is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetLoadBalanceKey() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey {
	if t != nil && t.LoadBalanceKey != nil {
		return t.LoadBalanceKey
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetWlanGw() *NokiaConf_Configure_Router_Radius_Proxy_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPurpose retrieves the value of the leaf Purpose from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Purpose is set, it can
// safely use t.GetPurpose() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Purpose == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetPurpose() E_NokiaConf_Configure_Router_Radius_Proxy_Purpose {
	if t == nil || t.Purpose == 0 {
		return 0
	}
	return t.Purpose
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetSendAccountingResponse retrieves the value of the leaf SendAccountingResponse from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendAccountingResponse is set, it can
// safely use t.GetSendAccountingResponse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendAccountingResponse == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetSendAccountingResponse() bool {
	if t == nil || t.SendAccountingResponse == nil {
		return false
	}
	return *t.SendAccountingResponse
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendAccountingResponse == nil {
		var v bool = false
		t.SendAccountingResponse = &v
	}
	t.AttributeMatching.PopulateDefaults()
	t.Cache.PopulateDefaults()
	t.Defaults.PopulateDefaults()
	t.LoadBalanceKey.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Radius_Proxy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Radius_Proxy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy.
func (*NokiaConf_Configure_Router_Radius_Proxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching represents the /nokia-conf/configure/router/radius/proxy/attribute-matching YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching struct {
	Entry  map[uint32]*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry `path:"entry" module:"nokia-conf"`
	Type   *uint32                                                                     `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Vendor_Union      `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) NewEntry(Index uint32) (*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry{
		Index: &Index,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Index = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) GetOrCreateEntry(Index uint32) *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry {

	key := Index

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) GetEntry(Index uint32) *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) DeleteEntry(Index uint32) {
	key := Index

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry struct to the
// list Entry of NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) AppendEntry(v *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching.
func (*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry represents the /nokia-conf/configure/router/radius/proxy/attribute-matching/entry YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry struct {
	AccountingServerPolicy     *string  `path:"accounting-server-policy" module:"nokia-conf"`
	ApplyGroups                []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationServerPolicy *string  `path:"authentication-server-policy" module:"nokia-conf"`
	Index                      *uint32  `path:"index" module:"nokia-conf"`
	PrefixString               *string  `path:"prefix-string" module:"nokia-conf"`
	SuffixString               *string  `path:"suffix-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) IsYANGGoStruct() {}

// GetAccountingServerPolicy retrieves the value of the leaf AccountingServerPolicy from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingServerPolicy is set, it can
// safely use t.GetAccountingServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetAccountingServerPolicy() string {
	if t == nil || t.AccountingServerPolicy == nil {
		return ""
	}
	return *t.AccountingServerPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationServerPolicy retrieves the value of the leaf AuthenticationServerPolicy from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationServerPolicy is set, it can
// safely use t.GetAuthenticationServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetAuthenticationServerPolicy() string {
	if t == nil || t.AuthenticationServerPolicy == nil {
		return ""
	}
	return *t.AuthenticationServerPolicy
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffixString retrieves the value of the leaf SuffixString from the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuffixString is set, it can
// safely use t.GetSuffixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuffixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) GetSuffixString() string {
	if t == nil || t.SuffixString == nil {
		return ""
	}
	return *t.SuffixString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry.
func (*NokiaConf_Configure_Router_Radius_Proxy_AttributeMatching_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_Cache represents the /nokia-conf/configure/router/radius/proxy/cache YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_Cache struct {
	AdminState          E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	Key                 *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key                 `path:"key" module:"nokia-conf" yangPresence:"true"`
	Timeout             *uint32                                                            `path:"timeout" module:"nokia-conf"`
	TrackAccounting     *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting     `path:"track-accounting" module:"nokia-conf"`
	TrackAuthentication *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication `path:"track-authentication" module:"nokia-conf"`
	TrackDeleteHoldTime *uint32                                                            `path:"track-delete-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_Cache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache) IsYANGGoStruct() {}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetOrCreateKey() *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Router_Radius_Proxy_Cache_Key{}
	return t.Key
}

// GetOrCreateTrackAccounting retrieves the value of the TrackAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetOrCreateTrackAccounting() *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting {
	if t.TrackAccounting != nil {
		return t.TrackAccounting
	}
	t.TrackAccounting = &NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting{}
	return t.TrackAccounting
}

// GetOrCreateTrackAuthentication retrieves the value of the TrackAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetOrCreateTrackAuthentication() *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication {
	if t.TrackAuthentication != nil {
		return t.TrackAuthentication
	}
	t.TrackAuthentication = &NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication{}
	return t.TrackAuthentication
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_Cache. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetKey() *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetTrackAccounting returns the value of the TrackAccounting struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_Cache. If the receiver or the field TrackAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetTrackAccounting() *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting {
	if t != nil && t.TrackAccounting != nil {
		return t.TrackAccounting
	}
	return nil
}

// GetTrackAuthentication returns the value of the TrackAuthentication struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_Cache. If the receiver or the field TrackAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetTrackAuthentication() *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication {
	if t != nil && t.TrackAuthentication != nil {
		return t.TrackAuthentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 300
	}
	return *t.Timeout
}

// GetTrackDeleteHoldTime retrieves the value of the leaf TrackDeleteHoldTime from the NokiaConf_Configure_Router_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackDeleteHoldTime is set, it can
// safely use t.GetTrackDeleteHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackDeleteHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) GetTrackDeleteHoldTime() uint32 {
	if t == nil || t.TrackDeleteHoldTime == nil {
		return 0
	}
	return *t.TrackDeleteHoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_Cache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Timeout == nil {
		var v uint32 = 300
		t.Timeout = &v
	}
	if t.TrackDeleteHoldTime == nil {
		var v uint32 = 0
		t.TrackDeleteHoldTime = &v
	}
	t.Key.PopulateDefaults()
	t.TrackAccounting.PopulateDefaults()
	t.TrackAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_Cache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_Cache.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_Cache_Key represents the /nokia-conf/configure/router/radius/proxy/cache/key YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_Cache_Key struct {
	AttributeType *uint32                                                        `path:"attribute-type" module:"nokia-conf"`
	PacketType    E_NokiaConf_Configure_Router_Radius_Proxy_Cache_Key_PacketType `path:"packet-type" module:"nokia-conf"`
	Vendor        NokiaConf_Configure_Router_Radius_Proxy_Cache_Key_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_Cache_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) IsYANGGoStruct() {}

// GetAttributeType retrieves the value of the leaf AttributeType from the NokiaConf_Configure_Router_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttributeType is set, it can
// safely use t.GetAttributeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttributeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) GetAttributeType() uint32 {
	if t == nil || t.AttributeType == nil {
		return 0
	}
	return *t.AttributeType
}

// GetPacketType retrieves the value of the leaf PacketType from the NokiaConf_Configure_Router_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketType is set, it can
// safely use t.GetPacketType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) GetPacketType() E_NokiaConf_Configure_Router_Radius_Proxy_Cache_Key_PacketType {
	if t == nil || t.PacketType == 0 {
		return 0
	}
	return t.PacketType
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_Cache_Key_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_Cache_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_Cache_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_Cache_Key.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting represents the /nokia-conf/configure/router/radius/proxy/cache/track-accounting YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting struct {
	AccountingOff *bool `path:"accounting-off" module:"nokia-conf"`
	AccountingOn  *bool `path:"accounting-on" module:"nokia-conf"`
	InterimUpdate *bool `path:"interim-update" module:"nokia-conf"`
	Start         *bool `path:"start" module:"nokia-conf"`
	Stop          *bool `path:"stop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) IsYANGGoStruct() {}

// GetAccountingOff retrieves the value of the leaf AccountingOff from the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingOff is set, it can
// safely use t.GetAccountingOff() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingOff == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) GetAccountingOff() bool {
	if t == nil || t.AccountingOff == nil {
		return false
	}
	return *t.AccountingOff
}

// GetAccountingOn retrieves the value of the leaf AccountingOn from the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingOn is set, it can
// safely use t.GetAccountingOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingOn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) GetAccountingOn() bool {
	if t == nil || t.AccountingOn == nil {
		return false
	}
	return *t.AccountingOn
}

// GetInterimUpdate retrieves the value of the leaf InterimUpdate from the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdate is set, it can
// safely use t.GetInterimUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) GetInterimUpdate() bool {
	if t == nil || t.InterimUpdate == nil {
		return false
	}
	return *t.InterimUpdate
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) GetStart() bool {
	if t == nil || t.Start == nil {
		return false
	}
	return *t.Start
}

// GetStop retrieves the value of the leaf Stop from the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stop is set, it can
// safely use t.GetStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) GetStop() bool {
	if t == nil || t.Stop == nil {
		return false
	}
	return *t.Stop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingOff == nil {
		var v bool = false
		t.AccountingOff = &v
	}
	if t.AccountingOn == nil {
		var v bool = false
		t.AccountingOn = &v
	}
	if t.InterimUpdate == nil {
		var v bool = false
		t.InterimUpdate = &v
	}
	if t.Start == nil {
		var v bool = false
		t.Start = &v
	}
	if t.Stop == nil {
		var v bool = false
		t.Stop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication represents the /nokia-conf/configure/router/radius/proxy/cache/track-authentication YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication struct {
	Accept *bool `path:"accept" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) IsYANGGoStruct() {}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) GetAccept() bool {
	if t == nil || t.Accept == nil {
		return true
	}
	return *t.Accept
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Accept == nil {
		var v bool = true
		t.Accept = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication.
func (*NokiaConf_Configure_Router_Radius_Proxy_Cache_TrackAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_Defaults represents the /nokia-conf/configure/router/radius/proxy/defaults YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_Defaults struct {
	AccountingServerPolicy     *string `path:"accounting-server-policy" module:"nokia-conf"`
	AuthenticationServerPolicy *string `path:"authentication-server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_Defaults) IsYANGGoStruct() {}

// GetAccountingServerPolicy retrieves the value of the leaf AccountingServerPolicy from the NokiaConf_Configure_Router_Radius_Proxy_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingServerPolicy is set, it can
// safely use t.GetAccountingServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Defaults) GetAccountingServerPolicy() string {
	if t == nil || t.AccountingServerPolicy == nil {
		return ""
	}
	return *t.AccountingServerPolicy
}

// GetAuthenticationServerPolicy retrieves the value of the leaf AuthenticationServerPolicy from the NokiaConf_Configure_Router_Radius_Proxy_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationServerPolicy is set, it can
// safely use t.GetAuthenticationServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Defaults) GetAuthenticationServerPolicy() string {
	if t == nil || t.AuthenticationServerPolicy == nil {
		return ""
	}
	return *t.AuthenticationServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_Defaults.
func (*NokiaConf_Configure_Router_Radius_Proxy_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_Interface represents the /nokia-conf/configure/router/radius/proxy/interface YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_Interface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_Interface) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Radius_Proxy_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Radius_Proxy_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_Interface.
func (*NokiaConf_Configure_Router_Radius_Proxy_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey represents the /nokia-conf/configure/router/radius/proxy/load-balance-key YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey struct {
	Attribute_1 *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 `path:"attribute-1" module:"nokia-conf"`
	Attribute_2 *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 `path:"attribute-2" module:"nokia-conf"`
	Attribute_3 *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 `path:"attribute-3" module:"nokia-conf"`
	Attribute_4 *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 `path:"attribute-4" module:"nokia-conf"`
	Attribute_5 *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 `path:"attribute-5" module:"nokia-conf"`
	SourceIpUdp YANGEmpty                                                           `path:"source-ip-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) IsYANGGoStruct() {}

// GetOrCreateAttribute_1 retrieves the value of the Attribute_1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_1() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 {
	if t.Attribute_1 != nil {
		return t.Attribute_1
	}
	t.Attribute_1 = &NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1{}
	return t.Attribute_1
}

// GetOrCreateAttribute_2 retrieves the value of the Attribute_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_2() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 {
	if t.Attribute_2 != nil {
		return t.Attribute_2
	}
	t.Attribute_2 = &NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2{}
	return t.Attribute_2
}

// GetOrCreateAttribute_3 retrieves the value of the Attribute_3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_3() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 {
	if t.Attribute_3 != nil {
		return t.Attribute_3
	}
	t.Attribute_3 = &NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3{}
	return t.Attribute_3
}

// GetOrCreateAttribute_4 retrieves the value of the Attribute_4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_4() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 {
	if t.Attribute_4 != nil {
		return t.Attribute_4
	}
	t.Attribute_4 = &NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4{}
	return t.Attribute_4
}

// GetOrCreateAttribute_5 retrieves the value of the Attribute_5 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_5() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 {
	if t.Attribute_5 != nil {
		return t.Attribute_5
	}
	t.Attribute_5 = &NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5{}
	return t.Attribute_5
}

// GetAttribute_1 returns the value of the Attribute_1 struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_1() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 {
	if t != nil && t.Attribute_1 != nil {
		return t.Attribute_1
	}
	return nil
}

// GetAttribute_2 returns the value of the Attribute_2 struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_2() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 {
	if t != nil && t.Attribute_2 != nil {
		return t.Attribute_2
	}
	return nil
}

// GetAttribute_3 returns the value of the Attribute_3 struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_3() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 {
	if t != nil && t.Attribute_3 != nil {
		return t.Attribute_3
	}
	return nil
}

// GetAttribute_4 returns the value of the Attribute_4 struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_4() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 {
	if t != nil && t.Attribute_4 != nil {
		return t.Attribute_4
	}
	return nil
}

// GetAttribute_5 returns the value of the Attribute_5 struct pointer
// from NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_5 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_5() *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 {
	if t != nil && t.Attribute_5 != nil {
		return t.Attribute_5
	}
	return nil
}

// GetSourceIpUdp retrieves the value of the leaf SourceIpUdp from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIpUdp is set, it can
// safely use t.GetSourceIpUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIpUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) GetSourceIpUdp() YANGEmpty {
	if t == nil || t.SourceIpUdp == false {
		return false
	}
	return t.SourceIpUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attribute_1.PopulateDefaults()
	t.Attribute_2.PopulateDefaults()
	t.Attribute_3.PopulateDefaults()
	t.Attribute_4.PopulateDefaults()
	t.Attribute_5.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 represents the /nokia-conf/configure/router/radius/proxy/load-balance-key/attribute-1 YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 struct {
	Type   *uint32                                                                         `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 represents the /nokia-conf/configure/router/radius/proxy/load-balance-key/attribute-2 YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 struct {
	Type   *uint32                                                                         `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 represents the /nokia-conf/configure/router/radius/proxy/load-balance-key/attribute-3 YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 struct {
	Type   *uint32                                                                         `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 represents the /nokia-conf/configure/router/radius/proxy/load-balance-key/attribute-4 YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 struct {
	Type   *uint32                                                                         `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 represents the /nokia-conf/configure/router/radius/proxy/load-balance-key/attribute-5 YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 struct {
	Type   *uint32                                                                         `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) GetVendor() NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5.
func (*NokiaConf_Configure_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Proxy_WlanGw represents the /nokia-conf/configure/router/radius/proxy/wlan-gw YANG schema element.
type NokiaConf_Configure_Router_Radius_Proxy_WlanGw struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string  `path:"ipv6-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Proxy_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Proxy_WlanGw) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Router_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Proxy_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Proxy_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Proxy_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Proxy_WlanGw.
func (*NokiaConf_Configure_Router_Radius_Proxy_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Radius_Server represents the /nokia-conf/configure/router/radius/server YANG schema element.
type NokiaConf_Configure_Router_Radius_Server struct {
	AcceptCoa            *bool    `path:"accept-coa" module:"nokia-conf"`
	AcctPort             *int32   `path:"acct-port" module:"nokia-conf"`
	Address              *string  `path:"address" module:"nokia-conf"`
	ApplyGroups          []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthPort             *int32   `path:"auth-port" module:"nokia-conf"`
	Description          *string  `path:"description" module:"nokia-conf"`
	Name                 *string  `path:"name" module:"nokia-conf"`
	PendingRequestsLimit *uint32  `path:"pending-requests-limit" module:"nokia-conf"`
	PythonPolicy         *string  `path:"python-policy" module:"nokia-conf"`
	Secret               *string  `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Radius_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Radius_Server) IsYANGGoStruct() {}

// GetAcceptCoa retrieves the value of the leaf AcceptCoa from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptCoa is set, it can
// safely use t.GetAcceptCoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptCoa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetAcceptCoa() bool {
	if t == nil || t.AcceptCoa == nil {
		return false
	}
	return *t.AcceptCoa
}

// GetAcctPort retrieves the value of the leaf AcctPort from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetAcctPort() int32 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthPort retrieves the value of the leaf AuthPort from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetAuthPort() int32 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPendingRequestsLimit retrieves the value of the leaf PendingRequestsLimit from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PendingRequestsLimit is set, it can
// safely use t.GetPendingRequestsLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PendingRequestsLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetPendingRequestsLimit() uint32 {
	if t == nil || t.PendingRequestsLimit == nil {
		return 4096
	}
	return *t.PendingRequestsLimit
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Radius_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Radius_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Radius_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptCoa == nil {
		var v bool = false
		t.AcceptCoa = &v
	}
	if t.AcctPort == nil {
		var v int32 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v int32 = 1812
		t.AuthPort = &v
	}
	if t.PendingRequestsLimit == nil {
		var v uint32 = 4096
		t.PendingRequestsLimit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Radius_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Radius_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Radius_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Radius_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Radius_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Radius_Server.
func (*NokiaConf_Configure_Router_Radius_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Reassembly represents the /nokia-conf/configure/router/reassembly YANG schema element.
type NokiaConf_Configure_Router_Reassembly struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	NatGroup           *uint32  `path:"nat-group" module:"nokia-conf"`
	ToBaseNetwork      *bool    `path:"to-base-network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Reassembly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Reassembly) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Reassembly) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Reassembly) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Router_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Reassembly) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetToBaseNetwork retrieves the value of the leaf ToBaseNetwork from the NokiaConf_Configure_Router_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToBaseNetwork is set, it can
// safely use t.GetToBaseNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToBaseNetwork == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Reassembly) GetToBaseNetwork() bool {
	if t == nil || t.ToBaseNetwork == nil {
		return false
	}
	return *t.ToBaseNetwork
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Reassembly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Reassembly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ToBaseNetwork == nil {
		var v bool = false
		t.ToBaseNetwork = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Reassembly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Reassembly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Reassembly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Reassembly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Reassembly.
func (*NokiaConf_Configure_Router_Reassembly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_RibApi represents the /nokia-conf/configure/router/rib-api YANG schema element.
type NokiaConf_Configure_Router_RibApi struct {
	ApplyGroups        []string                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Mpls               *NokiaConf_Configure_Router_RibApi_Mpls `path:"mpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_RibApi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_RibApi) IsYANGGoStruct() {}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_RibApi) GetOrCreateMpls() *NokiaConf_Configure_Router_RibApi_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Router_RibApi_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Router_RibApi. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_RibApi) GetMpls() *NokiaConf_Configure_Router_RibApi_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_RibApi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_RibApi) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_RibApi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_RibApi) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_RibApi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_RibApi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_RibApi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_RibApi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_RibApi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_RibApi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_RibApi.
func (*NokiaConf_Configure_Router_RibApi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_RibApi_Mpls represents the /nokia-conf/configure/router/rib-api/mpls YANG schema element.
type NokiaConf_Configure_Router_RibApi_Mpls struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	LabelName          *string                     `path:"label-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_RibApi_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_RibApi_Mpls) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_RibApi_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_RibApi_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_RibApi_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLabelName retrieves the value of the leaf LabelName from the NokiaConf_Configure_Router_RibApi_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelName is set, it can
// safely use t.GetLabelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) GetLabelName() string {
	if t == nil || t.LabelName == nil {
		return ""
	}
	return *t.LabelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_RibApi_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_RibApi_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_RibApi_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_RibApi_Mpls.
func (*NokiaConf_Configure_Router_RibApi_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip represents the /nokia-conf/configure/router/rip YANG schema element.
type NokiaConf_Configure_Router_Rip struct {
	AdminState         E_NokiaTypesSros_AdminState                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                          `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                         `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                            `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                            `path:"check-zero" module:"nokia-conf"`
	Description        *string                                          `path:"description" module:"nokia-conf"`
	ExportLimit        *NokiaConf_Configure_Router_Rip_ExportLimit      `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy       []string                                         `path:"export-policy" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Router_Rip_Group `path:"group" module:"nokia-conf"`
	ImportPolicy       []string                                         `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                          `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                          `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                          `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                          `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                          `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Router_Rip_Send            `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                            `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Router_Rip_Timers           `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Router_Rip struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Rip) NewGroup(GroupName string) (*NokiaConf_Configure_Router_Rip_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Rip_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Router_Rip_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Router_Rip struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Rip) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rip. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Rip) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Router_Rip_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Router_Rip. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Rip) GetGroup(GroupName string) *NokiaConf_Configure_Router_Rip_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rip. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Rip) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Router_Rip_Group struct to the
// list Group of NokiaConf_Configure_Router_Rip. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Rip_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Rip) AppendGroup(v *NokiaConf_Configure_Router_Rip_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Rip_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rip) GetOrCreateExportLimit() *NokiaConf_Configure_Router_Rip_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Router_Rip_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rip) GetOrCreateTimers() *NokiaConf_Configure_Router_Rip_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Router_Rip_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Router_Rip. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rip) GetExportLimit() *NokiaConf_Configure_Router_Rip_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Router_Rip. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rip) GetTimers() *NokiaConf_Configure_Router_Rip_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return NokiaTypesRip_AuthType_none
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 25
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 1
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 1
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaTypesRip_Receive_both
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetSend() E_NokiaConf_Configure_Router_Rip_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Router_Rip_Send_broadcast
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return true
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AuthenticationType == 0 {
		t.AuthenticationType = NokiaTypesRip_AuthType_none
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.CheckZero == nil {
		var v bool = false
		t.CheckZero = &v
	}
	if t.MessageSize == nil {
		var v uint32 = 25
		t.MessageSize = &v
	}
	if t.MetricIn == nil {
		var v uint32 = 1
		t.MetricIn = &v
	}
	if t.MetricOut == nil {
		var v uint32 = 1
		t.MetricOut = &v
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	if t.Receive == 0 {
		t.Receive = NokiaTypesRip_Receive_both
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Router_Rip_Send_broadcast
	}
	if t.SplitHorizon == nil {
		var v bool = true
		t.SplitHorizon = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip.
func (*NokiaConf_Configure_Router_Rip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_ExportLimit represents the /nokia-conf/configure/router/rip/export-limit YANG schema element.
type NokiaConf_Configure_Router_Rip_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Router_Rip_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_Rip_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_ExportLimit.
func (*NokiaConf_Configure_Router_Rip_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_Group represents the /nokia-conf/configure/router/rip/group YANG schema element.
type NokiaConf_Configure_Router_Rip_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                   `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                  `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                     `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                     `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                   `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                  `path:"export-policy" module:"nokia-conf"`
	GroupName          *string                                                   `path:"group-name" module:"nokia-conf"`
	ImportPolicy       []string                                                  `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                   `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                   `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                   `path:"metric-out" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Router_Rip_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Preference         *uint32                                                   `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                   `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Router_Rip_Group_Send               `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                     `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Router_Rip_Group_Timers              `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Router_Rip_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Rip_Group) NewNeighbor(InterfaceName string) (*NokiaConf_Configure_Router_Rip_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Rip_Group_Neighbor)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Router_Rip_Group_Neighbor{
		InterfaceName: &InterfaceName,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Router_Rip_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Rip_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.InterfaceName = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rip_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Rip_Group) GetOrCreateNeighbor(InterfaceName string) *NokiaConf_Configure_Router_Rip_Group_Neighbor {

	key := InterfaceName

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Router_Rip_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Rip_Group) GetNeighbor(InterfaceName string) *NokiaConf_Configure_Router_Rip_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rip_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Rip_Group) DeleteNeighbor(InterfaceName string) {
	key := InterfaceName

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Router_Rip_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Router_Rip_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Rip_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Rip_Group) AppendNeighbor(v *NokiaConf_Configure_Router_Rip_Group_Neighbor) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Rip_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rip_Group) GetOrCreateTimers() *NokiaConf_Configure_Router_Rip_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Router_Rip_Group_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Router_Rip_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rip_Group) GetTimers() *NokiaConf_Configure_Router_Rip_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetSend() E_NokiaConf_Configure_Router_Rip_Group_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Rip_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Rip_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_Group.
func (*NokiaConf_Configure_Router_Rip_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_Group_Neighbor represents the /nokia-conf/configure/router/rip/group/neighbor YANG schema element.
type NokiaConf_Configure_Router_Rip_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                                  `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                                 `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                                    `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                                  `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                                 `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                                 `path:"import-policy" module:"nokia-conf"`
	InterfaceName      *string                                                                  `path:"interface-name" module:"nokia-conf"`
	MessageSize        *uint32                                                                  `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                                  `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                                  `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                                  `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                                  `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Router_Rip_Group_Neighbor_Send                     `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                                    `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers                    `path:"timers" module:"nokia-conf" yangPresence:"true"`
	UnicastAddress     map[string]*NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress `path:"unicast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_Group_Neighbor) IsYANGGoStruct() {}

// NewUnicastAddress creates a new entry in the UnicastAddress list of the
// NokiaConf_Configure_Router_Rip_Group_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) NewUnicastAddress(Address string) (*NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastAddress", key)
	}

	t.UnicastAddress[key] = &NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress{
		Address: &Address,
	}

	return t.UnicastAddress[key], nil
}

// RenameUnicastAddress renames an entry in the list UnicastAddress within
// the NokiaConf_Configure_Router_Rip_Group_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) RenameUnicastAddress(oldK, newK string) error {
	if _, ok := t.UnicastAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastAddress", newK)
	}

	e, ok := t.UnicastAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastAddress", oldK)
	}
	e.Address = &newK

	t.UnicastAddress[newK] = e
	delete(t.UnicastAddress, oldK)
	return nil
}

// GetOrCreateUnicastAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rip_Group_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetOrCreateUnicastAddress(Address string) *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress {

	key := Address

	if v, ok := t.UnicastAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastAddress got unexpected error: %v", err))
	}
	return v
}

// GetUnicastAddress retrieves the value with the specified key from
// the UnicastAddress map field of NokiaConf_Configure_Router_Rip_Group_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetUnicastAddress(Address string) *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.UnicastAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rip_Group_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) DeleteUnicastAddress(Address string) {
	key := Address

	delete(t.UnicastAddress, key)
}

// AppendUnicastAddress appends the supplied NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress struct to the
// list UnicastAddress of NokiaConf_Configure_Router_Rip_Group_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) AppendUnicastAddress(v *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress)
	}

	if _, ok := t.UnicastAddress[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastAddress %v", key)
	}

	t.UnicastAddress[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetOrCreateTimers() *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Router_Rip_Group_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetTimers() *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetSend() E_NokiaConf_Configure_Router_Rip_Group_Neighbor_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.UnicastAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Rip_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_Group_Neighbor.
func (*NokiaConf_Configure_Router_Rip_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers represents the /nokia-conf/configure/router/rip/group/neighbor/timers YANG schema element.
type NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers.
func (*NokiaConf_Configure_Router_Rip_Group_Neighbor_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress represents the /nokia-conf/configure/router/rip/group/neighbor/unicast-address YANG schema element.
type NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress.
func (*NokiaConf_Configure_Router_Rip_Group_Neighbor_UnicastAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_Group_Timers represents the /nokia-conf/configure/router/rip/group/timers YANG schema element.
type NokiaConf_Configure_Router_Rip_Group_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_Group_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Router_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Router_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_Group_Timers.
func (*NokiaConf_Configure_Router_Rip_Group_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rip_Timers represents the /nokia-conf/configure/router/rip/timers YANG schema element.
type NokiaConf_Configure_Router_Rip_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rip_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rip_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Router_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Router_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rip_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rip_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rip_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rip_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rip_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rip_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rip_Timers.
func (*NokiaConf_Configure_Router_Rip_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng represents the /nokia-conf/configure/router/ripng YANG schema element.
type NokiaConf_Configure_Router_Ripng struct {
	AdminState         E_NokiaTypesSros_AdminState                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                              `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                              `path:"check-zero" module:"nokia-conf"`
	Description        *string                                            `path:"description" module:"nokia-conf"`
	ExportLimit        *NokiaConf_Configure_Router_Ripng_ExportLimit      `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy       []string                                           `path:"export-policy" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Router_Ripng_Group `path:"group" module:"nokia-conf"`
	ImportPolicy       []string                                           `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                            `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                            `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                            `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                            `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRipng_Receive                          `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Router_Ripng_Send            `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                              `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Router_Ripng_Timers           `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Router_Ripng struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ripng) NewGroup(GroupName string) (*NokiaConf_Configure_Router_Ripng_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Ripng_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Router_Ripng_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Router_Ripng struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ripng) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ripng. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ripng) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Router_Ripng_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Router_Ripng. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ripng) GetGroup(GroupName string) *NokiaConf_Configure_Router_Ripng_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ripng. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ripng) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Router_Ripng_Group struct to the
// list Group of NokiaConf_Configure_Router_Ripng. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ripng_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ripng) AppendGroup(v *NokiaConf_Configure_Router_Ripng_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Ripng_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ripng) GetOrCreateExportLimit() *NokiaConf_Configure_Router_Ripng_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Router_Ripng_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ripng) GetOrCreateTimers() *NokiaConf_Configure_Router_Ripng_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Router_Ripng_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Router_Ripng. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ripng) GetExportLimit() *NokiaConf_Configure_Router_Ripng_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Router_Ripng. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ripng) GetTimers() *NokiaConf_Configure_Router_Ripng_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 25
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 1
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 1
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaTypesRipng_Receive_ripng
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetSend() E_NokiaConf_Configure_Router_Ripng_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Router_Ripng_Send_ripng
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return true
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.CheckZero == nil {
		var v bool = false
		t.CheckZero = &v
	}
	if t.MessageSize == nil {
		var v uint32 = 25
		t.MessageSize = &v
	}
	if t.MetricIn == nil {
		var v uint32 = 1
		t.MetricIn = &v
	}
	if t.MetricOut == nil {
		var v uint32 = 1
		t.MetricOut = &v
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	if t.Receive == 0 {
		t.Receive = NokiaTypesRipng_Receive_ripng
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Router_Ripng_Send_ripng
	}
	if t.SplitHorizon == nil {
		var v bool = true
		t.SplitHorizon = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng.
func (*NokiaConf_Configure_Router_Ripng) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_ExportLimit represents the /nokia-conf/configure/router/ripng/export-limit YANG schema element.
type NokiaConf_Configure_Router_Ripng_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Router_Ripng_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_Ripng_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_ExportLimit.
func (*NokiaConf_Configure_Router_Ripng_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_Group represents the /nokia-conf/configure/router/ripng/group YANG schema element.
type NokiaConf_Configure_Router_Ripng_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                                       `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                       `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                     `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                    `path:"export-policy" module:"nokia-conf"`
	GroupName          *string                                                     `path:"group-name" module:"nokia-conf"`
	ImportPolicy       []string                                                    `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                     `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                     `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                     `path:"metric-out" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Router_Ripng_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Preference         *uint32                                                     `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRipng_Receive                                   `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Router_Ripng_Group_Send               `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                       `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Router_Ripng_Group_Timers              `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Router_Ripng_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ripng_Group) NewNeighbor(InterfaceName string) (*NokiaConf_Configure_Router_Ripng_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Ripng_Group_Neighbor)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Router_Ripng_Group_Neighbor{
		InterfaceName: &InterfaceName,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Router_Ripng_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ripng_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.InterfaceName = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ripng_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetOrCreateNeighbor(InterfaceName string) *NokiaConf_Configure_Router_Ripng_Group_Neighbor {

	key := InterfaceName

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Router_Ripng_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetNeighbor(InterfaceName string) *NokiaConf_Configure_Router_Ripng_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ripng_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ripng_Group) DeleteNeighbor(InterfaceName string) {
	key := InterfaceName

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Router_Ripng_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Router_Ripng_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ripng_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ripng_Group) AppendNeighbor(v *NokiaConf_Configure_Router_Ripng_Group_Neighbor) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Ripng_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetOrCreateTimers() *NokiaConf_Configure_Router_Ripng_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Router_Ripng_Group_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Router_Ripng_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetTimers() *NokiaConf_Configure_Router_Ripng_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetSend() E_NokiaConf_Configure_Router_Ripng_Group_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ripng_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ripng_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_Group.
func (*NokiaConf_Configure_Router_Ripng_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_Group_Neighbor represents the /nokia-conf/configure/router/ripng/group/neighbor YANG schema element.
type NokiaConf_Configure_Router_Ripng_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                                                      `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                                      `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                                    `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                                   `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                                   `path:"import-policy" module:"nokia-conf"`
	InterfaceName      *string                                                                    `path:"interface-name" module:"nokia-conf"`
	MessageSize        *uint32                                                                    `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                                    `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                                    `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                                    `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRipng_Receive                                                  `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Router_Ripng_Group_Neighbor_Send                     `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                                      `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers                    `path:"timers" module:"nokia-conf" yangPresence:"true"`
	UnicastAddress     map[string]*NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress `path:"unicast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_Group_Neighbor) IsYANGGoStruct() {}

// NewUnicastAddress creates a new entry in the UnicastAddress list of the
// NokiaConf_Configure_Router_Ripng_Group_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) NewUnicastAddress(Address string) (*NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastAddress", key)
	}

	t.UnicastAddress[key] = &NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress{
		Address: &Address,
	}

	return t.UnicastAddress[key], nil
}

// RenameUnicastAddress renames an entry in the list UnicastAddress within
// the NokiaConf_Configure_Router_Ripng_Group_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) RenameUnicastAddress(oldK, newK string) error {
	if _, ok := t.UnicastAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastAddress", newK)
	}

	e, ok := t.UnicastAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastAddress", oldK)
	}
	e.Address = &newK

	t.UnicastAddress[newK] = e
	delete(t.UnicastAddress, oldK)
	return nil
}

// GetOrCreateUnicastAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ripng_Group_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetOrCreateUnicastAddress(Address string) *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress {

	key := Address

	if v, ok := t.UnicastAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastAddress got unexpected error: %v", err))
	}
	return v
}

// GetUnicastAddress retrieves the value with the specified key from
// the UnicastAddress map field of NokiaConf_Configure_Router_Ripng_Group_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetUnicastAddress(Address string) *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.UnicastAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Ripng_Group_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) DeleteUnicastAddress(Address string) {
	key := Address

	delete(t.UnicastAddress, key)
}

// AppendUnicastAddress appends the supplied NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress struct to the
// list UnicastAddress of NokiaConf_Configure_Router_Ripng_Group_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) AppendUnicastAddress(v *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress)
	}

	if _, ok := t.UnicastAddress[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastAddress %v", key)
	}

	t.UnicastAddress[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetOrCreateTimers() *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Router_Ripng_Group_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetTimers() *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetSend() E_NokiaConf_Configure_Router_Ripng_Group_Neighbor_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.UnicastAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ripng_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_Group_Neighbor.
func (*NokiaConf_Configure_Router_Ripng_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers represents the /nokia-conf/configure/router/ripng/group/neighbor/timers YANG schema element.
type NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers.
func (*NokiaConf_Configure_Router_Ripng_Group_Neighbor_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress represents the /nokia-conf/configure/router/ripng/group/neighbor/unicast-address YANG schema element.
type NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress.
func (*NokiaConf_Configure_Router_Ripng_Group_Neighbor_UnicastAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_Group_Timers represents the /nokia-conf/configure/router/ripng/group/timers YANG schema element.
type NokiaConf_Configure_Router_Ripng_Group_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_Group_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Router_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Router_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_Group_Timers.
func (*NokiaConf_Configure_Router_Ripng_Group_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Ripng_Timers represents the /nokia-conf/configure/router/ripng/timers YANG schema element.
type NokiaConf_Configure_Router_Ripng_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Ripng_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Ripng_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Router_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Router_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Router_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Ripng_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Ripng_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Ripng_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Ripng_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Ripng_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Ripng_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Ripng_Timers.
func (*NokiaConf_Configure_Router_Ripng_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp represents the /nokia-conf/configure/router/rsvp YANG schema element.
type NokiaConf_Configure_Router_Rsvp struct {
	AdminState                 E_NokiaTypesSros_AdminState                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DbwAccounting              *NokiaConf_Configure_Router_Rsvp_DbwAccounting        `path:"dbw-accounting" module:"nokia-conf" yangPresence:"true"`
	DiffservTe                 *NokiaConf_Configure_Router_Rsvp_DiffservTe           `path:"diffserv-te" module:"nokia-conf" yangPresence:"true"`
	EntropyLabelCapability     *bool                                                 `path:"entropy-label-capability" module:"nokia-conf"`
	GracefulRestart            *NokiaConf_Configure_Router_Rsvp_GracefulRestart      `path:"graceful-restart" module:"nokia-conf"`
	GracefulShutdown           *bool                                                 `path:"graceful-shutdown" module:"nokia-conf"`
	ImplicitNullLabel          *bool                                                 `path:"implicit-null-label" module:"nokia-conf"`
	IncludeNodeIdInRro         *bool                                                 `path:"include-node-id-in-rro" module:"nokia-conf"`
	Interface                  map[string]*NokiaConf_Configure_Router_Rsvp_Interface `path:"interface" module:"nokia-conf"`
	KeepMultiplier             *uint32                                               `path:"keep-multiplier" module:"nokia-conf"`
	MsgPacing                  *NokiaConf_Configure_Router_Rsvp_MsgPacing            `path:"msg-pacing" module:"nokia-conf" yangPresence:"true"`
	P2MpMergePointAbortTimer   *uint32                                               `path:"p2mp-merge-point-abort-timer" module:"nokia-conf"`
	P2PMergePointAbortTimer    *uint32                                               `path:"p2p-merge-point-abort-timer" module:"nokia-conf"`
	PreemptionTimer            *uint32                                               `path:"preemption-timer" module:"nokia-conf"`
	RapidRetransmitTime        *uint32                                               `path:"rapid-retransmit-time" module:"nokia-conf"`
	RapidRetryLimit            *uint32                                               `path:"rapid-retry-limit" module:"nokia-conf"`
	RefreshReductionOverBypass *bool                                                 `path:"refresh-reduction-over-bypass" module:"nokia-conf"`
	RefreshTime                *uint32                                               `path:"refresh-time" module:"nokia-conf"`
	TeDownThreshold            []int32                                               `path:"te-down-threshold" module:"nokia-conf"`
	TeThresholdUpdate          *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate    `path:"te-threshold-update" module:"nokia-conf" yangPresence:"true"`
	TeUpThreshold              []int32                                               `path:"te-up-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_Rsvp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Rsvp) NewInterface(InterfaceName string) (*NokiaConf_Configure_Router_Rsvp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Rsvp_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Rsvp_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_Rsvp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Rsvp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rsvp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Rsvp) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Router_Rsvp_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_Rsvp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp) GetInterface(InterfaceName string) *NokiaConf_Configure_Router_Rsvp_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rsvp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Rsvp) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Rsvp_Interface struct to the
// list Interface of NokiaConf_Configure_Router_Rsvp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Rsvp_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Rsvp) AppendInterface(v *NokiaConf_Configure_Router_Rsvp_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Rsvp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateDbwAccounting retrieves the value of the DbwAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp) GetOrCreateDbwAccounting() *NokiaConf_Configure_Router_Rsvp_DbwAccounting {
	if t.DbwAccounting != nil {
		return t.DbwAccounting
	}
	t.DbwAccounting = &NokiaConf_Configure_Router_Rsvp_DbwAccounting{}
	return t.DbwAccounting
}

// GetOrCreateDiffservTe retrieves the value of the DiffservTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp) GetOrCreateDiffservTe() *NokiaConf_Configure_Router_Rsvp_DiffservTe {
	if t.DiffservTe != nil {
		return t.DiffservTe
	}
	t.DiffservTe = &NokiaConf_Configure_Router_Rsvp_DiffservTe{}
	return t.DiffservTe
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp) GetOrCreateGracefulRestart() *NokiaConf_Configure_Router_Rsvp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Router_Rsvp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateMsgPacing retrieves the value of the MsgPacing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp) GetOrCreateMsgPacing() *NokiaConf_Configure_Router_Rsvp_MsgPacing {
	if t.MsgPacing != nil {
		return t.MsgPacing
	}
	t.MsgPacing = &NokiaConf_Configure_Router_Rsvp_MsgPacing{}
	return t.MsgPacing
}

// GetOrCreateTeThresholdUpdate retrieves the value of the TeThresholdUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp) GetOrCreateTeThresholdUpdate() *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate {
	if t.TeThresholdUpdate != nil {
		return t.TeThresholdUpdate
	}
	t.TeThresholdUpdate = &NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate{}
	return t.TeThresholdUpdate
}

// GetDbwAccounting returns the value of the DbwAccounting struct pointer
// from NokiaConf_Configure_Router_Rsvp. If the receiver or the field DbwAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp) GetDbwAccounting() *NokiaConf_Configure_Router_Rsvp_DbwAccounting {
	if t != nil && t.DbwAccounting != nil {
		return t.DbwAccounting
	}
	return nil
}

// GetDiffservTe returns the value of the DiffservTe struct pointer
// from NokiaConf_Configure_Router_Rsvp. If the receiver or the field DiffservTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp) GetDiffservTe() *NokiaConf_Configure_Router_Rsvp_DiffservTe {
	if t != nil && t.DiffservTe != nil {
		return t.DiffservTe
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Router_Rsvp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp) GetGracefulRestart() *NokiaConf_Configure_Router_Rsvp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetMsgPacing returns the value of the MsgPacing struct pointer
// from NokiaConf_Configure_Router_Rsvp. If the receiver or the field MsgPacing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp) GetMsgPacing() *NokiaConf_Configure_Router_Rsvp_MsgPacing {
	if t != nil && t.MsgPacing != nil {
		return t.MsgPacing
	}
	return nil
}

// GetTeThresholdUpdate returns the value of the TeThresholdUpdate struct pointer
// from NokiaConf_Configure_Router_Rsvp. If the receiver or the field TeThresholdUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp) GetTeThresholdUpdate() *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate {
	if t != nil && t.TeThresholdUpdate != nil {
		return t.TeThresholdUpdate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntropyLabelCapability retrieves the value of the leaf EntropyLabelCapability from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabelCapability is set, it can
// safely use t.GetEntropyLabelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetEntropyLabelCapability() bool {
	if t == nil || t.EntropyLabelCapability == nil {
		return false
	}
	return *t.EntropyLabelCapability
}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return false
	}
	return *t.GracefulShutdown
}

// GetImplicitNullLabel retrieves the value of the leaf ImplicitNullLabel from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImplicitNullLabel is set, it can
// safely use t.GetImplicitNullLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImplicitNullLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetImplicitNullLabel() bool {
	if t == nil || t.ImplicitNullLabel == nil {
		return false
	}
	return *t.ImplicitNullLabel
}

// GetIncludeNodeIdInRro retrieves the value of the leaf IncludeNodeIdInRro from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeNodeIdInRro is set, it can
// safely use t.GetIncludeNodeIdInRro() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeNodeIdInRro == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetIncludeNodeIdInRro() bool {
	if t == nil || t.IncludeNodeIdInRro == nil {
		return false
	}
	return *t.IncludeNodeIdInRro
}

// GetKeepMultiplier retrieves the value of the leaf KeepMultiplier from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepMultiplier is set, it can
// safely use t.GetKeepMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetKeepMultiplier() uint32 {
	if t == nil || t.KeepMultiplier == nil {
		return 3
	}
	return *t.KeepMultiplier
}

// GetP2MpMergePointAbortTimer retrieves the value of the leaf P2MpMergePointAbortTimer from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpMergePointAbortTimer is set, it can
// safely use t.GetP2MpMergePointAbortTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpMergePointAbortTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetP2MpMergePointAbortTimer() uint32 {
	if t == nil || t.P2MpMergePointAbortTimer == nil {
		return 0
	}
	return *t.P2MpMergePointAbortTimer
}

// GetP2PMergePointAbortTimer retrieves the value of the leaf P2PMergePointAbortTimer from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2PMergePointAbortTimer is set, it can
// safely use t.GetP2PMergePointAbortTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2PMergePointAbortTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetP2PMergePointAbortTimer() uint32 {
	if t == nil || t.P2PMergePointAbortTimer == nil {
		return 0
	}
	return *t.P2PMergePointAbortTimer
}

// GetPreemptionTimer retrieves the value of the leaf PreemptionTimer from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreemptionTimer is set, it can
// safely use t.GetPreemptionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreemptionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetPreemptionTimer() uint32 {
	if t == nil || t.PreemptionTimer == nil {
		return 300
	}
	return *t.PreemptionTimer
}

// GetRapidRetransmitTime retrieves the value of the leaf RapidRetransmitTime from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidRetransmitTime is set, it can
// safely use t.GetRapidRetransmitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidRetransmitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetRapidRetransmitTime() uint32 {
	if t == nil || t.RapidRetransmitTime == nil {
		return 5
	}
	return *t.RapidRetransmitTime
}

// GetRapidRetryLimit retrieves the value of the leaf RapidRetryLimit from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidRetryLimit is set, it can
// safely use t.GetRapidRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidRetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetRapidRetryLimit() uint32 {
	if t == nil || t.RapidRetryLimit == nil {
		return 3
	}
	return *t.RapidRetryLimit
}

// GetRefreshReductionOverBypass retrieves the value of the leaf RefreshReductionOverBypass from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshReductionOverBypass is set, it can
// safely use t.GetRefreshReductionOverBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshReductionOverBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetRefreshReductionOverBypass() bool {
	if t == nil || t.RefreshReductionOverBypass == nil {
		return false
	}
	return *t.RefreshReductionOverBypass
}

// GetRefreshTime retrieves the value of the leaf RefreshTime from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshTime is set, it can
// safely use t.GetRefreshTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetRefreshTime() uint32 {
	if t == nil || t.RefreshTime == nil {
		return 30
	}
	return *t.RefreshTime
}

// GetTeDownThreshold retrieves the value of the leaf TeDownThreshold from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeDownThreshold is set, it can
// safely use t.GetTeDownThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeDownThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetTeDownThreshold() []int32 {
	if t == nil || t.TeDownThreshold == nil {
		return nil
	}
	return t.TeDownThreshold
}

// GetTeUpThreshold retrieves the value of the leaf TeUpThreshold from the NokiaConf_Configure_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeUpThreshold is set, it can
// safely use t.GetTeUpThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeUpThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp) GetTeUpThreshold() []int32 {
	if t == nil || t.TeUpThreshold == nil {
		return nil
	}
	return t.TeUpThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EntropyLabelCapability == nil {
		var v bool = false
		t.EntropyLabelCapability = &v
	}
	if t.GracefulShutdown == nil {
		var v bool = false
		t.GracefulShutdown = &v
	}
	if t.ImplicitNullLabel == nil {
		var v bool = false
		t.ImplicitNullLabel = &v
	}
	if t.IncludeNodeIdInRro == nil {
		var v bool = false
		t.IncludeNodeIdInRro = &v
	}
	if t.KeepMultiplier == nil {
		var v uint32 = 3
		t.KeepMultiplier = &v
	}
	if t.PreemptionTimer == nil {
		var v uint32 = 300
		t.PreemptionTimer = &v
	}
	if t.RapidRetransmitTime == nil {
		var v uint32 = 5
		t.RapidRetransmitTime = &v
	}
	if t.RapidRetryLimit == nil {
		var v uint32 = 3
		t.RapidRetryLimit = &v
	}
	if t.RefreshReductionOverBypass == nil {
		var v bool = false
		t.RefreshReductionOverBypass = &v
	}
	if t.RefreshTime == nil {
		var v uint32 = 30
		t.RefreshTime = &v
	}
	t.DbwAccounting.PopulateDefaults()
	t.DiffservTe.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.MsgPacing.PopulateDefaults()
	t.TeThresholdUpdate.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp.
func (*NokiaConf_Configure_Router_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DbwAccounting represents the /nokia-conf/configure/router/rsvp/dbw-accounting YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DbwAccounting struct {
	DbwMultiplier    *uint32                                                      `path:"dbw-multiplier" module:"nokia-conf"`
	DownThreshold    *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold `path:"down-threshold" module:"nokia-conf"`
	SampleInterval   *uint32                                                      `path:"sample-interval" module:"nokia-conf"`
	SampleMultiplier *uint32                                                      `path:"sample-multiplier" module:"nokia-conf"`
	UpThreshold      *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold   `path:"up-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DbwAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DbwAccounting) IsYANGGoStruct() {}

// GetOrCreateDownThreshold retrieves the value of the DownThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetOrCreateDownThreshold() *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold {
	if t.DownThreshold != nil {
		return t.DownThreshold
	}
	t.DownThreshold = &NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold{}
	return t.DownThreshold
}

// GetOrCreateUpThreshold retrieves the value of the UpThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetOrCreateUpThreshold() *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold {
	if t.UpThreshold != nil {
		return t.UpThreshold
	}
	t.UpThreshold = &NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold{}
	return t.UpThreshold
}

// GetDownThreshold returns the value of the DownThreshold struct pointer
// from NokiaConf_Configure_Router_Rsvp_DbwAccounting. If the receiver or the field DownThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetDownThreshold() *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold {
	if t != nil && t.DownThreshold != nil {
		return t.DownThreshold
	}
	return nil
}

// GetUpThreshold returns the value of the UpThreshold struct pointer
// from NokiaConf_Configure_Router_Rsvp_DbwAccounting. If the receiver or the field UpThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetUpThreshold() *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold {
	if t != nil && t.UpThreshold != nil {
		return t.UpThreshold
	}
	return nil
}

// GetDbwMultiplier retrieves the value of the leaf DbwMultiplier from the NokiaConf_Configure_Router_Rsvp_DbwAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DbwMultiplier is set, it can
// safely use t.GetDbwMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DbwMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetDbwMultiplier() uint32 {
	if t == nil || t.DbwMultiplier == nil {
		return 100
	}
	return *t.DbwMultiplier
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the NokiaConf_Configure_Router_Rsvp_DbwAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetSampleInterval() uint32 {
	if t == nil || t.SampleInterval == nil {
		return 30
	}
	return *t.SampleInterval
}

// GetSampleMultiplier retrieves the value of the leaf SampleMultiplier from the NokiaConf_Configure_Router_Rsvp_DbwAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleMultiplier is set, it can
// safely use t.GetSampleMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) GetSampleMultiplier() uint32 {
	if t == nil || t.SampleMultiplier == nil {
		return 3
	}
	return *t.SampleMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DbwAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DbwMultiplier == nil {
		var v uint32 = 100
		t.DbwMultiplier = &v
	}
	if t.SampleInterval == nil {
		var v uint32 = 30
		t.SampleInterval = &v
	}
	if t.SampleMultiplier == nil {
		var v uint32 = 3
		t.SampleMultiplier = &v
	}
	t.DownThreshold.PopulateDefaults()
	t.UpThreshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DbwAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DbwAccounting.
func (*NokiaConf_Configure_Router_Rsvp_DbwAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold represents the /nokia-conf/configure/router/rsvp/dbw-accounting/down-threshold YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold struct {
	Bw      *int32  `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v uint32 = 0
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold.
func (*NokiaConf_Configure_Router_Rsvp_DbwAccounting_DownThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold represents the /nokia-conf/configure/router/rsvp/dbw-accounting/up-threshold YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold struct {
	Bw      *int32  `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v uint32 = 0
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold.
func (*NokiaConf_Configure_Router_Rsvp_DbwAccounting_UpThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DiffservTe represents the /nokia-conf/configure/router/rsvp/diffserv-te YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DiffservTe struct {
	AdmissionControlModel E_NokiaConf_Configure_Router_Rsvp_DiffservTe_AdmissionControlModel         `path:"admission-control-model" module:"nokia-conf"`
	ApplyGroups           []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassTypeBw           *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw                    `path:"class-type-bw" module:"nokia-conf"`
	Fc                    map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc `path:"fc" module:"nokia-conf"`
	TeClass               map[uint32]*NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass             `path:"te-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DiffservTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Router_Rsvp_DiffservTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Router_Rsvp_DiffservTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rsvp_DiffservTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Router_Rsvp_DiffservTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rsvp_DiffservTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc struct to the
// list Fc of NokiaConf_Configure_Router_Rsvp_DiffservTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) AppendFc(v *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewTeClass creates a new entry in the TeClass list of the
// NokiaConf_Configure_Router_Rsvp_DiffservTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) NewTeClass(TeClassNumber uint32) (*NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TeClass == nil {
		t.TeClass = make(map[uint32]*NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass)
	}

	key := TeClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TeClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TeClass", key)
	}

	t.TeClass[key] = &NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass{
		TeClassNumber: &TeClassNumber,
	}

	return t.TeClass[key], nil
}

// RenameTeClass renames an entry in the list TeClass within
// the NokiaConf_Configure_Router_Rsvp_DiffservTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) RenameTeClass(oldK, newK uint32) error {
	if _, ok := t.TeClass[newK]; ok {
		return fmt.Errorf("key %v already exists in TeClass", newK)
	}

	e, ok := t.TeClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TeClass", oldK)
	}
	e.TeClassNumber = &newK

	t.TeClass[newK] = e
	delete(t.TeClass, oldK)
	return nil
}

// GetOrCreateTeClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rsvp_DiffservTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetOrCreateTeClass(TeClassNumber uint32) *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass {

	key := TeClassNumber

	if v, ok := t.TeClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTeClass(TeClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTeClass got unexpected error: %v", err))
	}
	return v
}

// GetTeClass retrieves the value with the specified key from
// the TeClass map field of NokiaConf_Configure_Router_Rsvp_DiffservTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetTeClass(TeClassNumber uint32) *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass {

	if t == nil {
		return nil
	}

	key := TeClassNumber

	if lm, ok := t.TeClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteTeClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Rsvp_DiffservTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) DeleteTeClass(TeClassNumber uint32) {
	key := TeClassNumber

	delete(t.TeClass, key)
}

// AppendTeClass appends the supplied NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass struct to the
// list TeClass of NokiaConf_Configure_Router_Rsvp_DiffservTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) AppendTeClass(v *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) error {
	if v.TeClassNumber == nil {
		return fmt.Errorf("invalid nil key received for TeClassNumber")
	}

	key := *v.TeClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TeClass == nil {
		t.TeClass = make(map[uint32]*NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass)
	}

	if _, ok := t.TeClass[key]; ok {
		return fmt.Errorf("duplicate key for list TeClass %v", key)
	}

	t.TeClass[key] = v
	return nil
}

// GetOrCreateClassTypeBw retrieves the value of the ClassTypeBw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetOrCreateClassTypeBw() *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw {
	if t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	t.ClassTypeBw = &NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw{}
	return t.ClassTypeBw
}

// GetClassTypeBw returns the value of the ClassTypeBw struct pointer
// from NokiaConf_Configure_Router_Rsvp_DiffservTe. If the receiver or the field ClassTypeBw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetClassTypeBw() *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw {
	if t != nil && t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	return nil
}

// GetAdmissionControlModel retrieves the value of the leaf AdmissionControlModel from the NokiaConf_Configure_Router_Rsvp_DiffservTe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdmissionControlModel is set, it can
// safely use t.GetAdmissionControlModel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdmissionControlModel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetAdmissionControlModel() E_NokiaConf_Configure_Router_Rsvp_DiffservTe_AdmissionControlModel {
	if t == nil || t.AdmissionControlModel == 0 {
		return 0
	}
	return t.AdmissionControlModel
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp_DiffservTe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp_DiffservTe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DiffservTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClassTypeBw.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.TeClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DiffservTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DiffservTe.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw represents the /nokia-conf/configure/router/rsvp/diffserv-te/class-type-bw YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw struct {
	Ct0 *int32 `path:"ct0" module:"nokia-conf"`
	Ct1 *int32 `path:"ct1" module:"nokia-conf"`
	Ct2 *int32 `path:"ct2" module:"nokia-conf"`
	Ct3 *int32 `path:"ct3" module:"nokia-conf"`
	Ct4 *int32 `path:"ct4" module:"nokia-conf"`
	Ct5 *int32 `path:"ct5" module:"nokia-conf"`
	Ct6 *int32 `path:"ct6" module:"nokia-conf"`
	Ct7 *int32 `path:"ct7" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) IsYANGGoStruct() {}

// GetCt0 retrieves the value of the leaf Ct0 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct0 is set, it can
// safely use t.GetCt0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt0() int32 {
	if t == nil || t.Ct0 == nil {
		return 0
	}
	return *t.Ct0
}

// GetCt1 retrieves the value of the leaf Ct1 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct1 is set, it can
// safely use t.GetCt1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt1() int32 {
	if t == nil || t.Ct1 == nil {
		return 0
	}
	return *t.Ct1
}

// GetCt2 retrieves the value of the leaf Ct2 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct2 is set, it can
// safely use t.GetCt2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt2() int32 {
	if t == nil || t.Ct2 == nil {
		return 0
	}
	return *t.Ct2
}

// GetCt3 retrieves the value of the leaf Ct3 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct3 is set, it can
// safely use t.GetCt3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt3() int32 {
	if t == nil || t.Ct3 == nil {
		return 0
	}
	return *t.Ct3
}

// GetCt4 retrieves the value of the leaf Ct4 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct4 is set, it can
// safely use t.GetCt4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt4() int32 {
	if t == nil || t.Ct4 == nil {
		return 0
	}
	return *t.Ct4
}

// GetCt5 retrieves the value of the leaf Ct5 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct5 is set, it can
// safely use t.GetCt5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt5() int32 {
	if t == nil || t.Ct5 == nil {
		return 0
	}
	return *t.Ct5
}

// GetCt6 retrieves the value of the leaf Ct6 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct6 is set, it can
// safely use t.GetCt6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt6() int32 {
	if t == nil || t.Ct6 == nil {
		return 0
	}
	return *t.Ct6
}

// GetCt7 retrieves the value of the leaf Ct7 from the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct7 is set, it can
// safely use t.GetCt7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt7() int32 {
	if t == nil || t.Ct7 == nil {
		return 0
	}
	return *t.Ct7
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ct0 == nil {
		var v int32 = 0
		t.Ct0 = &v
	}
	if t.Ct1 == nil {
		var v int32 = 0
		t.Ct1 = &v
	}
	if t.Ct2 == nil {
		var v int32 = 0
		t.Ct2 = &v
	}
	if t.Ct3 == nil {
		var v int32 = 0
		t.Ct3 = &v
	}
	if t.Ct4 == nil {
		var v int32 = 0
		t.Ct4 = &v
	}
	if t.Ct5 == nil {
		var v int32 = 0
		t.Ct5 = &v
	}
	if t.Ct6 == nil {
		var v int32 = 0
		t.Ct6 = &v
	}
	if t.Ct7 == nil {
		var v int32 = 0
		t.Ct7 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe_ClassTypeBw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc represents the /nokia-conf/configure/router/rsvp/diffserv-te/fc YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassType          *int32                  `path:"class-type" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName `path:"fc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass represents the /nokia-conf/configure/router/rsvp/diffserv-te/te-class YANG schema element.
type NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassType          *int32   `path:"class-type" module:"nokia-conf"`
	Priority           *int32   `path:"priority" module:"nokia-conf"`
	TeClassNumber      *uint32  `path:"te-class-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetTeClassNumber retrieves the value of the leaf TeClassNumber from the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeClassNumber is set, it can
// safely use t.GetTeClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) GetTeClassNumber() uint32 {
	if t == nil || t.TeClassNumber == nil {
		return 0
	}
	return *t.TeClassNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TeClassNumber == nil {
		return nil, fmt.Errorf("nil value for key TeClassNumber")
	}

	return map[string]interface{}{
		"te-class-number": *t.TeClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass.
func (*NokiaConf_Configure_Router_Rsvp_DiffservTe_TeClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_GracefulRestart represents the /nokia-conf/configure/router/rsvp/graceful-restart YANG schema element.
type NokiaConf_Configure_Router_Rsvp_GracefulRestart struct {
	MaxRecovery *uint32 `path:"max-recovery" module:"nokia-conf"`
	MaxRestart  *uint32 `path:"max-restart" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_GracefulRestart) IsYANGGoStruct() {}

// GetMaxRecovery retrieves the value of the leaf MaxRecovery from the NokiaConf_Configure_Router_Rsvp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRecovery is set, it can
// safely use t.GetMaxRecovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRecovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_GracefulRestart) GetMaxRecovery() uint32 {
	if t == nil || t.MaxRecovery == nil {
		return 300
	}
	return *t.MaxRecovery
}

// GetMaxRestart retrieves the value of the leaf MaxRestart from the NokiaConf_Configure_Router_Rsvp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRestart is set, it can
// safely use t.GetMaxRestart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRestart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_GracefulRestart) GetMaxRestart() uint32 {
	if t == nil || t.MaxRestart == nil {
		return 120
	}
	return *t.MaxRestart
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRecovery == nil {
		var v uint32 = 300
		t.MaxRecovery = &v
	}
	if t.MaxRestart == nil {
		var v uint32 = 120
		t.MaxRestart = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_GracefulRestart.
func (*NokiaConf_Configure_Router_Rsvp_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface represents the /nokia-conf/configure/router/rsvp/interface YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey         *string                                                     `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain    *string                                                     `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness               *bool                                                       `path:"bfd-liveness" module:"nokia-conf"`
	ClassTypeBw               *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw      `path:"class-type-bw" module:"nokia-conf" yangPresence:"true"`
	DbwDownThreshold          *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold `path:"dbw-down-threshold" module:"nokia-conf" yangPresence:"true"`
	DbwMultiplier             *int32                                                      `path:"dbw-multiplier" module:"nokia-conf"`
	DbwUpThreshold            *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold   `path:"dbw-up-threshold" module:"nokia-conf" yangPresence:"true"`
	GracefulRestartHelperMode *bool                                                       `path:"graceful-restart-helper-mode" module:"nokia-conf"`
	GracefulShutdown          *bool                                                       `path:"graceful-shutdown" module:"nokia-conf"`
	HelloInterval             *uint32                                                     `path:"hello-interval" module:"nokia-conf"`
	ImplicitNullLabel         *bool                                                       `path:"implicit-null-label" module:"nokia-conf"`
	InterfaceName             *string                                                     `path:"interface-name" module:"nokia-conf"`
	RefreshReduction          *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction `path:"refresh-reduction" module:"nokia-conf" yangPresence:"true"`
	Subscription              *uint32                                                     `path:"subscription" module:"nokia-conf"`
	TeDownThreshold           *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold  `path:"te-down-threshold" module:"nokia-conf" yangPresence:"true"`
	TeUpThreshold             *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold    `path:"te-up-threshold" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface) IsYANGGoStruct() {}

// GetOrCreateClassTypeBw retrieves the value of the ClassTypeBw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetOrCreateClassTypeBw() *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw {
	if t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	t.ClassTypeBw = &NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw{}
	return t.ClassTypeBw
}

// GetOrCreateDbwDownThreshold retrieves the value of the DbwDownThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetOrCreateDbwDownThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold {
	if t.DbwDownThreshold != nil {
		return t.DbwDownThreshold
	}
	t.DbwDownThreshold = &NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold{}
	return t.DbwDownThreshold
}

// GetOrCreateDbwUpThreshold retrieves the value of the DbwUpThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetOrCreateDbwUpThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold {
	if t.DbwUpThreshold != nil {
		return t.DbwUpThreshold
	}
	t.DbwUpThreshold = &NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold{}
	return t.DbwUpThreshold
}

// GetOrCreateRefreshReduction retrieves the value of the RefreshReduction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetOrCreateRefreshReduction() *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction {
	if t.RefreshReduction != nil {
		return t.RefreshReduction
	}
	t.RefreshReduction = &NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction{}
	return t.RefreshReduction
}

// GetOrCreateTeDownThreshold retrieves the value of the TeDownThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetOrCreateTeDownThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold {
	if t.TeDownThreshold != nil {
		return t.TeDownThreshold
	}
	t.TeDownThreshold = &NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold{}
	return t.TeDownThreshold
}

// GetOrCreateTeUpThreshold retrieves the value of the TeUpThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetOrCreateTeUpThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold {
	if t.TeUpThreshold != nil {
		return t.TeUpThreshold
	}
	t.TeUpThreshold = &NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold{}
	return t.TeUpThreshold
}

// GetClassTypeBw returns the value of the ClassTypeBw struct pointer
// from NokiaConf_Configure_Router_Rsvp_Interface. If the receiver or the field ClassTypeBw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetClassTypeBw() *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw {
	if t != nil && t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	return nil
}

// GetDbwDownThreshold returns the value of the DbwDownThreshold struct pointer
// from NokiaConf_Configure_Router_Rsvp_Interface. If the receiver or the field DbwDownThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetDbwDownThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold {
	if t != nil && t.DbwDownThreshold != nil {
		return t.DbwDownThreshold
	}
	return nil
}

// GetDbwUpThreshold returns the value of the DbwUpThreshold struct pointer
// from NokiaConf_Configure_Router_Rsvp_Interface. If the receiver or the field DbwUpThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetDbwUpThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold {
	if t != nil && t.DbwUpThreshold != nil {
		return t.DbwUpThreshold
	}
	return nil
}

// GetRefreshReduction returns the value of the RefreshReduction struct pointer
// from NokiaConf_Configure_Router_Rsvp_Interface. If the receiver or the field RefreshReduction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetRefreshReduction() *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction {
	if t != nil && t.RefreshReduction != nil {
		return t.RefreshReduction
	}
	return nil
}

// GetTeDownThreshold returns the value of the TeDownThreshold struct pointer
// from NokiaConf_Configure_Router_Rsvp_Interface. If the receiver or the field TeDownThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetTeDownThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold {
	if t != nil && t.TeDownThreshold != nil {
		return t.TeDownThreshold
	}
	return nil
}

// GetTeUpThreshold returns the value of the TeUpThreshold struct pointer
// from NokiaConf_Configure_Router_Rsvp_Interface. If the receiver or the field TeUpThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetTeUpThreshold() *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold {
	if t != nil && t.TeUpThreshold != nil {
		return t.TeUpThreshold
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetDbwMultiplier retrieves the value of the leaf DbwMultiplier from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DbwMultiplier is set, it can
// safely use t.GetDbwMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DbwMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetDbwMultiplier() int32 {
	if t == nil || t.DbwMultiplier == nil {
		return 0
	}
	return *t.DbwMultiplier
}

// GetGracefulRestartHelperMode retrieves the value of the leaf GracefulRestartHelperMode from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulRestartHelperMode is set, it can
// safely use t.GetGracefulRestartHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulRestartHelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetGracefulRestartHelperMode() bool {
	if t == nil || t.GracefulRestartHelperMode == nil {
		return false
	}
	return *t.GracefulRestartHelperMode
}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return false
	}
	return *t.GracefulShutdown
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 3
	}
	return *t.HelloInterval
}

// GetImplicitNullLabel retrieves the value of the leaf ImplicitNullLabel from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImplicitNullLabel is set, it can
// safely use t.GetImplicitNullLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImplicitNullLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetImplicitNullLabel() bool {
	if t == nil || t.ImplicitNullLabel == nil {
		return false
	}
	return *t.ImplicitNullLabel
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetSubscription retrieves the value of the leaf Subscription from the NokiaConf_Configure_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subscription is set, it can
// safely use t.GetSubscription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subscription == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) GetSubscription() uint32 {
	if t == nil || t.Subscription == nil {
		return 100
	}
	return *t.Subscription
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.GracefulRestartHelperMode == nil {
		var v bool = false
		t.GracefulRestartHelperMode = &v
	}
	if t.GracefulShutdown == nil {
		var v bool = false
		t.GracefulShutdown = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 3
		t.HelloInterval = &v
	}
	if t.Subscription == nil {
		var v uint32 = 100
		t.Subscription = &v
	}
	t.ClassTypeBw.PopulateDefaults()
	t.DbwDownThreshold.PopulateDefaults()
	t.DbwUpThreshold.PopulateDefaults()
	t.RefreshReduction.PopulateDefaults()
	t.TeDownThreshold.PopulateDefaults()
	t.TeUpThreshold.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Rsvp_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface.
func (*NokiaConf_Configure_Router_Rsvp_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw represents the /nokia-conf/configure/router/rsvp/interface/class-type-bw YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw struct {
	Ct0 *int32 `path:"ct0" module:"nokia-conf"`
	Ct1 *int32 `path:"ct1" module:"nokia-conf"`
	Ct2 *int32 `path:"ct2" module:"nokia-conf"`
	Ct3 *int32 `path:"ct3" module:"nokia-conf"`
	Ct4 *int32 `path:"ct4" module:"nokia-conf"`
	Ct5 *int32 `path:"ct5" module:"nokia-conf"`
	Ct6 *int32 `path:"ct6" module:"nokia-conf"`
	Ct7 *int32 `path:"ct7" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) IsYANGGoStruct() {}

// GetCt0 retrieves the value of the leaf Ct0 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct0 is set, it can
// safely use t.GetCt0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt0() int32 {
	if t == nil || t.Ct0 == nil {
		return 0
	}
	return *t.Ct0
}

// GetCt1 retrieves the value of the leaf Ct1 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct1 is set, it can
// safely use t.GetCt1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt1() int32 {
	if t == nil || t.Ct1 == nil {
		return 0
	}
	return *t.Ct1
}

// GetCt2 retrieves the value of the leaf Ct2 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct2 is set, it can
// safely use t.GetCt2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt2() int32 {
	if t == nil || t.Ct2 == nil {
		return 0
	}
	return *t.Ct2
}

// GetCt3 retrieves the value of the leaf Ct3 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct3 is set, it can
// safely use t.GetCt3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt3() int32 {
	if t == nil || t.Ct3 == nil {
		return 0
	}
	return *t.Ct3
}

// GetCt4 retrieves the value of the leaf Ct4 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct4 is set, it can
// safely use t.GetCt4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt4() int32 {
	if t == nil || t.Ct4 == nil {
		return 0
	}
	return *t.Ct4
}

// GetCt5 retrieves the value of the leaf Ct5 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct5 is set, it can
// safely use t.GetCt5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt5() int32 {
	if t == nil || t.Ct5 == nil {
		return 0
	}
	return *t.Ct5
}

// GetCt6 retrieves the value of the leaf Ct6 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct6 is set, it can
// safely use t.GetCt6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt6() int32 {
	if t == nil || t.Ct6 == nil {
		return 0
	}
	return *t.Ct6
}

// GetCt7 retrieves the value of the leaf Ct7 from the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct7 is set, it can
// safely use t.GetCt7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) GetCt7() int32 {
	if t == nil || t.Ct7 == nil {
		return 0
	}
	return *t.Ct7
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw.
func (*NokiaConf_Configure_Router_Rsvp_Interface_ClassTypeBw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold represents the /nokia-conf/configure/router/rsvp/interface/dbw-down-threshold YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold struct {
	Bw      *int32 `path:"bw" module:"nokia-conf"`
	Percent *int32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) GetPercent() int32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold.
func (*NokiaConf_Configure_Router_Rsvp_Interface_DbwDownThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold represents the /nokia-conf/configure/router/rsvp/interface/dbw-up-threshold YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold struct {
	Bw      *int32 `path:"bw" module:"nokia-conf"`
	Percent *int32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) GetPercent() int32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold.
func (*NokiaConf_Configure_Router_Rsvp_Interface_DbwUpThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction represents the /nokia-conf/configure/router/rsvp/interface/refresh-reduction YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction struct {
	ReliableDelivery *bool `path:"reliable-delivery" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) IsYANGGoStruct() {}

// GetReliableDelivery retrieves the value of the leaf ReliableDelivery from the NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReliableDelivery is set, it can
// safely use t.GetReliableDelivery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReliableDelivery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) GetReliableDelivery() bool {
	if t == nil || t.ReliableDelivery == nil {
		return false
	}
	return *t.ReliableDelivery
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReliableDelivery == nil {
		var v bool = false
		t.ReliableDelivery = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction.
func (*NokiaConf_Configure_Router_Rsvp_Interface_RefreshReduction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold represents the /nokia-conf/configure/router/rsvp/interface/te-down-threshold YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Value              []int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) GetValue() []int32 {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold.
func (*NokiaConf_Configure_Router_Rsvp_Interface_TeDownThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold represents the /nokia-conf/configure/router/rsvp/interface/te-up-threshold YANG schema element.
type NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Value              []int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) GetValue() []int32 {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold.
func (*NokiaConf_Configure_Router_Rsvp_Interface_TeUpThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_MsgPacing represents the /nokia-conf/configure/router/rsvp/msg-pacing YANG schema element.
type NokiaConf_Configure_Router_Rsvp_MsgPacing struct {
	MaxBurst *uint32 `path:"max-burst" module:"nokia-conf"`
	Period   *uint32 `path:"period" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_MsgPacing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_MsgPacing) IsYANGGoStruct() {}

// GetMaxBurst retrieves the value of the leaf MaxBurst from the NokiaConf_Configure_Router_Rsvp_MsgPacing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBurst is set, it can
// safely use t.GetMaxBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_MsgPacing) GetMaxBurst() uint32 {
	if t == nil || t.MaxBurst == nil {
		return 650
	}
	return *t.MaxBurst
}

// GetPeriod retrieves the value of the leaf Period from the NokiaConf_Configure_Router_Rsvp_MsgPacing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Period is set, it can
// safely use t.GetPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Period == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_MsgPacing) GetPeriod() uint32 {
	if t == nil || t.Period == nil {
		return 100
	}
	return *t.Period
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_MsgPacing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_MsgPacing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBurst == nil {
		var v uint32 = 650
		t.MaxBurst = &v
	}
	if t.Period == nil {
		var v uint32 = 100
		t.Period = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_MsgPacing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_MsgPacing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_MsgPacing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_MsgPacing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_MsgPacing.
func (*NokiaConf_Configure_Router_Rsvp_MsgPacing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate represents the /nokia-conf/configure/router/rsvp/te-threshold-update YANG schema element.
type NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate struct {
	OnCacFailure *bool   `path:"on-cac-failure" module:"nokia-conf"`
	UpdateTimer  *uint32 `path:"update-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) IsYANGGoStruct() {}

// GetOnCacFailure retrieves the value of the leaf OnCacFailure from the NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnCacFailure is set, it can
// safely use t.GetOnCacFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnCacFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) GetOnCacFailure() bool {
	if t == nil || t.OnCacFailure == nil {
		return false
	}
	return *t.OnCacFailure
}

// GetUpdateTimer retrieves the value of the leaf UpdateTimer from the NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateTimer is set, it can
// safely use t.GetUpdateTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) GetUpdateTimer() uint32 {
	if t == nil || t.UpdateTimer == nil {
		return 0
	}
	return *t.UpdateTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OnCacFailure == nil {
		var v bool = false
		t.OnCacFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate.
func (*NokiaConf_Configure_Router_Rsvp_TeThresholdUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting represents the /nokia-conf/configure/router/segment-routing YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	MaintenancePolicy  map[string]*NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy `path:"maintenance-policy" module:"nokia-conf"`
	SegmentRoutingV6   *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6             `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SrMpls             *NokiaConf_Configure_Router_SegmentRouting_SrMpls                       `path:"sr-mpls" module:"nokia-conf"`
	SrPolicies         *NokiaConf_Configure_Router_SegmentRouting_SrPolicies                   `path:"sr-policies" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting) IsYANGGoStruct() {}

// NewMaintenancePolicy creates a new entry in the MaintenancePolicy list of the
// NokiaConf_Configure_Router_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting) NewMaintenancePolicy(PolicyName string) (*NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaintenancePolicy == nil {
		t.MaintenancePolicy = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MaintenancePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MaintenancePolicy", key)
	}

	t.MaintenancePolicy[key] = &NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy{
		PolicyName: &PolicyName,
	}

	return t.MaintenancePolicy[key], nil
}

// RenameMaintenancePolicy renames an entry in the list MaintenancePolicy within
// the NokiaConf_Configure_Router_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting) RenameMaintenancePolicy(oldK, newK string) error {
	if _, ok := t.MaintenancePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in MaintenancePolicy", newK)
	}

	e, ok := t.MaintenancePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MaintenancePolicy", oldK)
	}
	e.PolicyName = &newK

	t.MaintenancePolicy[newK] = e
	delete(t.MaintenancePolicy, oldK)
	return nil
}

// GetOrCreateMaintenancePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetOrCreateMaintenancePolicy(PolicyName string) *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy {

	key := PolicyName

	if v, ok := t.MaintenancePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMaintenancePolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMaintenancePolicy got unexpected error: %v", err))
	}
	return v
}

// GetMaintenancePolicy retrieves the value with the specified key from
// the MaintenancePolicy map field of NokiaConf_Configure_Router_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetMaintenancePolicy(PolicyName string) *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.MaintenancePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteMaintenancePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting) DeleteMaintenancePolicy(PolicyName string) {
	key := PolicyName

	delete(t.MaintenancePolicy, key)
}

// AppendMaintenancePolicy appends the supplied NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy struct to the
// list MaintenancePolicy of NokiaConf_Configure_Router_SegmentRouting. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting) AppendMaintenancePolicy(v *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaintenancePolicy == nil {
		t.MaintenancePolicy = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy)
	}

	if _, ok := t.MaintenancePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list MaintenancePolicy %v", key)
	}

	t.MaintenancePolicy[key] = v
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSrMpls retrieves the value of the SrMpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetOrCreateSrMpls() *NokiaConf_Configure_Router_SegmentRouting_SrMpls {
	if t.SrMpls != nil {
		return t.SrMpls
	}
	t.SrMpls = &NokiaConf_Configure_Router_SegmentRouting_SrMpls{}
	return t.SrMpls
}

// GetOrCreateSrPolicies retrieves the value of the SrPolicies field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetOrCreateSrPolicies() *NokiaConf_Configure_Router_SegmentRouting_SrPolicies {
	if t.SrPolicies != nil {
		return t.SrPolicies
	}
	t.SrPolicies = &NokiaConf_Configure_Router_SegmentRouting_SrPolicies{}
	return t.SrPolicies
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Router_SegmentRouting. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetSegmentRoutingV6() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSrMpls returns the value of the SrMpls struct pointer
// from NokiaConf_Configure_Router_SegmentRouting. If the receiver or the field SrMpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetSrMpls() *NokiaConf_Configure_Router_SegmentRouting_SrMpls {
	if t != nil && t.SrMpls != nil {
		return t.SrMpls
	}
	return nil
}

// GetSrPolicies returns the value of the SrPolicies struct pointer
// from NokiaConf_Configure_Router_SegmentRouting. If the receiver or the field SrPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetSrPolicies() *NokiaConf_Configure_Router_SegmentRouting_SrPolicies {
	if t != nil && t.SrPolicies != nil {
		return t.SrPolicies
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SegmentRoutingV6.PopulateDefaults()
	t.SrMpls.PopulateDefaults()
	t.SrPolicies.PopulateDefaults()
	for _, e := range t.MaintenancePolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting.
func (*NokiaConf_Configure_Router_SegmentRouting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy represents the /nokia-conf/configure/router/segment-routing/maintenance-policy YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy struct {
	AdminState         E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                                              `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate        *string                                                            `path:"bfd-template" module:"nokia-conf"`
	HoldDownTimer      *uint32                                                            `path:"hold-down-timer" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy_Mode `path:"mode" module:"nokia-conf"`
	PolicyName         *string                                                            `path:"policy-name" module:"nokia-conf"`
	RevertTimer        *uint32                                                            `path:"revert-timer" module:"nokia-conf"`
	Threshold          *uint32                                                            `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetHoldDownTimer() uint32 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetMode() E_NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy_Mode_none
	}
	return t.Mode
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetRevertTimer retrieves the value of the leaf RevertTimer from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTimer is set, it can
// safely use t.GetRevertTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetRevertTimer() uint32 {
	if t == nil || t.RevertTimer == nil {
		return 0
	}
	return *t.RevertTimer
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.HoldDownTimer == nil {
		var v uint32 = 0
		t.HoldDownTimer = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy_Mode_none
	}
	if t.RevertTimer == nil {
		var v uint32 = 0
		t.RevertTimer = &v
	}
	if t.Threshold == nil {
		var v uint32 = 1
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy.
func (*NokiaConf_Configure_Router_SegmentRouting_MaintenancePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 struct {
	ApplyGroups         []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	BaseRoutingInstance *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance `path:"base-routing-instance" module:"nokia-conf"`
	Locator             map[string]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator  `path:"locator" module:"nokia-conf"`
	OriginationFpe      []uint32                                                                        `path:"origination-fpe" module:"nokia-conf"`
	SourceAddress       *string                                                                         `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) IsYANGGoStruct() {}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) NewLocator(LocatorName string) (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetLocator(LocatorName string) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator struct to the
// list Locator of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) AppendLocator(v *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetOrCreateBaseRoutingInstance retrieves the value of the BaseRoutingInstance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetOrCreateBaseRoutingInstance() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance {
	if t.BaseRoutingInstance != nil {
		return t.BaseRoutingInstance
	}
	t.BaseRoutingInstance = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance{}
	return t.BaseRoutingInstance
}

// GetBaseRoutingInstance returns the value of the BaseRoutingInstance struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6. If the receiver or the field BaseRoutingInstance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetBaseRoutingInstance() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance {
	if t != nil && t.BaseRoutingInstance != nil {
		return t.BaseRoutingInstance
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetOriginationFpe retrieves the value of the leaf OriginationFpe from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginationFpe is set, it can
// safely use t.GetOriginationFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginationFpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetOriginationFpe() []uint32 {
	if t == nil || t.OriginationFpe == nil {
		return nil
	}
	return t.OriginationFpe
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BaseRoutingInstance.PopulateDefaults()
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance struct {
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Locator            map[string]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator `path:"locator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) IsYANGGoStruct() {
}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) NewLocator(LocatorName string) (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) GetLocator(LocatorName string) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator struct to the
// list Locator of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) AppendLocator(v *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Function           *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function `path:"function" module:"nokia-conf"`
	LocatorName        *string                                                                                          `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) IsYANGGoStruct() {
}

// GetOrCreateFunction retrieves the value of the Function field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetOrCreateFunction() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function {
	if t.Function != nil {
		return t.Function
	}
	t.Function = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function{}
	return t.Function
}

// GetFunction returns the value of the Function struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator. If the receiver or the field Function is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetFunction() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function {
	if t != nil && t.Function != nil {
		return t.Function
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Function.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct {
	End              map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End                                                                                                                            `path:"end" module:"nokia-conf"`
	EndDt4           *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4                                                                                                                                    `path:"end-dt4" module:"nokia-conf" yangPresence:"true"`
	EndDt46          *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46                                                                                                                                   `path:"end-dt46" module:"nokia-conf" yangPresence:"true"`
	EndDt6           *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6                                                                                                                                    `path:"end-dt6" module:"nokia-conf" yangPresence:"true"`
	EndX             map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX                                                                                                                           `path:"end-x" module:"nokia-conf"`
	EndXAutoAllocate map[NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate `path:"end-x-auto-allocate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) IsYANGGoStruct() {
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key represents the key for list EndXAutoAllocate of element /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key struct {
	SrhMode    E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode    `path:"srh-mode"`
	Protection E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection `path:"protection"`
}

// NewEnd creates a new entry in the End list of the
// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) NewEnd(Value uint32) (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.End == nil {
		t.End = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.End[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list End", key)
	}

	t.End[key] = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End{
		Value: &Value,
	}

	return t.End[key], nil
}

// RenameEnd renames an entry in the list End within
// the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) RenameEnd(oldK, newK uint32) error {
	if _, ok := t.End[newK]; ok {
		return fmt.Errorf("key %v already exists in End", newK)
	}

	e, ok := t.End[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in End", oldK)
	}
	e.Value = &newK

	t.End[newK] = e
	delete(t.End, oldK)
	return nil
}

// GetOrCreateEnd retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEnd(Value uint32) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End {

	key := Value

	if v, ok := t.End[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEnd(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEnd got unexpected error: %v", err))
	}
	return v
}

// GetEnd retrieves the value with the specified key from
// the End map field of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEnd(Value uint32) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.End[key]; ok {
		return lm
	}
	return nil
}

// DeleteEnd deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) DeleteEnd(Value uint32) {
	key := Value

	delete(t.End, key)
}

// AppendEnd appends the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End struct to the
// list End of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) AppendEnd(v *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.End == nil {
		t.End = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End)
	}

	if _, ok := t.End[key]; ok {
		return fmt.Errorf("duplicate key for list End %v", key)
	}

	t.End[key] = v
	return nil
}

// NewEndX creates a new entry in the EndX list of the
// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) NewEndX(Value uint32) (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndX == nil {
		t.EndX = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EndX[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EndX", key)
	}

	t.EndX[key] = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX{
		Value: &Value,
	}

	return t.EndX[key], nil
}

// RenameEndX renames an entry in the list EndX within
// the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) RenameEndX(oldK, newK uint32) error {
	if _, ok := t.EndX[newK]; ok {
		return fmt.Errorf("key %v already exists in EndX", newK)
	}

	e, ok := t.EndX[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EndX", oldK)
	}
	e.Value = &newK

	t.EndX[newK] = e
	delete(t.EndX, oldK)
	return nil
}

// GetOrCreateEndX retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndX(Value uint32) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX {

	key := Value

	if v, ok := t.EndX[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndX(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndX got unexpected error: %v", err))
	}
	return v
}

// GetEndX retrieves the value with the specified key from
// the EndX map field of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndX(Value uint32) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.EndX[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndX deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) DeleteEndX(Value uint32) {
	key := Value

	delete(t.EndX, key)
}

// AppendEndX appends the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX struct to the
// list EndX of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) AppendEndX(v *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndX == nil {
		t.EndX = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX)
	}

	if _, ok := t.EndX[key]; ok {
		return fmt.Errorf("duplicate key for list EndX %v", key)
	}

	t.EndX[key] = v
	return nil
}

// NewEndXAutoAllocate creates a new entry in the EndXAutoAllocate list of the
// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) NewEndXAutoAllocate(SrhMode E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode, Protection E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection) (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndXAutoAllocate == nil {
		t.EndXAutoAllocate = make(map[NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate)
	}

	key := NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EndXAutoAllocate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EndXAutoAllocate", key)
	}

	t.EndXAutoAllocate[key] = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	return t.EndXAutoAllocate[key], nil
}

// RenameEndXAutoAllocate renames an entry in the list EndXAutoAllocate within
// the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) RenameEndXAutoAllocate(oldK, newK NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key) error {
	if _, ok := t.EndXAutoAllocate[newK]; ok {
		return fmt.Errorf("key %v already exists in EndXAutoAllocate", newK)
	}

	e, ok := t.EndXAutoAllocate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EndXAutoAllocate", oldK)
	}
	e.SrhMode = newK.SrhMode
	e.Protection = newK.Protection

	t.EndXAutoAllocate[newK] = e
	delete(t.EndXAutoAllocate, oldK)
	return nil
}

// GetOrCreateEndXAutoAllocate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndXAutoAllocate(SrhMode E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode, Protection E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate {

	key := NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	if v, ok := t.EndXAutoAllocate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndXAutoAllocate(SrhMode, Protection)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndXAutoAllocate got unexpected error: %v", err))
	}
	return v
}

// GetEndXAutoAllocate retrieves the value with the specified key from
// the EndXAutoAllocate map field of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndXAutoAllocate(SrhMode E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode, Protection E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection) *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	if lm, ok := t.EndXAutoAllocate[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndXAutoAllocate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) DeleteEndXAutoAllocate(SrhMode E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode, Protection E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection) {
	key := NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	delete(t.EndXAutoAllocate, key)
}

// AppendEndXAutoAllocate appends the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate struct to the
// list EndXAutoAllocate of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) AppendEndXAutoAllocate(v *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) error {
	key := NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    v.SrhMode,
		Protection: v.Protection,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndXAutoAllocate == nil {
		t.EndXAutoAllocate = make(map[NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key]*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate)
	}

	if _, ok := t.EndXAutoAllocate[key]; ok {
		return fmt.Errorf("duplicate key for list EndXAutoAllocate %v", key)
	}

	t.EndXAutoAllocate[key] = v
	return nil
}

// GetOrCreateEndDt4 retrieves the value of the EndDt4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndDt4() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 {
	if t.EndDt4 != nil {
		return t.EndDt4
	}
	t.EndDt4 = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4{}
	return t.EndDt4
}

// GetOrCreateEndDt46 retrieves the value of the EndDt46 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndDt46() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 {
	if t.EndDt46 != nil {
		return t.EndDt46
	}
	t.EndDt46 = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46{}
	return t.EndDt46
}

// GetOrCreateEndDt6 retrieves the value of the EndDt6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndDt6() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 {
	if t.EndDt6 != nil {
		return t.EndDt6
	}
	t.EndDt6 = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6{}
	return t.EndDt6
}

// GetEndDt4 returns the value of the EndDt4 struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver or the field EndDt4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndDt4() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 {
	if t != nil && t.EndDt4 != nil {
		return t.EndDt4
	}
	return nil
}

// GetEndDt46 returns the value of the EndDt46 struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver or the field EndDt46 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndDt46() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 {
	if t != nil && t.EndDt46 != nil {
		return t.EndDt46
	}
	return nil
}

// GetEndDt6 returns the value of the EndDt6 struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver or the field EndDt6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndDt6() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 {
	if t != nil && t.EndDt6 != nil {
		return t.EndDt6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EndDt4.PopulateDefaults()
	t.EndDt46.PopulateDefaults()
	t.EndDt6.PopulateDefaults()
	for _, e := range t.End {
		e.PopulateDefaults()
	}
	for _, e := range t.EndX {
		e.PopulateDefaults()
	}
	for _, e := range t.EndXAutoAllocate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End struct {
	ApplyGroups        []string                                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	SrhMode            E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode `path:"srh-mode" module:"nokia-conf"`
	Value              *uint32                                                                                                       `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSrhMode retrieves the value of the leaf SrhMode from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrhMode is set, it can
// safely use t.GetSrhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) GetSrhMode() E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode {
	if t == nil || t.SrhMode == 0 {
		return NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode_psp
	}
	return t.SrhMode
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SrhMode == 0 {
		t.SrhMode = NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode_psp
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-dt4 YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-dt46 YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-dt6 YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-x YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX struct {
	ApplyGroups        []string                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string                                                                                                           `path:"interface-name" module:"nokia-conf"`
	Protection         E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection `path:"protection" module:"nokia-conf"`
	SrhMode            E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode    `path:"srh-mode" module:"nokia-conf"`
	Value              *uint32                                                                                                           `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetProtection retrieves the value of the leaf Protection from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protection is set, it can
// safely use t.GetProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetProtection() E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection {
	if t == nil || t.Protection == 0 {
		return NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection_protected
	}
	return t.Protection
}

// GetSrhMode retrieves the value of the leaf SrhMode from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrhMode is set, it can
// safely use t.GetSrhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetSrhMode() E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode {
	if t == nil || t.SrhMode == 0 {
		return NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode_psp
	}
	return t.SrhMode
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Protection == 0 {
		t.Protection = NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection_protected
	}
	if t.SrhMode == 0 {
		t.SrhMode = NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode_psp
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-x-auto-allocate YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate struct {
	Protection E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection `path:"protection" module:"nokia-conf"`
	SrhMode    E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode    `path:"srh-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) IsYANGGoStruct() {
}

// GetProtection retrieves the value of the leaf Protection from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protection is set, it can
// safely use t.GetProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) GetProtection() E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection {
	if t == nil || t.Protection == 0 {
		return 0
	}
	return t.Protection
}

// GetSrhMode retrieves the value of the leaf SrhMode from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrhMode is set, it can
// safely use t.GetSrhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) GetSrhMode() E_NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode {
	if t == nil || t.SrhMode == 0 {
		return 0
	}
	return t.SrhMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"protection": t.Protection,
		"srh-mode":   t.SrhMode,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/locator YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator struct {
	AdminState         E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	Algorithm          *uint32                                                                            `path:"algorithm" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BlockLength        *uint32                                                                            `path:"block-length" module:"nokia-conf"`
	FunctionLength     *uint32                                                                            `path:"function-length" module:"nokia-conf"`
	LocatorName        *string                                                                            `path:"locator-name" module:"nokia-conf"`
	Prefix             *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix         `path:"prefix" module:"nokia-conf"`
	StaticFunction     *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction `path:"static-function" module:"nokia-conf"`
	TerminationFpe     []uint32                                                                           `path:"termination-fpe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) IsYANGGoStruct() {}

// GetOrCreatePrefix retrieves the value of the Prefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetOrCreatePrefix() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix {
	if t.Prefix != nil {
		return t.Prefix
	}
	t.Prefix = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix{}
	return t.Prefix
}

// GetOrCreateStaticFunction retrieves the value of the StaticFunction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetOrCreateStaticFunction() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction {
	if t.StaticFunction != nil {
		return t.StaticFunction
	}
	t.StaticFunction = &NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction{}
	return t.StaticFunction
}

// GetPrefix returns the value of the Prefix struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator. If the receiver or the field Prefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetPrefix() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix {
	if t != nil && t.Prefix != nil {
		return t.Prefix
	}
	return nil
}

// GetStaticFunction returns the value of the StaticFunction struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator. If the receiver or the field StaticFunction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetStaticFunction() *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction {
	if t != nil && t.StaticFunction != nil {
		return t.StaticFunction
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetAlgorithm() uint32 {
	if t == nil || t.Algorithm == nil {
		return 0
	}
	return *t.Algorithm
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBlockLength retrieves the value of the leaf BlockLength from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockLength is set, it can
// safely use t.GetBlockLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetBlockLength() uint32 {
	if t == nil || t.BlockLength == nil {
		return 0
	}
	return *t.BlockLength
}

// GetFunctionLength retrieves the value of the leaf FunctionLength from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FunctionLength is set, it can
// safely use t.GetFunctionLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FunctionLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetFunctionLength() uint32 {
	if t == nil || t.FunctionLength == nil {
		return 20
	}
	return *t.FunctionLength
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// GetTerminationFpe retrieves the value of the leaf TerminationFpe from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TerminationFpe is set, it can
// safely use t.GetTerminationFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TerminationFpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) GetTerminationFpe() []uint32 {
	if t == nil || t.TerminationFpe == nil {
		return nil
	}
	return t.TerminationFpe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BlockLength == nil {
		var v uint32 = 0
		t.BlockLength = &v
	}
	if t.FunctionLength == nil {
		var v uint32 = 20
		t.FunctionLength = &v
	}
	t.Prefix.PopulateDefaults()
	t.StaticFunction.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/locator/prefix YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction represents the /nokia-conf/configure/router/segment-routing/segment-routing-v6/locator/static-function YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction struct {
	LabelBlock *string `path:"label-block" module:"nokia-conf"`
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) IsYANGGoStruct() {
}

// GetLabelBlock retrieves the value of the leaf LabelBlock from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelBlock is set, it can
// safely use t.GetLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) GetLabelBlock() string {
	if t == nil || t.LabelBlock == nil {
		return ""
	}
	return *t.LabelBlock
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 1
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 1
		t.MaxEntries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction.
func (*NokiaConf_Configure_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrMpls represents the /nokia-conf/configure/router/segment-routing/sr-mpls YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrMpls struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixSids         map[string]*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids `path:"prefix-sids" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrMpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls) IsYANGGoStruct() {}

// NewPrefixSids creates a new entry in the PrefixSids list of the
// NokiaConf_Configure_Router_SegmentRouting_SrMpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) NewPrefixSids(InterfaceName string) (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSids == nil {
		t.PrefixSids = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSids[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSids", key)
	}

	t.PrefixSids[key] = &NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids{
		InterfaceName: &InterfaceName,
	}

	return t.PrefixSids[key], nil
}

// RenamePrefixSids renames an entry in the list PrefixSids within
// the NokiaConf_Configure_Router_SegmentRouting_SrMpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) RenamePrefixSids(oldK, newK string) error {
	if _, ok := t.PrefixSids[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSids", newK)
	}

	e, ok := t.PrefixSids[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSids", oldK)
	}
	e.InterfaceName = &newK

	t.PrefixSids[newK] = e
	delete(t.PrefixSids, oldK)
	return nil
}

// GetOrCreatePrefixSids retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrMpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) GetOrCreatePrefixSids(InterfaceName string) *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids {

	key := InterfaceName

	if v, ok := t.PrefixSids[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSids(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSids got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSids retrieves the value with the specified key from
// the PrefixSids map field of NokiaConf_Configure_Router_SegmentRouting_SrMpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) GetPrefixSids(InterfaceName string) *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.PrefixSids[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSids deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrMpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) DeletePrefixSids(InterfaceName string) {
	key := InterfaceName

	delete(t.PrefixSids, key)
}

// AppendPrefixSids appends the supplied NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids struct to the
// list PrefixSids of NokiaConf_Configure_Router_SegmentRouting_SrMpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) AppendPrefixSids(v *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSids == nil {
		t.PrefixSids = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids)
	}

	if _, ok := t.PrefixSids[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSids %v", key)
	}

	t.PrefixSids[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrMpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrMpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrMpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PrefixSids {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrMpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrMpls.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids represents the /nokia-conf/configure/router/segment-routing/sr-mpls/prefix-sids YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string                                                              `path:"interface-name" module:"nokia-conf"`
	Ipv4Sid            *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid `path:"ipv4-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv6Sid            *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid `path:"ipv6-sid" module:"nokia-conf" yangPresence:"true"`
	NodeSid            *bool                                                                `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) IsYANGGoStruct() {}

// GetOrCreateIpv4Sid retrieves the value of the Ipv4Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetOrCreateIpv4Sid() *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid {
	if t.Ipv4Sid != nil {
		return t.Ipv4Sid
	}
	t.Ipv4Sid = &NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid{}
	return t.Ipv4Sid
}

// GetOrCreateIpv6Sid retrieves the value of the Ipv6Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetOrCreateIpv6Sid() *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid {
	if t.Ipv6Sid != nil {
		return t.Ipv6Sid
	}
	t.Ipv6Sid = &NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid{}
	return t.Ipv6Sid
}

// GetIpv4Sid returns the value of the Ipv4Sid struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids. If the receiver or the field Ipv4Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetIpv4Sid() *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid {
	if t != nil && t.Ipv4Sid != nil {
		return t.Ipv4Sid
	}
	return nil
}

// GetIpv6Sid returns the value of the Ipv6Sid struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids. If the receiver or the field Ipv6Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetIpv6Sid() *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid {
	if t != nil && t.Ipv6Sid != nil {
		return t.Ipv6Sid
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return true
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NodeSid == nil {
		var v bool = true
		t.NodeSid = &v
	}
	t.Ipv4Sid.PopulateDefaults()
	t.Ipv6Sid.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid represents the /nokia-conf/configure/router/segment-routing/sr-mpls/prefix-sids/ipv4-sid YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid represents the /nokia-conf/configure/router/segment-routing/sr-mpls/prefix-sids/ipv6-sid YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid.
func (*NokiaConf_Configure_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrPolicies represents the /nokia-conf/configure/router/segment-routing/sr-policies YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrPolicies struct {
	AdminState         E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	EgressStatistics   *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics        `path:"egress-statistics" module:"nokia-conf" yangPresence:"true"`
	IngressStatistics  *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics       `path:"ingress-statistics" module:"nokia-conf" yangPresence:"true"`
	ReservedLabelBlock *string                                                                       `path:"reserved-label-block" module:"nokia-conf"`
	StaticPolicy       map[string]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy `path:"static-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies) IsYANGGoStruct() {}

// NewStaticPolicy creates a new entry in the StaticPolicy list of the
// NokiaConf_Configure_Router_SegmentRouting_SrPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) NewStaticPolicy(Name string) (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicy == nil {
		t.StaticPolicy = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticPolicy", key)
	}

	t.StaticPolicy[key] = &NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy{
		Name: &Name,
	}

	return t.StaticPolicy[key], nil
}

// RenameStaticPolicy renames an entry in the list StaticPolicy within
// the NokiaConf_Configure_Router_SegmentRouting_SrPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) RenameStaticPolicy(oldK, newK string) error {
	if _, ok := t.StaticPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticPolicy", newK)
	}

	e, ok := t.StaticPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticPolicy", oldK)
	}
	e.Name = &newK

	t.StaticPolicy[newK] = e
	delete(t.StaticPolicy, oldK)
	return nil
}

// GetOrCreateStaticPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetOrCreateStaticPolicy(Name string) *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy {

	key := Name

	if v, ok := t.StaticPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticPolicy got unexpected error: %v", err))
	}
	return v
}

// GetStaticPolicy retrieves the value with the specified key from
// the StaticPolicy map field of NokiaConf_Configure_Router_SegmentRouting_SrPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetStaticPolicy(Name string) *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.StaticPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrPolicies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) DeleteStaticPolicy(Name string) {
	key := Name

	delete(t.StaticPolicy, key)
}

// AppendStaticPolicy appends the supplied NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy struct to the
// list StaticPolicy of NokiaConf_Configure_Router_SegmentRouting_SrPolicies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) AppendStaticPolicy(v *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicy == nil {
		t.StaticPolicy = make(map[string]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy)
	}

	if _, ok := t.StaticPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list StaticPolicy %v", key)
	}

	t.StaticPolicy[key] = v
	return nil
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetOrCreateEgressStatistics() *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetOrCreateIngressStatistics() *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics{}
	return t.IngressStatistics
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SrPolicies. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetEgressStatistics() *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Router_SegmentRouting_SrPolicies. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetIngressStatistics() *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetReservedLabelBlock retrieves the value of the leaf ReservedLabelBlock from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedLabelBlock is set, it can
// safely use t.GetReservedLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) GetReservedLabelBlock() string {
	if t == nil || t.ReservedLabelBlock == nil {
		return ""
	}
	return *t.ReservedLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	for _, e := range t.StaticPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrPolicies.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics represents the /nokia-conf/configure/router/segment-routing/sr-policies/egress-statistics YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_EgressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics represents the /nokia-conf/configure/router/segment-routing/sr-policies/ingress-statistics YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_IngressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy represents the /nokia-conf/configure/router/segment-routing/sr-policies/static-policy YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy struct {
	AdminState         E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	BindingSid         *uint32                                                                                   `path:"binding-sid" module:"nokia-conf"`
	Color              *int64                                                                                    `path:"color" module:"nokia-conf"`
	Distinguisher      *uint32                                                                                   `path:"distinguisher" module:"nokia-conf"`
	Endpoint           *string                                                                                   `path:"endpoint" module:"nokia-conf"`
	HeadEnd            NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_HeadEnd_Union           `path:"head-end" module:"nokia-conf"`
	MaintenancePolicy  *string                                                                                   `path:"maintenance-policy" module:"nokia-conf"`
	Name               *string                                                                                   `path:"name" module:"nokia-conf"`
	Preference         *uint32                                                                                   `path:"preference" module:"nokia-conf"`
	SegmentList        map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList `path:"segment-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) IsYANGGoStruct() {}

// NewSegmentList creates a new entry in the SegmentList list of the
// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) NewSegmentList(SegListIndex uint32) (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList)
	}

	key := SegListIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList{
		SegListIndex: &SegListIndex,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) RenameSegmentList(oldK, newK uint32) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.SegListIndex = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetOrCreateSegmentList(SegListIndex uint32) *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList {

	key := SegListIndex

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(SegListIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetSegmentList(SegListIndex uint32) *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList {

	if t == nil {
		return nil
	}

	key := SegListIndex

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) DeleteSegmentList(SegListIndex uint32) {
	key := SegListIndex

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct to the
// list SegmentList of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) AppendSegmentList(v *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) error {
	if v.SegListIndex == nil {
		return fmt.Errorf("invalid nil key received for SegListIndex")
	}

	key := *v.SegListIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBindingSid retrieves the value of the leaf BindingSid from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingSid is set, it can
// safely use t.GetBindingSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetBindingSid() uint32 {
	if t == nil || t.BindingSid == nil {
		return 0
	}
	return *t.BindingSid
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetDistinguisher() uint32 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetHeadEnd retrieves the value of the leaf HeadEnd from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HeadEnd is set, it can
// safely use t.GetHeadEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HeadEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetHeadEnd() NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_HeadEnd_Union {
	if t == nil || t.HeadEnd == nil {
		return nil
	}
	return t.HeadEnd
}

// GetMaintenancePolicy retrieves the value of the leaf MaintenancePolicy from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaintenancePolicy is set, it can
// safely use t.GetMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetMaintenancePolicy() string {
	if t == nil || t.MaintenancePolicy == nil {
		return ""
	}
	return *t.MaintenancePolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	for _, e := range t.SegmentList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList represents the /nokia-conf/configure/router/segment-routing/sr-policies/static-policy/segment-list YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	SegListIndex       *uint32                                                                                           `path:"seg-list-index" module:"nokia-conf"`
	Segment            map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment `path:"segment" module:"nokia-conf"`
	Weight             *uint32                                                                                           `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) IsYANGGoStruct() {
}

// NewSegment creates a new entry in the Segment list of the
// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) NewSegment(SegmentIndex uint32) (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment)
	}

	key := SegmentIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Segment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Segment", key)
	}

	t.Segment[key] = &NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment{
		SegmentIndex: &SegmentIndex,
	}

	return t.Segment[key], nil
}

// RenameSegment renames an entry in the list Segment within
// the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) RenameSegment(oldK, newK uint32) error {
	if _, ok := t.Segment[newK]; ok {
		return fmt.Errorf("key %v already exists in Segment", newK)
	}

	e, ok := t.Segment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Segment", oldK)
	}
	e.SegmentIndex = &newK

	t.Segment[newK] = e
	delete(t.Segment, oldK)
	return nil
}

// GetOrCreateSegment retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetOrCreateSegment(SegmentIndex uint32) *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment {

	key := SegmentIndex

	if v, ok := t.Segment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegment(SegmentIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegment got unexpected error: %v", err))
	}
	return v
}

// GetSegment retrieves the value with the specified key from
// the Segment map field of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetSegment(SegmentIndex uint32) *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment {

	if t == nil {
		return nil
	}

	key := SegmentIndex

	if lm, ok := t.Segment[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegment deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) DeleteSegment(SegmentIndex uint32) {
	key := SegmentIndex

	delete(t.Segment, key)
}

// AppendSegment appends the supplied NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment struct to the
// list Segment of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) AppendSegment(v *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) error {
	if v.SegmentIndex == nil {
		return fmt.Errorf("invalid nil key received for SegmentIndex")
	}

	key := *v.SegmentIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint32]*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment)
	}

	if _, ok := t.Segment[key]; ok {
		return fmt.Errorf("duplicate key for list Segment %v", key)
	}

	t.Segment[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSegListIndex retrieves the value of the leaf SegListIndex from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegListIndex is set, it can
// safely use t.GetSegListIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegListIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetSegListIndex() uint32 {
	if t == nil || t.SegListIndex == nil {
		return 0
	}
	return *t.SegListIndex
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Weight == nil {
		var v uint32 = 1
		t.Weight = &v
	}
	for _, e := range t.Segment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SegListIndex == nil {
		return nil, fmt.Errorf("nil value for key SegListIndex")
	}

	return map[string]interface{}{
		"seg-list-index": *t.SegListIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment represents the /nokia-conf/configure/router/segment-routing/sr-policies/static-policy/segment-list/segment YANG schema element.
type NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	MplsLabel          *uint32  `path:"mpls-label" module:"nokia-conf"`
	SegmentIndex       *uint32  `path:"segment-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) GetMplsLabel() uint32 {
	if t == nil || t.MplsLabel == nil {
		return 0
	}
	return *t.MplsLabel
}

// GetSegmentIndex retrieves the value of the leaf SegmentIndex from the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentIndex is set, it can
// safely use t.GetSegmentIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) GetSegmentIndex() uint32 {
	if t == nil || t.SegmentIndex == nil {
		return 0
	}
	return *t.SegmentIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SegmentIndex == nil {
		return nil, fmt.Errorf("nil value for key SegmentIndex")
	}

	return map[string]interface{}{
		"segment-index": *t.SegmentIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment.
func (*NokiaConf_Configure_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SfmOverload represents the /nokia-conf/configure/router/sfm-overload YANG schema element.
type NokiaConf_Configure_Router_SfmOverload struct {
	HoldoffTime *uint32 `path:"holdoff-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SfmOverload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SfmOverload) IsYANGGoStruct() {}

// GetHoldoffTime retrieves the value of the leaf HoldoffTime from the NokiaConf_Configure_Router_SfmOverload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldoffTime is set, it can
// safely use t.GetHoldoffTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldoffTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SfmOverload) GetHoldoffTime() uint32 {
	if t == nil || t.HoldoffTime == nil {
		return 0
	}
	return *t.HoldoffTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SfmOverload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SfmOverload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SfmOverload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SfmOverload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SfmOverload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SfmOverload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SfmOverload.
func (*NokiaConf_Configure_Router_SfmOverload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SgtQos represents the /nokia-conf/configure/router/sgt-qos YANG schema element.
type NokiaConf_Configure_Router_SgtQos struct {
	Dot1P *NokiaConf_Configure_Router_SgtQos_Dot1P `path:"dot1p" module:"nokia-conf"`
	Dscp  *NokiaConf_Configure_Router_SgtQos_Dscp  `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SgtQos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SgtQos) IsYANGGoStruct() {}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SgtQos) GetOrCreateDot1P() *NokiaConf_Configure_Router_SgtQos_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Router_SgtQos_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_SgtQos) GetOrCreateDscp() *NokiaConf_Configure_Router_SgtQos_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Router_SgtQos_Dscp{}
	return t.Dscp
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Router_SgtQos. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SgtQos) GetDot1P() *NokiaConf_Configure_Router_SgtQos_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Router_SgtQos. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_SgtQos) GetDscp() *NokiaConf_Configure_Router_SgtQos_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SgtQos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SgtQos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1P.PopulateDefaults()
	t.Dscp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SgtQos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SgtQos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SgtQos.
func (*NokiaConf_Configure_Router_SgtQos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SgtQos_Dot1P represents the /nokia-conf/configure/router/sgt-qos/dot1p YANG schema element.
type NokiaConf_Configure_Router_SgtQos_Dot1P struct {
	Application map[E_NokiaTypesRouter_Dot1PAppName]*NokiaConf_Configure_Router_SgtQos_Dot1P_Application `path:"application" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SgtQos_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SgtQos_Dot1P) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Router_SgtQos_Dot1P struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) NewApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) (*NokiaConf_Configure_Router_SgtQos_Dot1P_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_Dot1PAppName]*NokiaConf_Configure_Router_SgtQos_Dot1P_Application)
	}

	key := Dot1PAppName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Router_SgtQos_Dot1P_Application{
		Dot1PAppName: Dot1PAppName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Router_SgtQos_Dot1P struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) RenameApplication(oldK, newK E_NokiaTypesRouter_Dot1PAppName) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.Dot1PAppName = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SgtQos_Dot1P. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) GetOrCreateApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) *NokiaConf_Configure_Router_SgtQos_Dot1P_Application {

	key := Dot1PAppName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(Dot1PAppName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Router_SgtQos_Dot1P. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) GetApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) *NokiaConf_Configure_Router_SgtQos_Dot1P_Application {

	if t == nil {
		return nil
	}

	key := Dot1PAppName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SgtQos_Dot1P. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) DeleteApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) {
	key := Dot1PAppName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Router_SgtQos_Dot1P_Application struct to the
// list Application of NokiaConf_Configure_Router_SgtQos_Dot1P. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SgtQos_Dot1P_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) AppendApplication(v *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) error {
	key := v.Dot1PAppName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_Dot1PAppName]*NokiaConf_Configure_Router_SgtQos_Dot1P_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SgtQos_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SgtQos_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SgtQos_Dot1P.
func (*NokiaConf_Configure_Router_SgtQos_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SgtQos_Dot1P_Application represents the /nokia-conf/configure/router/sgt-qos/dot1p/application YANG schema element.
type NokiaConf_Configure_Router_SgtQos_Dot1P_Application struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1P              NokiaConf_Configure_Router_SgtQos_Dot1P_Application_Dot1P_Union `path:"dot1p" module:"nokia-conf"`
	Dot1PAppName       E_NokiaTypesRouter_Dot1PAppName                                 `path:"dot1p-app-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SgtQos_Dot1P_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SgtQos_Dot1P_Application) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_Router_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) GetDot1P() NokiaConf_Configure_Router_SgtQos_Dot1P_Application_Dot1P_Union {
	if t == nil || t.Dot1P == nil {
		return nil
	}
	return t.Dot1P
}

// GetDot1PAppName retrieves the value of the leaf Dot1PAppName from the NokiaConf_Configure_Router_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PAppName is set, it can
// safely use t.GetDot1PAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PAppName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) GetDot1PAppName() E_NokiaTypesRouter_Dot1PAppName {
	if t == nil || t.Dot1PAppName == 0 {
		return 0
	}
	return t.Dot1PAppName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SgtQos_Dot1P_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SgtQos_Dot1P_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-app-name": t.Dot1PAppName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SgtQos_Dot1P_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SgtQos_Dot1P_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SgtQos_Dot1P_Application.
func (*NokiaConf_Configure_Router_SgtQos_Dot1P_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SgtQos_Dscp represents the /nokia-conf/configure/router/sgt-qos/dscp YANG schema element.
type NokiaConf_Configure_Router_SgtQos_Dscp struct {
	Application map[E_NokiaTypesRouter_DscpAppName]*NokiaConf_Configure_Router_SgtQos_Dscp_Application `path:"application" module:"nokia-conf"`
	DscpMap     map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap           `path:"dscp-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SgtQos_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SgtQos_Dscp) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Router_SgtQos_Dscp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) NewApplication(DscpAppName E_NokiaTypesRouter_DscpAppName) (*NokiaConf_Configure_Router_SgtQos_Dscp_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_DscpAppName]*NokiaConf_Configure_Router_SgtQos_Dscp_Application)
	}

	key := DscpAppName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Router_SgtQos_Dscp_Application{
		DscpAppName: DscpAppName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Router_SgtQos_Dscp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) RenameApplication(oldK, newK E_NokiaTypesRouter_DscpAppName) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.DscpAppName = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SgtQos_Dscp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) GetOrCreateApplication(DscpAppName E_NokiaTypesRouter_DscpAppName) *NokiaConf_Configure_Router_SgtQos_Dscp_Application {

	key := DscpAppName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(DscpAppName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Router_SgtQos_Dscp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) GetApplication(DscpAppName E_NokiaTypesRouter_DscpAppName) *NokiaConf_Configure_Router_SgtQos_Dscp_Application {

	if t == nil {
		return nil
	}

	key := DscpAppName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SgtQos_Dscp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) DeleteApplication(DscpAppName E_NokiaTypesRouter_DscpAppName) {
	key := DscpAppName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Router_SgtQos_Dscp_Application struct to the
// list Application of NokiaConf_Configure_Router_SgtQos_Dscp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SgtQos_Dscp_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) AppendApplication(v *NokiaConf_Configure_Router_SgtQos_Dscp_Application) error {
	key := v.DscpAppName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_DscpAppName]*NokiaConf_Configure_Router_SgtQos_Dscp_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewDscpMap creates a new entry in the DscpMap list of the
// NokiaConf_Configure_Router_SgtQos_Dscp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) NewDscpMap(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpMap == nil {
		t.DscpMap = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpMap", key)
	}

	t.DscpMap[key] = &NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap{
		DscpName: DscpName,
	}

	return t.DscpMap[key], nil
}

// RenameDscpMap renames an entry in the list DscpMap within
// the NokiaConf_Configure_Router_SgtQos_Dscp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) RenameDscpMap(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.DscpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpMap", newK)
	}

	e, ok := t.DscpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpMap", oldK)
	}
	e.DscpName = newK

	t.DscpMap[newK] = e
	delete(t.DscpMap, oldK)
	return nil
}

// GetOrCreateDscpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SgtQos_Dscp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) GetOrCreateDscpMap(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap {

	key := DscpName

	if v, ok := t.DscpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpMap(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpMap got unexpected error: %v", err))
	}
	return v
}

// GetDscpMap retrieves the value with the specified key from
// the DscpMap map field of NokiaConf_Configure_Router_SgtQos_Dscp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) GetDscpMap(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.DscpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_SgtQos_Dscp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) DeleteDscpMap(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.DscpMap, key)
}

// AppendDscpMap appends the supplied NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap struct to the
// list DscpMap of NokiaConf_Configure_Router_SgtQos_Dscp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) AppendDscpMap(v *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpMap == nil {
		t.DscpMap = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap)
	}

	if _, ok := t.DscpMap[key]; ok {
		return fmt.Errorf("duplicate key for list DscpMap %v", key)
	}

	t.DscpMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SgtQos_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SgtQos_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SgtQos_Dscp.
func (*NokiaConf_Configure_Router_SgtQos_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SgtQos_Dscp_Application represents the /nokia-conf/configure/router/sgt-qos/dscp/application YANG schema element.
type NokiaConf_Configure_Router_SgtQos_Dscp_Application struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Dscp               NokiaConf_Configure_Router_SgtQos_Dscp_Application_Dscp_Union `path:"dscp" module:"nokia-conf"`
	DscpAppName        E_NokiaTypesRouter_DscpAppName                                `path:"dscp-app-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SgtQos_Dscp_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SgtQos_Dscp_Application) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Router_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) GetDscp() NokiaConf_Configure_Router_SgtQos_Dscp_Application_Dscp_Union {
	if t == nil || t.Dscp == nil {
		return nil
	}
	return t.Dscp
}

// GetDscpAppName retrieves the value of the leaf DscpAppName from the NokiaConf_Configure_Router_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpAppName is set, it can
// safely use t.GetDscpAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpAppName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) GetDscpAppName() E_NokiaTypesRouter_DscpAppName {
	if t == nil || t.DscpAppName == 0 {
		return 0
	}
	return t.DscpAppName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SgtQos_Dscp_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SgtQos_Dscp_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-app-name": t.DscpAppName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SgtQos_Dscp_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SgtQos_Dscp_Application.
func (*NokiaConf_Configure_Router_SgtQos_Dscp_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap represents the /nokia-conf/configure/router/sgt-qos/dscp/dscp-map YANG schema element.
type NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName `path:"dscp-name" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName  `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap.
func (*NokiaConf_Configure_Router_SgtQos_Dscp_DscpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes represents the /nokia-conf/configure/router/static-routes YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldDown           *NokiaConf_Configure_Router_StaticRoutes_HoldDown                                                    `path:"hold-down" module:"nokia-conf" yangPresence:"true"`
	Route              map[NokiaConf_Configure_Router_StaticRoutes_Route_Key]*NokiaConf_Configure_Router_StaticRoutes_Route `path:"route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_StaticRoutes_Route_Key represents the key for list Route of element /nokia-conf/configure/router/static-routes.
type NokiaConf_Configure_Router_StaticRoutes_Route_Key struct {
	IpPrefix  string                              `path:"ip-prefix"`
	RouteType E_NokiaTypesRouter_UnicastMulticast `path:"route-type"`
}

// NewRoute creates a new entry in the Route list of the
// NokiaConf_Configure_Router_StaticRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes) NewRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) (*NokiaConf_Configure_Router_StaticRoutes_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Router_StaticRoutes_Route_Key]*NokiaConf_Configure_Router_StaticRoutes_Route)
	}

	key := NokiaConf_Configure_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NokiaConf_Configure_Router_StaticRoutes_Route{
		IpPrefix:  &IpPrefix,
		RouteType: RouteType,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NokiaConf_Configure_Router_StaticRoutes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes) RenameRoute(oldK, newK NokiaConf_Configure_Router_StaticRoutes_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.RouteType = newK.RouteType

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes) GetOrCreateRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) *NokiaConf_Configure_Router_StaticRoutes_Route {

	key := NokiaConf_Configure_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(IpPrefix, RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NokiaConf_Configure_Router_StaticRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes) GetRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) *NokiaConf_Configure_Router_StaticRoutes_Route {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes) DeleteRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) {
	key := NokiaConf_Configure_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route struct to the
// list Route of NokiaConf_Configure_Router_StaticRoutes. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes) AppendRoute(v *NokiaConf_Configure_Router_StaticRoutes_Route) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NokiaConf_Configure_Router_StaticRoutes_Route_Key{
		IpPrefix:  *v.IpPrefix,
		RouteType: v.RouteType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Router_StaticRoutes_Route_Key]*NokiaConf_Configure_Router_StaticRoutes_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// GetOrCreateHoldDown retrieves the value of the HoldDown field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes) GetOrCreateHoldDown() *NokiaConf_Configure_Router_StaticRoutes_HoldDown {
	if t.HoldDown != nil {
		return t.HoldDown
	}
	t.HoldDown = &NokiaConf_Configure_Router_StaticRoutes_HoldDown{}
	return t.HoldDown
}

// GetHoldDown returns the value of the HoldDown struct pointer
// from NokiaConf_Configure_Router_StaticRoutes. If the receiver or the field HoldDown is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes) GetHoldDown() *NokiaConf_Configure_Router_StaticRoutes_HoldDown {
	if t != nil && t.HoldDown != nil {
		return t.HoldDown
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HoldDown.PopulateDefaults()
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes.
func (*NokiaConf_Configure_Router_StaticRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_HoldDown represents the /nokia-conf/configure/router/static-routes/hold-down YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_HoldDown struct {
	Initial    *uint32 `path:"initial" module:"nokia-conf"`
	MaxValue   *uint32 `path:"max-value" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_HoldDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_HoldDown) IsYANGGoStruct() {}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Router_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 0
	}
	return *t.Initial
}

// GetMaxValue retrieves the value of the leaf MaxValue from the NokiaConf_Configure_Router_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxValue is set, it can
// safely use t.GetMaxValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) GetMaxValue() uint32 {
	if t == nil || t.MaxValue == nil {
		return 0
	}
	return *t.MaxValue
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Router_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 0
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_HoldDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_HoldDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_HoldDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_HoldDown.
func (*NokiaConf_Configure_Router_StaticRoutes_HoldDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route represents the /nokia-conf/configure/router/static-routes/route YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	BackupTag          *uint32                                                             `path:"backup-tag" module:"nokia-conf"`
	Blackhole          *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole            `path:"blackhole" module:"nokia-conf" yangPresence:"true"`
	Community          []string                                                            `path:"community" module:"nokia-conf"`
	Indirect           map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect  `path:"indirect" module:"nokia-conf"`
	Interface          map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Interface `path:"interface" module:"nokia-conf"`
	IpPrefix           *string                                                             `path:"ip-prefix" module:"nokia-conf"`
	NextHop            map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop   `path:"next-hop" module:"nokia-conf"`
	RouteType          E_NokiaTypesRouter_UnicastMulticast                                 `path:"route-type" module:"nokia-conf"`
	Tag                *uint32                                                             `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route) IsYANGGoStruct() {}

// NewIndirect creates a new entry in the Indirect list of the
// NokiaConf_Configure_Router_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) NewIndirect(IpAddress string) (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Indirect == nil {
		t.Indirect = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Indirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Indirect", key)
	}

	t.Indirect[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect{
		IpAddress: &IpAddress,
	}

	return t.Indirect[key], nil
}

// RenameIndirect renames an entry in the list Indirect within
// the NokiaConf_Configure_Router_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) RenameIndirect(oldK, newK string) error {
	if _, ok := t.Indirect[newK]; ok {
		return fmt.Errorf("key %v already exists in Indirect", newK)
	}

	e, ok := t.Indirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Indirect", oldK)
	}
	e.IpAddress = &newK

	t.Indirect[newK] = e
	delete(t.Indirect, oldK)
	return nil
}

// GetOrCreateIndirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetOrCreateIndirect(IpAddress string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect {

	key := IpAddress

	if v, ok := t.Indirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIndirect(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIndirect got unexpected error: %v", err))
	}
	return v
}

// GetIndirect retrieves the value with the specified key from
// the Indirect map field of NokiaConf_Configure_Router_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetIndirect(IpAddress string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Indirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteIndirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) DeleteIndirect(IpAddress string) {
	key := IpAddress

	delete(t.Indirect, key)
}

// AppendIndirect appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect struct to the
// list Indirect of NokiaConf_Configure_Router_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) AppendIndirect(v *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Indirect == nil {
		t.Indirect = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect)
	}

	if _, ok := t.Indirect[key]; ok {
		return fmt.Errorf("duplicate key for list Indirect %v", key)
	}

	t.Indirect[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) NewInterface(InterfaceName string) (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Router_StaticRoutes_Route_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetInterface(InterfaceName string) *NokiaConf_Configure_Router_StaticRoutes_Route_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Interface struct to the
// list Interface of NokiaConf_Configure_Router_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) AppendInterface(v *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewNextHop creates a new entry in the NextHop list of the
// NokiaConf_Configure_Router_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) NewNextHop(IpAddress string) (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_NextHop{
		IpAddress: &IpAddress,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NokiaConf_Configure_Router_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.IpAddress = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetOrCreateNextHop(IpAddress string) *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop {

	key := IpAddress

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NokiaConf_Configure_Router_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetNextHop(IpAddress string) *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) DeleteNextHop(IpAddress string) {
	key := IpAddress

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_NextHop struct to the
// list NextHop of NokiaConf_Configure_Router_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_NextHop already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) AppendNextHop(v *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetOrCreateBlackhole() *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole{}
	return t.Blackhole
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetBlackhole() *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackupTag retrieves the value of the leaf BackupTag from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupTag is set, it can
// safely use t.GetBackupTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetBackupTag() uint32 {
	if t == nil || t.BackupTag == nil {
		return 0
	}
	return *t.BackupTag
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetCommunity() []string {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetRouteType() E_NokiaTypesRouter_UnicastMulticast {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Blackhole.PopulateDefaults()
	for _, e := range t.Indirect {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix":  *t.IpPrefix,
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route.
func (*NokiaConf_Configure_Router_StaticRoutes_Route) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole represents the /nokia-conf/configure/router/static-routes/route/blackhole YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Community          *string                                                             `path:"community" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	DynamicBgp         *bool                                                               `path:"dynamic-bgp" module:"nokia-conf"`
	GenerateIcmp       *bool                                                               `path:"generate-icmp" module:"nokia-conf"`
	Metric             *uint32                                                             `path:"metric" module:"nokia-conf"`
	Preference         *uint32                                                             `path:"preference" module:"nokia-conf"`
	PrefixList         *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList `path:"prefix-list" module:"nokia-conf"`
	Tag                *uint32                                                             `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) IsYANGGoStruct() {}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetOrCreatePrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList{}
	return t.PrefixList
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetPrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicBgp retrieves the value of the leaf DynamicBgp from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicBgp is set, it can
// safely use t.GetDynamicBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicBgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetDynamicBgp() bool {
	if t == nil || t.DynamicBgp == nil {
		return false
	}
	return *t.DynamicBgp
}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicBgp == nil {
		var v bool = false
		t.DynamicBgp = &v
	}
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList represents the /nokia-conf/configure/router/static-routes/route/blackhole/prefix-list YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList struct {
	Flag E_NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) GetFlag() E_NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Blackhole_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect represents the /nokia-conf/configure/router/static-routes/route/indirect YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect struct {
	AdminState         E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Community          *string                                                                     `path:"community" module:"nokia-conf"`
	CpeCheck           map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description        *string                                                                     `path:"description" module:"nokia-conf"`
	DestinationClass   *uint32                                                                     `path:"destination-class" module:"nokia-conf"`
	IpAddress          *string                                                                     `path:"ip-address" module:"nokia-conf"`
	Metric             *uint32                                                                     `path:"metric" module:"nokia-conf"`
	Preference         *uint32                                                                     `path:"preference" module:"nokia-conf"`
	PrefixList         *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass        *uint32                                                                     `path:"source-class" module:"nokia-conf"`
	Tag                *uint32                                                                     `path:"tag" module:"nokia-conf"`
	TunnelNextHop      *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop       `path:"tunnel-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) NewCpeCheck(Address string) (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetCpeCheck(Address string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) AppendCpeCheck(v *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetOrCreatePrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetOrCreateQos() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos{}
	return t.Qos
}

// GetOrCreateTunnelNextHop retrieves the value of the TunnelNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetOrCreateTunnelNextHop() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop {
	if t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	t.TunnelNextHop = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop{}
	return t.TunnelNextHop
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetPrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetQos() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetTunnelNextHop returns the value of the TunnelNextHop struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Indirect. If the receiver or the field TunnelNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetTunnelNextHop() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop {
	if t != nil && t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.TunnelNextHop.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck represents the /nokia-conf/configure/router/static-routes/route/indirect/cpe-check YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32  `path:"drop-count" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	Log                *bool    `path:"log" module:"nokia-conf"`
	PaddingSize        *uint32  `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList represents the /nokia-conf/configure/router/static-routes/route/indirect/prefix-list YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList struct {
	Flag E_NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) GetFlag() E_NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos represents the /nokia-conf/configure/router/static-routes/route/indirect/qos YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop represents the /nokia-conf/configure/router/static-routes/route/indirect/tunnel-next-hop YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop struct {
	DisallowIgp      *bool                                                                                  `path:"disallow-igp" module:"nokia-conf"`
	FlexAlgo         *uint32                                                                                `path:"flex-algo" module:"nokia-conf"`
	Resolution       E_NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution      `path:"resolution" module:"nokia-conf"`
	ResolutionFilter *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetOrCreateResolutionFilter() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetResolutionFilter() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetDisallowIgp retrieves the value of the leaf DisallowIgp from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisallowIgp is set, it can
// safely use t.GetDisallowIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisallowIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetDisallowIgp() bool {
	if t == nil || t.DisallowIgp == nil {
		return false
	}
	return *t.DisallowIgp
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetFlexAlgo() uint32 {
	if t == nil || t.FlexAlgo == nil {
		return 0
	}
	return *t.FlexAlgo
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetResolution() E_NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution {
	if t == nil || t.Resolution == 0 {
		return NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DisallowIgp == nil {
		var v bool = false
		t.DisallowIgp = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter represents the /nokia-conf/configure/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter struct {
	Ldp           *bool                                                                                         `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool                                                                                         `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool                                                                                         `path:"rib-api" module:"nokia-conf"`
	RsvpTe        *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe `path:"rsvp-te" module:"nokia-conf" yangPresence:"true"`
	SrIsis        *bool                                                                                         `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool                                                                                         `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool                                                                                         `path:"sr-ospf3" module:"nokia-conf"`
	SrTe          *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe   `path:"sr-te" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) IsYANGGoStruct() {
}

// GetOrCreateRsvpTe retrieves the value of the RsvpTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetOrCreateRsvpTe() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe {
	if t.RsvpTe != nil {
		return t.RsvpTe
	}
	t.RsvpTe = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe{}
	return t.RsvpTe
}

// GetOrCreateSrTe retrieves the value of the SrTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetOrCreateSrTe() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe {
	if t.SrTe != nil {
		return t.SrTe
	}
	t.SrTe = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe{}
	return t.SrTe
}

// GetRsvpTe returns the value of the RsvpTe struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter. If the receiver or the field RsvpTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetRsvpTe() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe {
	if t != nil && t.RsvpTe != nil {
		return t.RsvpTe
	}
	return nil
}

// GetSrTe returns the value of the SrTe struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter. If the receiver or the field SrTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrTe() *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe {
	if t != nil && t.SrTe != nil {
		return t.SrTe
	}
	return nil
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	t.RsvpTe.PopulateDefaults()
	t.SrTe.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe represents the /nokia-conf/configure/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/rsvp-te YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe struct {
	Lsp map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) IsYANGGoStruct() {
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) NewLsp(LspName string) (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) GetLsp(LspName string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp struct to the
// list Lsp of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) AppendLsp(v *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp represents the /nokia-conf/configure/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/rsvp-te/lsp YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) IsYANGGoStruct() {
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe represents the /nokia-conf/configure/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/sr-te YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe struct {
	Lsp map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) IsYANGGoStruct() {
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) NewLsp(LspName string) (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) GetLsp(LspName string) *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp struct to the
// list Lsp of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) AppendLsp(v *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp represents the /nokia-conf/configure/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/sr-te/lsp YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) IsYANGGoStruct() {
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Interface represents the /nokia-conf/configure/router/static-routes/route/interface YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Interface struct {
	AdminState          E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Community           *string                                                                      `path:"community" module:"nokia-conf"`
	CpeCheck            map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description         *string                                                                      `path:"description" module:"nokia-conf"`
	DestinationClass    *uint32                                                                      `path:"destination-class" module:"nokia-conf"`
	InterfaceName       *string                                                                      `path:"interface-name" module:"nokia-conf"`
	LoadBalancingWeight *uint32                                                                      `path:"load-balancing-weight" module:"nokia-conf"`
	Metric              *uint32                                                                      `path:"metric" module:"nokia-conf"`
	Preference          *uint32                                                                      `path:"preference" module:"nokia-conf"`
	PrefixList          *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                 *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass         *uint32                                                                      `path:"source-class" module:"nokia-conf"`
	Tag                 *uint32                                                                      `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Router_StaticRoutes_Route_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) NewCpeCheck(Address string) (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Router_StaticRoutes_Route_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Router_StaticRoutes_Route_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetCpeCheck(Address string) *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Router_StaticRoutes_Route_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) AppendCpeCheck(v *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetOrCreatePrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetOrCreateQos() *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos{}
	return t.Qos
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Interface. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetPrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_Interface. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetQos() *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Interface.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck represents the /nokia-conf/configure/router/static-routes/route/interface/cpe-check YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32  `path:"drop-count" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	Log                *bool    `path:"log" module:"nokia-conf"`
	PaddingSize        *uint32  `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList represents the /nokia-conf/configure/router/static-routes/route/interface/prefix-list YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList struct {
	Flag E_NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) GetFlag() E_NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos represents the /nokia-conf/configure/router/static-routes/route/interface/qos YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_Interface_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_NextHop represents the /nokia-conf/configure/router/static-routes/route/next-hop YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_NextHop struct {
	AdminState          E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	BackupNextHop       *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop       `path:"backup-next-hop" module:"nokia-conf"`
	BfdLiveness         *bool                                                                      `path:"bfd-liveness" module:"nokia-conf"`
	Community           *string                                                                    `path:"community" module:"nokia-conf"`
	CpeCheck            map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description         *string                                                                    `path:"description" module:"nokia-conf"`
	DestinationClass    *uint32                                                                    `path:"destination-class" module:"nokia-conf"`
	IpAddress           *string                                                                    `path:"ip-address" module:"nokia-conf"`
	LdpSync             *bool                                                                      `path:"ldp-sync" module:"nokia-conf"`
	LoadBalancingWeight *uint32                                                                    `path:"load-balancing-weight" module:"nokia-conf"`
	Metric              *uint32                                                                    `path:"metric" module:"nokia-conf"`
	Preference          *uint32                                                                    `path:"preference" module:"nokia-conf"`
	PrefixList          *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                 *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass         *uint32                                                                    `path:"source-class" module:"nokia-conf"`
	Tag                 *uint32                                                                    `path:"tag" module:"nokia-conf"`
	ValidateNextHop     *bool                                                                      `path:"validate-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Router_StaticRoutes_Route_NextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) NewCpeCheck(Address string) (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetCpeCheck(Address string) *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) AppendCpeCheck(v *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreateBackupNextHop retrieves the value of the BackupNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetOrCreateBackupNextHop() *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop {
	if t.BackupNextHop != nil {
		return t.BackupNextHop
	}
	t.BackupNextHop = &NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop{}
	return t.BackupNextHop
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetOrCreatePrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetOrCreateQos() *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos{}
	return t.Qos
}

// GetBackupNextHop returns the value of the BackupNextHop struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If the receiver or the field BackupNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetBackupNextHop() *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop {
	if t != nil && t.BackupNextHop != nil {
		return t.BackupNextHop
	}
	return nil
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetPrefixList() *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Router_StaticRoutes_Route_NextHop. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetQos() *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLdpSync retrieves the value of the leaf LdpSync from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpSync is set, it can
// safely use t.GetLdpSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetLdpSync() bool {
	if t == nil || t.LdpSync == nil {
		return false
	}
	return *t.LdpSync
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// GetValidateNextHop retrieves the value of the leaf ValidateNextHop from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateNextHop is set, it can
// safely use t.GetValidateNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateNextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) GetValidateNextHop() bool {
	if t == nil || t.ValidateNextHop == nil {
		return false
	}
	return *t.ValidateNextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.LdpSync == nil {
		var v bool = false
		t.LdpSync = &v
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	if t.ValidateNextHop == nil {
		var v bool = false
		t.ValidateNextHop = &v
	}
	t.BackupNextHop.PopulateDefaults()
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop represents the /nokia-conf/configure/router/static-routes/route/next-hop/backup-next-hop YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_BackupNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck represents the /nokia-conf/configure/router/static-routes/route/next-hop/cpe-check YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32  `path:"drop-count" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	Log                *bool    `path:"log" module:"nokia-conf"`
	PaddingSize        *uint32  `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList represents the /nokia-conf/configure/router/static-routes/route/next-hop/prefix-list YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList struct {
	Flag E_NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                 `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) GetFlag() E_NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos represents the /nokia-conf/configure/router/static-routes/route/next-hop/qos YANG schema element.
type NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos.
func (*NokiaConf_Configure_Router_StaticRoutes_Route_NextHop_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TtlPropagate represents the /nokia-conf/configure/router/ttl-propagate YANG schema element.
type NokiaConf_Configure_Router_TtlPropagate struct {
	ApplyGroups        []string                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	LabelRouteLocal    E_NokiaTypesRouter_TtlPropagateType       `path:"label-route-local" module:"nokia-conf"`
	LabelRouteTransit  E_NokiaTypesRouter_TtlPropagateType       `path:"label-route-transit" module:"nokia-conf"`
	LsrLabelRoute      E_NokiaTypesRouter_TtlPropagateType       `path:"lsr-label-route" module:"nokia-conf"`
	VprnLocal          E_NokiaTypesRouter_RouterVprnTtlPropagate `path:"vprn-local" module:"nokia-conf"`
	VprnTransit        E_NokiaTypesRouter_RouterVprnTtlPropagate `path:"vprn-transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TtlPropagate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TtlPropagate) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLabelRouteLocal retrieves the value of the leaf LabelRouteLocal from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelRouteLocal is set, it can
// safely use t.GetLabelRouteLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelRouteLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetLabelRouteLocal() E_NokiaTypesRouter_TtlPropagateType {
	if t == nil || t.LabelRouteLocal == 0 {
		return NokiaTypesRouter_TtlPropagateType_none
	}
	return t.LabelRouteLocal
}

// GetLabelRouteTransit retrieves the value of the leaf LabelRouteTransit from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelRouteTransit is set, it can
// safely use t.GetLabelRouteTransit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelRouteTransit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetLabelRouteTransit() E_NokiaTypesRouter_TtlPropagateType {
	if t == nil || t.LabelRouteTransit == 0 {
		return NokiaTypesRouter_TtlPropagateType_none
	}
	return t.LabelRouteTransit
}

// GetLsrLabelRoute retrieves the value of the leaf LsrLabelRoute from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrLabelRoute is set, it can
// safely use t.GetLsrLabelRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrLabelRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetLsrLabelRoute() E_NokiaTypesRouter_TtlPropagateType {
	if t == nil || t.LsrLabelRoute == 0 {
		return NokiaTypesRouter_TtlPropagateType_none
	}
	return t.LsrLabelRoute
}

// GetVprnLocal retrieves the value of the leaf VprnLocal from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnLocal is set, it can
// safely use t.GetVprnLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetVprnLocal() E_NokiaTypesRouter_RouterVprnTtlPropagate {
	if t == nil || t.VprnLocal == 0 {
		return NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
	return t.VprnLocal
}

// GetVprnTransit retrieves the value of the leaf VprnTransit from the NokiaConf_Configure_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnTransit is set, it can
// safely use t.GetVprnTransit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnTransit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TtlPropagate) GetVprnTransit() E_NokiaTypesRouter_RouterVprnTtlPropagate {
	if t == nil || t.VprnTransit == 0 {
		return NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
	return t.VprnTransit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TtlPropagate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TtlPropagate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LabelRouteLocal == 0 {
		t.LabelRouteLocal = NokiaTypesRouter_TtlPropagateType_none
	}
	if t.LabelRouteTransit == 0 {
		t.LabelRouteTransit = NokiaTypesRouter_TtlPropagateType_none
	}
	if t.LsrLabelRoute == 0 {
		t.LsrLabelRoute = NokiaTypesRouter_TtlPropagateType_none
	}
	if t.VprnLocal == 0 {
		t.VprnLocal = NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
	if t.VprnTransit == 0 {
		t.VprnTransit = NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TtlPropagate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TtlPropagate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TtlPropagate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TtlPropagate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TtlPropagate.
func (*NokiaConf_Configure_Router_TtlPropagate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TunnelInterface represents the /nokia-conf/configure/router/tunnel-interface YANG schema element.
type NokiaConf_Configure_Router_TunnelInterface struct {
	LdpP2MpLeaf  map[NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key]*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf   `path:"ldp-p2mp-leaf" module:"nokia-conf"`
	LdpP2MpRoot  map[NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot   `path:"ldp-p2mp-root" module:"nokia-conf"`
	RsvpP2MpLeaf map[NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key]*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf `path:"rsvp-p2mp-leaf" module:"nokia-conf"`
	RsvpP2MpRoot map[string]*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot                                                      `path:"rsvp-p2mp-root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TunnelInterface) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key represents the key for list LdpP2MpLeaf of element /nokia-conf/configure/router/tunnel-interface.
type NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key struct {
	P2MpId        uint32 `path:"p2mp-id"`
	SenderAddress string `path:"sender-address"`
}

// NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key represents the key for list LdpP2MpRoot of element /nokia-conf/configure/router/tunnel-interface.
type NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key struct {
	P2MpId        uint32 `path:"p2mp-id"`
	SenderAddress string `path:"sender-address"`
}

// NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key represents the key for list RsvpP2MpLeaf of element /nokia-conf/configure/router/tunnel-interface.
type NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key struct {
	LspName       string `path:"lsp-name"`
	SenderAddress string `path:"sender-address"`
}

// NewLdpP2MpLeaf creates a new entry in the LdpP2MpLeaf list of the
// NokiaConf_Configure_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_TunnelInterface) NewLdpP2MpLeaf(P2MpId uint32, SenderAddress string) (*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpLeaf == nil {
		t.LdpP2MpLeaf = make(map[NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key]*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf)
	}

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LdpP2MpLeaf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LdpP2MpLeaf", key)
	}

	t.LdpP2MpLeaf[key] = &NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf{
		P2MpId:        &P2MpId,
		SenderAddress: &SenderAddress,
	}

	return t.LdpP2MpLeaf[key], nil
}

// RenameLdpP2MpLeaf renames an entry in the list LdpP2MpLeaf within
// the NokiaConf_Configure_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_TunnelInterface) RenameLdpP2MpLeaf(oldK, newK NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key) error {
	if _, ok := t.LdpP2MpLeaf[newK]; ok {
		return fmt.Errorf("key %v already exists in LdpP2MpLeaf", newK)
	}

	e, ok := t.LdpP2MpLeaf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LdpP2MpLeaf", oldK)
	}
	e.P2MpId = &newK.P2MpId
	e.SenderAddress = &newK.SenderAddress

	t.LdpP2MpLeaf[newK] = e
	delete(t.LdpP2MpLeaf, oldK)
	return nil
}

// GetOrCreateLdpP2MpLeaf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetOrCreateLdpP2MpLeaf(P2MpId uint32, SenderAddress string) *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf {

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.LdpP2MpLeaf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLdpP2MpLeaf(P2MpId, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLdpP2MpLeaf got unexpected error: %v", err))
	}
	return v
}

// GetLdpP2MpLeaf retrieves the value with the specified key from
// the LdpP2MpLeaf map field of NokiaConf_Configure_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetLdpP2MpLeaf(P2MpId uint32, SenderAddress string) *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.LdpP2MpLeaf[key]; ok {
		return lm
	}
	return nil
}

// DeleteLdpP2MpLeaf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_TunnelInterface) DeleteLdpP2MpLeaf(P2MpId uint32, SenderAddress string) {
	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	delete(t.LdpP2MpLeaf, key)
}

// AppendLdpP2MpLeaf appends the supplied NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf struct to the
// list LdpP2MpLeaf of NokiaConf_Configure_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_TunnelInterface) AppendLdpP2MpLeaf(v *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) error {
	if v.P2MpId == nil {
		return fmt.Errorf("invalid nil key for P2MpId")
	}

	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        *v.P2MpId,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpLeaf == nil {
		t.LdpP2MpLeaf = make(map[NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf_Key]*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf)
	}

	if _, ok := t.LdpP2MpLeaf[key]; ok {
		return fmt.Errorf("duplicate key for list LdpP2MpLeaf %v", key)
	}

	t.LdpP2MpLeaf[key] = v
	return nil
}

// NewLdpP2MpRoot creates a new entry in the LdpP2MpRoot list of the
// NokiaConf_Configure_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_TunnelInterface) NewLdpP2MpRoot(P2MpId uint32, SenderAddress string) (*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot)
	}

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LdpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LdpP2MpRoot", key)
	}

	t.LdpP2MpRoot[key] = &NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot{
		P2MpId:        &P2MpId,
		SenderAddress: &SenderAddress,
	}

	return t.LdpP2MpRoot[key], nil
}

// RenameLdpP2MpRoot renames an entry in the list LdpP2MpRoot within
// the NokiaConf_Configure_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_TunnelInterface) RenameLdpP2MpRoot(oldK, newK NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key) error {
	if _, ok := t.LdpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in LdpP2MpRoot", newK)
	}

	e, ok := t.LdpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LdpP2MpRoot", oldK)
	}
	e.P2MpId = &newK.P2MpId
	e.SenderAddress = &newK.SenderAddress

	t.LdpP2MpRoot[newK] = e
	delete(t.LdpP2MpRoot, oldK)
	return nil
}

// GetOrCreateLdpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetOrCreateLdpP2MpRoot(P2MpId uint32, SenderAddress string) *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot {

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.LdpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLdpP2MpRoot(P2MpId, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLdpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetLdpP2MpRoot retrieves the value with the specified key from
// the LdpP2MpRoot map field of NokiaConf_Configure_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetLdpP2MpRoot(P2MpId uint32, SenderAddress string) *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.LdpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteLdpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_TunnelInterface) DeleteLdpP2MpRoot(P2MpId uint32, SenderAddress string) {
	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	delete(t.LdpP2MpRoot, key)
}

// AppendLdpP2MpRoot appends the supplied NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot struct to the
// list LdpP2MpRoot of NokiaConf_Configure_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_TunnelInterface) AppendLdpP2MpRoot(v *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) error {
	if v.P2MpId == nil {
		return fmt.Errorf("invalid nil key for P2MpId")
	}

	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        *v.P2MpId,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot)
	}

	if _, ok := t.LdpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list LdpP2MpRoot %v", key)
	}

	t.LdpP2MpRoot[key] = v
	return nil
}

// NewRsvpP2MpLeaf creates a new entry in the RsvpP2MpLeaf list of the
// NokiaConf_Configure_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_TunnelInterface) NewRsvpP2MpLeaf(LspName string, SenderAddress string) (*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpLeaf == nil {
		t.RsvpP2MpLeaf = make(map[NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key]*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf)
	}

	key := NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpP2MpLeaf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpP2MpLeaf", key)
	}

	t.RsvpP2MpLeaf[key] = &NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf{
		LspName:       &LspName,
		SenderAddress: &SenderAddress,
	}

	return t.RsvpP2MpLeaf[key], nil
}

// RenameRsvpP2MpLeaf renames an entry in the list RsvpP2MpLeaf within
// the NokiaConf_Configure_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_TunnelInterface) RenameRsvpP2MpLeaf(oldK, newK NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key) error {
	if _, ok := t.RsvpP2MpLeaf[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpP2MpLeaf", newK)
	}

	e, ok := t.RsvpP2MpLeaf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpP2MpLeaf", oldK)
	}
	e.LspName = &newK.LspName
	e.SenderAddress = &newK.SenderAddress

	t.RsvpP2MpLeaf[newK] = e
	delete(t.RsvpP2MpLeaf, oldK)
	return nil
}

// GetOrCreateRsvpP2MpLeaf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetOrCreateRsvpP2MpLeaf(LspName string, SenderAddress string) *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf {

	key := NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.RsvpP2MpLeaf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpP2MpLeaf(LspName, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpP2MpLeaf got unexpected error: %v", err))
	}
	return v
}

// GetRsvpP2MpLeaf retrieves the value with the specified key from
// the RsvpP2MpLeaf map field of NokiaConf_Configure_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetRsvpP2MpLeaf(LspName string, SenderAddress string) *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.RsvpP2MpLeaf[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpP2MpLeaf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_TunnelInterface) DeleteRsvpP2MpLeaf(LspName string, SenderAddress string) {
	key := NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	delete(t.RsvpP2MpLeaf, key)
}

// AppendRsvpP2MpLeaf appends the supplied NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf struct to the
// list RsvpP2MpLeaf of NokiaConf_Configure_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_TunnelInterface) AppendRsvpP2MpLeaf(v *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key for LspName")
	}

	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       *v.LspName,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpLeaf == nil {
		t.RsvpP2MpLeaf = make(map[NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf_Key]*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf)
	}

	if _, ok := t.RsvpP2MpLeaf[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpP2MpLeaf %v", key)
	}

	t.RsvpP2MpLeaf[key] = v
	return nil
}

// NewRsvpP2MpRoot creates a new entry in the RsvpP2MpRoot list of the
// NokiaConf_Configure_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_TunnelInterface) NewRsvpP2MpRoot(LspName string) (*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpP2MpRoot", key)
	}

	t.RsvpP2MpRoot[key] = &NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot{
		LspName: &LspName,
	}

	return t.RsvpP2MpRoot[key], nil
}

// RenameRsvpP2MpRoot renames an entry in the list RsvpP2MpRoot within
// the NokiaConf_Configure_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_TunnelInterface) RenameRsvpP2MpRoot(oldK, newK string) error {
	if _, ok := t.RsvpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpP2MpRoot", newK)
	}

	e, ok := t.RsvpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpP2MpRoot", oldK)
	}
	e.LspName = &newK

	t.RsvpP2MpRoot[newK] = e
	delete(t.RsvpP2MpRoot, oldK)
	return nil
}

// GetOrCreateRsvpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetOrCreateRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot {

	key := LspName

	if v, ok := t.RsvpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpP2MpRoot(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetRsvpP2MpRoot retrieves the value with the specified key from
// the RsvpP2MpRoot map field of NokiaConf_Configure_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_TunnelInterface) GetRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.RsvpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_TunnelInterface) DeleteRsvpP2MpRoot(LspName string) {
	key := LspName

	delete(t.RsvpP2MpRoot, key)
}

// AppendRsvpP2MpRoot appends the supplied NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot struct to the
// list RsvpP2MpRoot of NokiaConf_Configure_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_TunnelInterface) AppendRsvpP2MpRoot(v *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot)
	}

	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpP2MpRoot %v", key)
	}

	t.RsvpP2MpRoot[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LdpP2MpLeaf {
		e.PopulateDefaults()
	}
	for _, e := range t.LdpP2MpRoot {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpP2MpLeaf {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpP2MpRoot {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TunnelInterface.
func (*NokiaConf_Configure_Router_TunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf represents the /nokia-conf/configure/router/tunnel-interface/ldp-p2mp-leaf YANG schema element.
type NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	P2MpId             *uint32  `path:"p2mp-id" module:"nokia-conf"`
	SenderAddress      *string  `path:"sender-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) GetP2MpId() uint32 {
	if t == nil || t.P2MpId == nil {
		return 0
	}
	return *t.P2MpId
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.P2MpId == nil {
		return nil, fmt.Errorf("nil value for key P2MpId")
	}

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"p2mp-id":        *t.P2MpId,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf.
func (*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpLeaf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot represents the /nokia-conf/configure/router/tunnel-interface/ldp-p2mp-root YANG schema element.
type NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	P2MpId             *uint32  `path:"p2mp-id" module:"nokia-conf"`
	SenderAddress      *string  `path:"sender-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) GetP2MpId() uint32 {
	if t == nil || t.P2MpId == nil {
		return 0
	}
	return *t.P2MpId
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {
	if t.P2MpId == nil {
		return nil, fmt.Errorf("nil value for key P2MpId")
	}

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"p2mp-id":        *t.P2MpId,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot.
func (*NokiaConf_Configure_Router_TunnelInterface_LdpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf represents the /nokia-conf/configure/router/tunnel-interface/rsvp-p2mp-leaf YANG schema element.
type NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	LspName            *string  `path:"lsp-name" module:"nokia-conf"`
	SenderAddress      *string  `path:"sender-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"lsp-name":       *t.LspName,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf.
func (*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpLeaf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot represents the /nokia-conf/configure/router/tunnel-interface/rsvp-p2mp-root YANG schema element.
type NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	LspName            *string  `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot.
func (*NokiaConf_Configure_Router_TunnelInterface_RsvpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TwampLight represents the /nokia-conf/configure/router/twamp-light YANG schema element.
type NokiaConf_Configure_Router_TwampLight struct {
	ApplyGroups        []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Reflector          *NokiaConf_Configure_Router_TwampLight_Reflector `path:"reflector" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TwampLight) IsYANGGoStruct() {}

// GetOrCreateReflector retrieves the value of the Reflector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_TwampLight) GetOrCreateReflector() *NokiaConf_Configure_Router_TwampLight_Reflector {
	if t.Reflector != nil {
		return t.Reflector
	}
	t.Reflector = &NokiaConf_Configure_Router_TwampLight_Reflector{}
	return t.Reflector
}

// GetReflector returns the value of the Reflector struct pointer
// from NokiaConf_Configure_Router_TwampLight. If the receiver or the field Reflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_TwampLight) GetReflector() *NokiaConf_Configure_Router_TwampLight_Reflector {
	if t != nil && t.Reflector != nil {
		return t.Reflector
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Reflector.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TwampLight.
func (*NokiaConf_Configure_Router_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TwampLight_Reflector represents the /nokia-conf/configure/router/twamp-light/reflector YANG schema element.
type NokiaConf_Configure_Router_TwampLight_Reflector struct {
	AdminState               E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                              `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	ApplyGroups              []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description              *string                                                            `path:"description" module:"nokia-conf"`
	Prefix                   map[string]*NokiaConf_Configure_Router_TwampLight_Reflector_Prefix `path:"prefix" module:"nokia-conf"`
	UdpPort                  *int32                                                             `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TwampLight_Reflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TwampLight_Reflector) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Router_TwampLight_Reflector struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Router_TwampLight_Reflector_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_TwampLight_Reflector_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Router_TwampLight_Reflector_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Router_TwampLight_Reflector struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TwampLight_Reflector. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Router_TwampLight_Reflector. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetPrefix(IpPrefix string) *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_TwampLight_Reflector. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Router_TwampLight_Reflector_Prefix struct to the
// list Prefix of NokiaConf_Configure_Router_TwampLight_Reflector. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_TwampLight_Reflector_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) AppendPrefix(v *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_TwampLight_Reflector_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 0
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TwampLight_Reflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TwampLight_Reflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TwampLight_Reflector.
func (*NokiaConf_Configure_Router_TwampLight_Reflector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_TwampLight_Reflector_Prefix represents the /nokia-conf/configure/router/twamp-light/reflector/prefix YANG schema element.
type NokiaConf_Configure_Router_TwampLight_Reflector_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_TwampLight_Reflector_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_TwampLight_Reflector_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_TwampLight_Reflector_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_TwampLight_Reflector_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_TwampLight_Reflector_Prefix.
func (*NokiaConf_Configure_Router_TwampLight_Reflector_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Vrgw represents the /nokia-conf/configure/router/vrgw YANG schema element.
type NokiaConf_Configure_Router_Vrgw struct {
	Lanext *NokiaConf_Configure_Router_Vrgw_Lanext `path:"lanext" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Vrgw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Vrgw) IsYANGGoStruct() {}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Vrgw) GetOrCreateLanext() *NokiaConf_Configure_Router_Vrgw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Router_Vrgw_Lanext{}
	return t.Lanext
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Router_Vrgw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Vrgw) GetLanext() *NokiaConf_Configure_Router_Vrgw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Vrgw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Vrgw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Lanext.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Vrgw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Vrgw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Vrgw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Vrgw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Vrgw.
func (*NokiaConf_Configure_Router_Vrgw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Vrgw_Lanext represents the /nokia-conf/configure/router/vrgw/lanext YANG schema element.
type NokiaConf_Configure_Router_Vrgw_Lanext struct {
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	VxlanPort          *uint32                                                `path:"vxlan-port" module:"nokia-conf"`
	VxlanVtepRange     *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange `path:"vxlan-vtep-range" module:"nokia-conf"`
	WlanGwGroup        *uint32                                                `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Vrgw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Vrgw_Lanext) IsYANGGoStruct() {}

// GetOrCreateVxlanVtepRange retrieves the value of the VxlanVtepRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetOrCreateVxlanVtepRange() *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange {
	if t.VxlanVtepRange != nil {
		return t.VxlanVtepRange
	}
	t.VxlanVtepRange = &NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange{}
	return t.VxlanVtepRange
}

// GetVxlanVtepRange returns the value of the VxlanVtepRange struct pointer
// from NokiaConf_Configure_Router_Vrgw_Lanext. If the receiver or the field VxlanVtepRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetVxlanVtepRange() *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange {
	if t != nil && t.VxlanVtepRange != nil {
		return t.VxlanVtepRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVxlanPort retrieves the value of the leaf VxlanPort from the NokiaConf_Configure_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanPort is set, it can
// safely use t.GetVxlanPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetVxlanPort() uint32 {
	if t == nil || t.VxlanPort == nil {
		return 4789
	}
	return *t.VxlanPort
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Vrgw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.VxlanPort == nil {
		var v uint32 = 4789
		t.VxlanPort = &v
	}
	t.VxlanVtepRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Vrgw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Vrgw_Lanext.
func (*NokiaConf_Configure_Router_Vrgw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange represents the /nokia-conf/configure/router/vrgw/lanext/vxlan-vtep-range YANG schema element.
type NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange.
func (*NokiaConf_Configure_Router_Vrgw_Lanext_VxlanVtepRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_WlanGw represents the /nokia-conf/configure/router/wlan-gw YANG schema element.
type NokiaConf_Configure_Router_WlanGw struct {
	ApplyGroups                 []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	DistributedSubscriberMgmt   *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt   `path:"distributed-subscriber-mgmt" module:"nokia-conf"`
	MobilityTriggeredAccounting *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting `path:"mobility-triggered-accounting" module:"nokia-conf"`
	Xconnect                    *NokiaConf_Configure_Router_WlanGw_Xconnect                    `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_WlanGw) IsYANGGoStruct() {}

// GetOrCreateDistributedSubscriberMgmt retrieves the value of the DistributedSubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_WlanGw) GetOrCreateDistributedSubscriberMgmt() *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt {
	if t.DistributedSubscriberMgmt != nil {
		return t.DistributedSubscriberMgmt
	}
	t.DistributedSubscriberMgmt = &NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt{}
	return t.DistributedSubscriberMgmt
}

// GetOrCreateMobilityTriggeredAccounting retrieves the value of the MobilityTriggeredAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_WlanGw) GetOrCreateMobilityTriggeredAccounting() *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting {
	if t.MobilityTriggeredAccounting != nil {
		return t.MobilityTriggeredAccounting
	}
	t.MobilityTriggeredAccounting = &NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting{}
	return t.MobilityTriggeredAccounting
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_WlanGw) GetOrCreateXconnect() *NokiaConf_Configure_Router_WlanGw_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Router_WlanGw_Xconnect{}
	return t.Xconnect
}

// GetDistributedSubscriberMgmt returns the value of the DistributedSubscriberMgmt struct pointer
// from NokiaConf_Configure_Router_WlanGw. If the receiver or the field DistributedSubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_WlanGw) GetDistributedSubscriberMgmt() *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt {
	if t != nil && t.DistributedSubscriberMgmt != nil {
		return t.DistributedSubscriberMgmt
	}
	return nil
}

// GetMobilityTriggeredAccounting returns the value of the MobilityTriggeredAccounting struct pointer
// from NokiaConf_Configure_Router_WlanGw. If the receiver or the field MobilityTriggeredAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_WlanGw) GetMobilityTriggeredAccounting() *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting {
	if t != nil && t.MobilityTriggeredAccounting != nil {
		return t.MobilityTriggeredAccounting
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Router_WlanGw. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_WlanGw) GetXconnect() *NokiaConf_Configure_Router_WlanGw_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DistributedSubscriberMgmt.PopulateDefaults()
	t.MobilityTriggeredAccounting.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_WlanGw.
func (*NokiaConf_Configure_Router_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt represents the /nokia-conf/configure/router/wlan-gw/distributed-subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6TcpMssAdjust   *uint32  `path:"ipv6-tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6TcpMssAdjust retrieves the value of the leaf Ipv6TcpMssAdjust from the NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6TcpMssAdjust is set, it can
// safely use t.GetIpv6TcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) GetIpv6TcpMssAdjust() uint32 {
	if t == nil || t.Ipv6TcpMssAdjust == nil {
		return 0
	}
	return *t.Ipv6TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt.
func (*NokiaConf_Configure_Router_WlanGw_DistributedSubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting represents the /nokia-conf/configure/router/wlan-gw/mobility-triggered-accounting YANG schema element.
type NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HoldDown        *uint32                     `path:"hold-down" module:"nokia-conf"`
	IncludeCounters *bool                       `path:"include-counters" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) GetHoldDown() uint32 {
	if t == nil || t.HoldDown == nil {
		return 0
	}
	return *t.HoldDown
}

// GetIncludeCounters retrieves the value of the leaf IncludeCounters from the NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeCounters is set, it can
// safely use t.GetIncludeCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) GetIncludeCounters() bool {
	if t == nil || t.IncludeCounters == nil {
		return false
	}
	return *t.IncludeCounters
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IncludeCounters == nil {
		var v bool = false
		t.IncludeCounters = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting.
func (*NokiaConf_Configure_Router_WlanGw_MobilityTriggeredAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_WlanGw_Xconnect represents the /nokia-conf/configure/router/wlan-gw/xconnect YANG schema element.
type NokiaConf_Configure_Router_WlanGw_Xconnect struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	TunnelSourceIp     *string                     `path:"tunnel-source-ip" module:"nokia-conf"`
	WlanGwGroup        *uint32                     `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_WlanGw_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_WlanGw_Xconnect) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTunnelSourceIp retrieves the value of the leaf TunnelSourceIp from the NokiaConf_Configure_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelSourceIp is set, it can
// safely use t.GetTunnelSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelSourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) GetTunnelSourceIp() string {
	if t == nil || t.TunnelSourceIp == nil {
		return ""
	}
	return *t.TunnelSourceIp
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_WlanGw_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_WlanGw_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_WlanGw_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_WlanGw_Xconnect.
func (*NokiaConf_Configure_Router_WlanGw_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Wpp represents the /nokia-conf/configure/router/wpp YANG schema element.
type NokiaConf_Configure_Router_Wpp struct {
	AdminState         E_NokiaTypesSros_AdminState                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Portal             map[string]*NokiaConf_Configure_Router_Wpp_Portal `path:"portal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Wpp) IsYANGGoStruct() {}

// NewPortal creates a new entry in the Portal list of the
// NokiaConf_Configure_Router_Wpp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Wpp) NewPortal(Name string) (*NokiaConf_Configure_Router_Wpp_Portal, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[string]*NokiaConf_Configure_Router_Wpp_Portal)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Portal[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Portal", key)
	}

	t.Portal[key] = &NokiaConf_Configure_Router_Wpp_Portal{
		Name: &Name,
	}

	return t.Portal[key], nil
}

// RenamePortal renames an entry in the list Portal within
// the NokiaConf_Configure_Router_Wpp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Wpp) RenamePortal(oldK, newK string) error {
	if _, ok := t.Portal[newK]; ok {
		return fmt.Errorf("key %v already exists in Portal", newK)
	}

	e, ok := t.Portal[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Portal", oldK)
	}
	e.Name = &newK

	t.Portal[newK] = e
	delete(t.Portal, oldK)
	return nil
}

// GetOrCreatePortal retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Wpp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Wpp) GetOrCreatePortal(Name string) *NokiaConf_Configure_Router_Wpp_Portal {

	key := Name

	if v, ok := t.Portal[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortal(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortal got unexpected error: %v", err))
	}
	return v
}

// GetPortal retrieves the value with the specified key from
// the Portal map field of NokiaConf_Configure_Router_Wpp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Wpp) GetPortal(Name string) *NokiaConf_Configure_Router_Wpp_Portal {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Portal[key]; ok {
		return lm
	}
	return nil
}

// DeletePortal deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Wpp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Wpp) DeletePortal(Name string) {
	key := Name

	delete(t.Portal, key)
}

// AppendPortal appends the supplied NokiaConf_Configure_Router_Wpp_Portal struct to the
// list Portal of NokiaConf_Configure_Router_Wpp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Wpp_Portal already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Wpp) AppendPortal(v *NokiaConf_Configure_Router_Wpp_Portal) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[string]*NokiaConf_Configure_Router_Wpp_Portal)
	}

	if _, ok := t.Portal[key]; ok {
		return fmt.Errorf("duplicate key for list Portal %v", key)
	}

	t.Portal[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Portal {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Wpp.
func (*NokiaConf_Configure_Router_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Wpp_Portal represents the /nokia-conf/configure/router/wpp/portal YANG schema element.
type NokiaConf_Configure_Router_Wpp_Portal struct {
	AckAuthRetryCount   *uint32                                            `path:"ack-auth-retry-count" module:"nokia-conf"`
	Address             *string                                            `path:"address" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                            `path:"name" module:"nokia-conf"`
	NtfLogoutRetryCount *uint32                                            `path:"ntf-logout-retry-count" module:"nokia-conf"`
	PortFormat          E_NokiaConf_Configure_Router_Wpp_Portal_PortFormat `path:"port-format" module:"nokia-conf"`
	RetryInterval       *uint32                                            `path:"retry-interval" module:"nokia-conf"`
	Secret              *string                                            `path:"secret" module:"nokia-conf"`
	Version             *uint32                                            `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Wpp_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Wpp_Portal) IsYANGGoStruct() {}

// GetAckAuthRetryCount retrieves the value of the leaf AckAuthRetryCount from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AckAuthRetryCount is set, it can
// safely use t.GetAckAuthRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AckAuthRetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetAckAuthRetryCount() uint32 {
	if t == nil || t.AckAuthRetryCount == nil {
		return 5
	}
	return *t.AckAuthRetryCount
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNtfLogoutRetryCount retrieves the value of the leaf NtfLogoutRetryCount from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtfLogoutRetryCount is set, it can
// safely use t.GetNtfLogoutRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtfLogoutRetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetNtfLogoutRetryCount() uint32 {
	if t == nil || t.NtfLogoutRetryCount == nil {
		return 5
	}
	return *t.NtfLogoutRetryCount
}

// GetPortFormat retrieves the value of the leaf PortFormat from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortFormat is set, it can
// safely use t.GetPortFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetPortFormat() E_NokiaConf_Configure_Router_Wpp_Portal_PortFormat {
	if t == nil || t.PortFormat == 0 {
		return NokiaConf_Configure_Router_Wpp_Portal_PortFormat_standard
	}
	return t.PortFormat
}

// GetRetryInterval retrieves the value of the leaf RetryInterval from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryInterval is set, it can
// safely use t.GetRetryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetRetryInterval() uint32 {
	if t == nil || t.RetryInterval == nil {
		return 2000
	}
	return *t.RetryInterval
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Wpp_Portal) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 1
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Wpp_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Wpp_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AckAuthRetryCount == nil {
		var v uint32 = 5
		t.AckAuthRetryCount = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NtfLogoutRetryCount == nil {
		var v uint32 = 5
		t.NtfLogoutRetryCount = &v
	}
	if t.PortFormat == 0 {
		t.PortFormat = NokiaConf_Configure_Router_Wpp_Portal_PortFormat_standard
	}
	if t.RetryInterval == nil {
		var v uint32 = 2000
		t.RetryInterval = &v
	}
	if t.Version == nil {
		var v uint32 = 1
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Wpp_Portal struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Wpp_Portal) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Wpp_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Wpp_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Wpp_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Wpp_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Wpp_Portal.
func (*NokiaConf_Configure_Router_Wpp_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions represents the /nokia-conf/configure/routing-options YANG schema element.
type NokiaConf_Configure_RoutingOptions struct {
	AdminTags                    *NokiaConf_Configure_RoutingOptions_AdminTags                    `path:"admin-tags" module:"nokia-conf"`
	ApplyGroups                  []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	FlexibleAlgorithmDefinitions *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions `path:"flexible-algorithm-definitions" module:"nokia-conf"`
	IfAttribute                  *NokiaConf_Configure_RoutingOptions_IfAttribute                  `path:"if-attribute" module:"nokia-conf"`
	IpFastReroute                *bool                                                            `path:"ip-fast-reroute" module:"nokia-conf"`
	PolicyAccounting             *NokiaConf_Configure_RoutingOptions_PolicyAccounting             `path:"policy-accounting" module:"nokia-conf"`
	RouteNextHopPolicy           *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy           `path:"route-next-hop-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions) IsYANGGoStruct() {}

// GetOrCreateAdminTags retrieves the value of the AdminTags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions) GetOrCreateAdminTags() *NokiaConf_Configure_RoutingOptions_AdminTags {
	if t.AdminTags != nil {
		return t.AdminTags
	}
	t.AdminTags = &NokiaConf_Configure_RoutingOptions_AdminTags{}
	return t.AdminTags
}

// GetOrCreateFlexibleAlgorithmDefinitions retrieves the value of the FlexibleAlgorithmDefinitions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions) GetOrCreateFlexibleAlgorithmDefinitions() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions {
	if t.FlexibleAlgorithmDefinitions != nil {
		return t.FlexibleAlgorithmDefinitions
	}
	t.FlexibleAlgorithmDefinitions = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions{}
	return t.FlexibleAlgorithmDefinitions
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions) GetOrCreateIfAttribute() *NokiaConf_Configure_RoutingOptions_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_RoutingOptions_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreatePolicyAccounting retrieves the value of the PolicyAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions) GetOrCreatePolicyAccounting() *NokiaConf_Configure_RoutingOptions_PolicyAccounting {
	if t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	t.PolicyAccounting = &NokiaConf_Configure_RoutingOptions_PolicyAccounting{}
	return t.PolicyAccounting
}

// GetOrCreateRouteNextHopPolicy retrieves the value of the RouteNextHopPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions) GetOrCreateRouteNextHopPolicy() *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy {
	if t.RouteNextHopPolicy != nil {
		return t.RouteNextHopPolicy
	}
	t.RouteNextHopPolicy = &NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy{}
	return t.RouteNextHopPolicy
}

// GetAdminTags returns the value of the AdminTags struct pointer
// from NokiaConf_Configure_RoutingOptions. If the receiver or the field AdminTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions) GetAdminTags() *NokiaConf_Configure_RoutingOptions_AdminTags {
	if t != nil && t.AdminTags != nil {
		return t.AdminTags
	}
	return nil
}

// GetFlexibleAlgorithmDefinitions returns the value of the FlexibleAlgorithmDefinitions struct pointer
// from NokiaConf_Configure_RoutingOptions. If the receiver or the field FlexibleAlgorithmDefinitions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions) GetFlexibleAlgorithmDefinitions() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions {
	if t != nil && t.FlexibleAlgorithmDefinitions != nil {
		return t.FlexibleAlgorithmDefinitions
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_RoutingOptions. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions) GetIfAttribute() *NokiaConf_Configure_RoutingOptions_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetPolicyAccounting returns the value of the PolicyAccounting struct pointer
// from NokiaConf_Configure_RoutingOptions. If the receiver or the field PolicyAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions) GetPolicyAccounting() *NokiaConf_Configure_RoutingOptions_PolicyAccounting {
	if t != nil && t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	return nil
}

// GetRouteNextHopPolicy returns the value of the RouteNextHopPolicy struct pointer
// from NokiaConf_Configure_RoutingOptions. If the receiver or the field RouteNextHopPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions) GetRouteNextHopPolicy() *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy {
	if t != nil && t.RouteNextHopPolicy != nil {
		return t.RouteNextHopPolicy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpFastReroute retrieves the value of the leaf IpFastReroute from the NokiaConf_Configure_RoutingOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFastReroute is set, it can
// safely use t.GetIpFastReroute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFastReroute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions) GetIpFastReroute() bool {
	if t == nil || t.IpFastReroute == nil {
		return false
	}
	return *t.IpFastReroute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFastReroute == nil {
		var v bool = false
		t.IpFastReroute = &v
	}
	t.AdminTags.PopulateDefaults()
	t.FlexibleAlgorithmDefinitions.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.PolicyAccounting.PopulateDefaults()
	t.RouteNextHopPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions.
func (*NokiaConf_Configure_RoutingOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_AdminTags represents the /nokia-conf/configure/routing-options/admin-tags YANG schema element.
type NokiaConf_Configure_RoutingOptions_AdminTags struct {
	AdminTag            map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag            `path:"admin-tag" module:"nokia-conf"`
	RouteAdminTagPolicy map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy `path:"route-admin-tag-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_AdminTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_AdminTags) IsYANGGoStruct() {}

// NewAdminTag creates a new entry in the AdminTag list of the
// NokiaConf_Configure_RoutingOptions_AdminTags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) NewAdminTag(Tag string) (*NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag)
	}

	key := Tag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminTag", key)
	}

	t.AdminTag[key] = &NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag{
		Tag: &Tag,
	}

	return t.AdminTag[key], nil
}

// RenameAdminTag renames an entry in the list AdminTag within
// the NokiaConf_Configure_RoutingOptions_AdminTags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) RenameAdminTag(oldK, newK string) error {
	if _, ok := t.AdminTag[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminTag", newK)
	}

	e, ok := t.AdminTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminTag", oldK)
	}
	e.Tag = &newK

	t.AdminTag[newK] = e
	delete(t.AdminTag, oldK)
	return nil
}

// GetOrCreateAdminTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) GetOrCreateAdminTag(Tag string) *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag {

	key := Tag

	if v, ok := t.AdminTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminTag(Tag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminTag got unexpected error: %v", err))
	}
	return v
}

// GetAdminTag retrieves the value with the specified key from
// the AdminTag map field of NokiaConf_Configure_RoutingOptions_AdminTags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) GetAdminTag(Tag string) *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag {

	if t == nil {
		return nil
	}

	key := Tag

	if lm, ok := t.AdminTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) DeleteAdminTag(Tag string) {
	key := Tag

	delete(t.AdminTag, key)
}

// AppendAdminTag appends the supplied NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag struct to the
// list AdminTag of NokiaConf_Configure_RoutingOptions_AdminTags. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) AppendAdminTag(v *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) error {
	if v.Tag == nil {
		return fmt.Errorf("invalid nil key received for Tag")
	}

	key := *v.Tag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag)
	}

	if _, ok := t.AdminTag[key]; ok {
		return fmt.Errorf("duplicate key for list AdminTag %v", key)
	}

	t.AdminTag[key] = v
	return nil
}

// NewRouteAdminTagPolicy creates a new entry in the RouteAdminTagPolicy list of the
// NokiaConf_Configure_RoutingOptions_AdminTags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) NewRouteAdminTagPolicy(PolicyName string) (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteAdminTagPolicy == nil {
		t.RouteAdminTagPolicy = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteAdminTagPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteAdminTagPolicy", key)
	}

	t.RouteAdminTagPolicy[key] = &NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy{
		PolicyName: &PolicyName,
	}

	return t.RouteAdminTagPolicy[key], nil
}

// RenameRouteAdminTagPolicy renames an entry in the list RouteAdminTagPolicy within
// the NokiaConf_Configure_RoutingOptions_AdminTags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) RenameRouteAdminTagPolicy(oldK, newK string) error {
	if _, ok := t.RouteAdminTagPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteAdminTagPolicy", newK)
	}

	e, ok := t.RouteAdminTagPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteAdminTagPolicy", oldK)
	}
	e.PolicyName = &newK

	t.RouteAdminTagPolicy[newK] = e
	delete(t.RouteAdminTagPolicy, oldK)
	return nil
}

// GetOrCreateRouteAdminTagPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) GetOrCreateRouteAdminTagPolicy(PolicyName string) *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy {

	key := PolicyName

	if v, ok := t.RouteAdminTagPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteAdminTagPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteAdminTagPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRouteAdminTagPolicy retrieves the value with the specified key from
// the RouteAdminTagPolicy map field of NokiaConf_Configure_RoutingOptions_AdminTags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) GetRouteAdminTagPolicy(PolicyName string) *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.RouteAdminTagPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteAdminTagPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) DeleteRouteAdminTagPolicy(PolicyName string) {
	key := PolicyName

	delete(t.RouteAdminTagPolicy, key)
}

// AppendRouteAdminTagPolicy appends the supplied NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct to the
// list RouteAdminTagPolicy of NokiaConf_Configure_RoutingOptions_AdminTags. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) AppendRouteAdminTagPolicy(v *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteAdminTagPolicy == nil {
		t.RouteAdminTagPolicy = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy)
	}

	if _, ok := t.RouteAdminTagPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RouteAdminTagPolicy %v", key)
	}

	t.RouteAdminTagPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_AdminTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminTag {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteAdminTagPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_AdminTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_AdminTags.
func (*NokiaConf_Configure_RoutingOptions_AdminTags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag represents the /nokia-conf/configure/routing-options/admin-tags/admin-tag YANG schema element.
type NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag struct {
	Tag *string `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) GetTag() string {
	if t == nil || t.Tag == nil {
		return ""
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tag == nil {
		return nil, fmt.Errorf("nil value for key Tag")
	}

	return map[string]interface{}{
		"tag": *t.Tag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_AdminTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy represents the /nokia-conf/configure/routing-options/admin-tags/route-admin-tag-policy YANG schema element.
type NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Exclude            map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude `path:"exclude" module:"nokia-conf"`
	Include            map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include `path:"include" module:"nokia-conf"`
	PolicyName         *string                                                                              `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) IsYANGGoStruct() {}

// NewExclude creates a new entry in the Exclude list of the
// NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) NewExclude(Tag string) (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Exclude == nil {
		t.Exclude = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude)
	}

	key := Tag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Exclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Exclude", key)
	}

	t.Exclude[key] = &NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude{
		Tag: &Tag,
	}

	return t.Exclude[key], nil
}

// RenameExclude renames an entry in the list Exclude within
// the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) RenameExclude(oldK, newK string) error {
	if _, ok := t.Exclude[newK]; ok {
		return fmt.Errorf("key %v already exists in Exclude", newK)
	}

	e, ok := t.Exclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Exclude", oldK)
	}
	e.Tag = &newK

	t.Exclude[newK] = e
	delete(t.Exclude, oldK)
	return nil
}

// GetOrCreateExclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetOrCreateExclude(Tag string) *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude {

	key := Tag

	if v, ok := t.Exclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExclude(Tag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExclude got unexpected error: %v", err))
	}
	return v
}

// GetExclude retrieves the value with the specified key from
// the Exclude map field of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetExclude(Tag string) *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude {

	if t == nil {
		return nil
	}

	key := Tag

	if lm, ok := t.Exclude[key]; ok {
		return lm
	}
	return nil
}

// DeleteExclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) DeleteExclude(Tag string) {
	key := Tag

	delete(t.Exclude, key)
}

// AppendExclude appends the supplied NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude struct to the
// list Exclude of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) AppendExclude(v *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) error {
	if v.Tag == nil {
		return fmt.Errorf("invalid nil key received for Tag")
	}

	key := *v.Tag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Exclude == nil {
		t.Exclude = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude)
	}

	if _, ok := t.Exclude[key]; ok {
		return fmt.Errorf("duplicate key for list Exclude %v", key)
	}

	t.Exclude[key] = v
	return nil
}

// NewInclude creates a new entry in the Include list of the
// NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) NewInclude(Tag string) (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Include == nil {
		t.Include = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include)
	}

	key := Tag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Include[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Include", key)
	}

	t.Include[key] = &NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include{
		Tag: &Tag,
	}

	return t.Include[key], nil
}

// RenameInclude renames an entry in the list Include within
// the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) RenameInclude(oldK, newK string) error {
	if _, ok := t.Include[newK]; ok {
		return fmt.Errorf("key %v already exists in Include", newK)
	}

	e, ok := t.Include[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Include", oldK)
	}
	e.Tag = &newK

	t.Include[newK] = e
	delete(t.Include, oldK)
	return nil
}

// GetOrCreateInclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetOrCreateInclude(Tag string) *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include {

	key := Tag

	if v, ok := t.Include[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInclude(Tag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInclude got unexpected error: %v", err))
	}
	return v
}

// GetInclude retrieves the value with the specified key from
// the Include map field of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetInclude(Tag string) *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include {

	if t == nil {
		return nil
	}

	key := Tag

	if lm, ok := t.Include[key]; ok {
		return lm
	}
	return nil
}

// DeleteInclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) DeleteInclude(Tag string) {
	key := Tag

	delete(t.Include, key)
}

// AppendInclude appends the supplied NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include struct to the
// list Include of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) AppendInclude(v *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) error {
	if v.Tag == nil {
		return fmt.Errorf("invalid nil key received for Tag")
	}

	key := *v.Tag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Include == nil {
		t.Include = make(map[string]*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include)
	}

	if _, ok := t.Include[key]; ok {
		return fmt.Errorf("duplicate key for list Include %v", key)
	}

	t.Include[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Exclude {
		e.PopulateDefaults()
	}
	for _, e := range t.Include {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude represents the /nokia-conf/configure/routing-options/admin-tags/route-admin-tag-policy/exclude YANG schema element.
type NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude struct {
	Tag *string `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) GetTag() string {
	if t == nil || t.Tag == nil {
		return ""
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tag == nil {
		return nil, fmt.Errorf("nil value for key Tag")
	}

	return map[string]interface{}{
		"tag": *t.Tag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include represents the /nokia-conf/configure/routing-options/admin-tags/route-admin-tag-policy/include YANG schema element.
type NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include struct {
	Tag *string `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) GetTag() string {
	if t == nil || t.Tag == nil {
		return ""
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tag == nil {
		return nil, fmt.Errorf("nil value for key Tag")
	}

	return map[string]interface{}{
		"tag": *t.Tag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include.
func (*NokiaConf_Configure_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	FlexAlgo           map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo `path:"flex-algo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) IsYANGGoStruct() {}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) NewFlexAlgo(FlexAlgoName string) (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo)
	}

	key := FlexAlgoName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo{
		FlexAlgoName: &FlexAlgoName,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) RenameFlexAlgo(oldK, newK string) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoName = &newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) GetOrCreateFlexAlgo(FlexAlgoName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo {

	key := FlexAlgoName

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) GetFlexAlgo(FlexAlgoName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoName

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) DeleteFlexAlgo(FlexAlgoName string) {
	key := FlexAlgoName

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) AppendFlexAlgo(v *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) error {
	if v.FlexAlgoName == nil {
		return fmt.Errorf("invalid nil key received for FlexAlgoName")
	}

	key := *v.FlexAlgoName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo struct {
	AdminState         E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                               `path:"description" module:"nokia-conf"`
	Exclude            *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude     `path:"exclude" module:"nokia-conf"`
	FlagsTlv           *bool                                                                                 `path:"flags-tlv" module:"nokia-conf"`
	FlexAlgoName       *string                                                                               `path:"flex-algo-name" module:"nokia-conf"`
	IncludeAll         *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll  `path:"include-all" module:"nokia-conf"`
	IncludeAny         *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny  `path:"include-any" module:"nokia-conf"`
	MetricType         E_NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType `path:"metric-type" module:"nokia-conf"`
	Priority           *int32                                                                                `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetOrCreateExclude() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude{}
	return t.Exclude
}

// GetOrCreateIncludeAll retrieves the value of the IncludeAll field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetOrCreateIncludeAll() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll {
	if t.IncludeAll != nil {
		return t.IncludeAll
	}
	t.IncludeAll = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll{}
	return t.IncludeAll
}

// GetOrCreateIncludeAny retrieves the value of the IncludeAny field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetOrCreateIncludeAny() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny {
	if t.IncludeAny != nil {
		return t.IncludeAny
	}
	t.IncludeAny = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny{}
	return t.IncludeAny
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetExclude() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetIncludeAll returns the value of the IncludeAll struct pointer
// from NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo. If the receiver or the field IncludeAll is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetIncludeAll() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll {
	if t != nil && t.IncludeAll != nil {
		return t.IncludeAll
	}
	return nil
}

// GetIncludeAny returns the value of the IncludeAny struct pointer
// from NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo. If the receiver or the field IncludeAny is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetIncludeAny() *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny {
	if t != nil && t.IncludeAny != nil {
		return t.IncludeAny
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFlagsTlv retrieves the value of the leaf FlagsTlv from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlagsTlv is set, it can
// safely use t.GetFlagsTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlagsTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetFlagsTlv() bool {
	if t == nil || t.FlagsTlv == nil {
		return true
	}
	return *t.FlagsTlv
}

// GetFlexAlgoName retrieves the value of the leaf FlexAlgoName from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoName is set, it can
// safely use t.GetFlexAlgoName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetFlexAlgoName() string {
	if t == nil || t.FlexAlgoName == nil {
		return ""
	}
	return *t.FlexAlgoName
}

// GetMetricType retrieves the value of the leaf MetricType from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetMetricType() E_NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType {
	if t == nil || t.MetricType == 0 {
		return NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType_igp
	}
	return t.MetricType
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlagsTlv == nil {
		var v bool = true
		t.FlagsTlv = &v
	}
	if t.MetricType == 0 {
		t.MetricType = NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType_igp
	}
	if t.Priority == nil {
		var v int32 = 100
		t.Priority = &v
	}
	t.Exclude.PopulateDefaults()
	t.IncludeAll.PopulateDefaults()
	t.IncludeAny.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlexAlgoName == nil {
		return nil, fmt.Errorf("nil value for key FlexAlgoName")
	}

	return map[string]interface{}{
		"flex-algo-name": *t.FlexAlgoName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo/exclude YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude struct {
	AdminGroup map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup `path:"admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) NewAdminGroup(GroupName string) (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) GetAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) AppendAdminGroup(v *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo/exclude/admin-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo/include-all YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll struct {
	AdminGroup map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup `path:"admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) NewAdminGroup(GroupName string) (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) GetAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) AppendAdminGroup(v *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo/include-all/admin-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo/include-any YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny struct {
	AdminGroup map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup `path:"admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) NewAdminGroup(GroupName string) (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) GetAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) AppendAdminGroup(v *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup represents the /nokia-conf/configure/routing-options/flexible-algorithm-definitions/flex-algo/include-any/admin-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup.
func (*NokiaConf_Configure_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_IfAttribute represents the /nokia-conf/configure/routing-options/if-attribute YANG schema element.
type NokiaConf_Configure_RoutingOptions_IfAttribute struct {
	AdminGroup         map[string]*NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup `path:"admin-group" module:"nokia-conf"`
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	SrlgGroup          map[string]*NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup  `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_IfAttribute) IsYANGGoStruct() {}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_RoutingOptions_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) NewAdminGroup(GroupName string) (*NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_RoutingOptions_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_RoutingOptions_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) GetAdminGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_RoutingOptions_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) AppendAdminGroup(v *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_RoutingOptions_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_RoutingOptions_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_RoutingOptions_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_RoutingOptions_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_IfAttribute.
func (*NokiaConf_Configure_RoutingOptions_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup represents the /nokia-conf/configure/routing-options/if-attribute/admin-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupName          *string  `path:"group-name" module:"nokia-conf"`
	Value              *uint32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup.
func (*NokiaConf_Configure_RoutingOptions_IfAttribute_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup represents the /nokia-conf/configure/routing-options/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
	PenaltyWeight      *uint32  `path:"penalty-weight" module:"nokia-conf"`
	Value              *int64   `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPenaltyWeight retrieves the value of the leaf PenaltyWeight from the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PenaltyWeight is set, it can
// safely use t.GetPenaltyWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PenaltyWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) GetPenaltyWeight() uint32 {
	if t == nil || t.PenaltyWeight == nil {
		return 0
	}
	return *t.PenaltyWeight
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PenaltyWeight == nil {
		var v uint32 = 0
		t.PenaltyWeight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_RoutingOptions_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_PolicyAccounting represents the /nokia-conf/configure/routing-options/policy-accounting YANG schema element.
type NokiaConf_Configure_RoutingOptions_PolicyAccounting struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyAcctTemplate map[string]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate `path:"policy-acct-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_PolicyAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting) IsYANGGoStruct() {}

// NewPolicyAcctTemplate creates a new entry in the PolicyAcctTemplate list of the
// NokiaConf_Configure_RoutingOptions_PolicyAccounting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) NewPolicyAcctTemplate(Name string) (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyAcctTemplate == nil {
		t.PolicyAcctTemplate = make(map[string]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyAcctTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyAcctTemplate", key)
	}

	t.PolicyAcctTemplate[key] = &NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate{
		Name: &Name,
	}

	return t.PolicyAcctTemplate[key], nil
}

// RenamePolicyAcctTemplate renames an entry in the list PolicyAcctTemplate within
// the NokiaConf_Configure_RoutingOptions_PolicyAccounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) RenamePolicyAcctTemplate(oldK, newK string) error {
	if _, ok := t.PolicyAcctTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyAcctTemplate", newK)
	}

	e, ok := t.PolicyAcctTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyAcctTemplate", oldK)
	}
	e.Name = &newK

	t.PolicyAcctTemplate[newK] = e
	delete(t.PolicyAcctTemplate, oldK)
	return nil
}

// GetOrCreatePolicyAcctTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) GetOrCreatePolicyAcctTemplate(Name string) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate {

	key := Name

	if v, ok := t.PolicyAcctTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyAcctTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyAcctTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPolicyAcctTemplate retrieves the value with the specified key from
// the PolicyAcctTemplate map field of NokiaConf_Configure_RoutingOptions_PolicyAccounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) GetPolicyAcctTemplate(Name string) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyAcctTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyAcctTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) DeletePolicyAcctTemplate(Name string) {
	key := Name

	delete(t.PolicyAcctTemplate, key)
}

// AppendPolicyAcctTemplate appends the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct to the
// list PolicyAcctTemplate of NokiaConf_Configure_RoutingOptions_PolicyAccounting. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) AppendPolicyAcctTemplate(v *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyAcctTemplate == nil {
		t.PolicyAcctTemplate = make(map[string]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate)
	}

	if _, ok := t.PolicyAcctTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyAcctTemplate %v", key)
	}

	t.PolicyAcctTemplate[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_PolicyAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_PolicyAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_PolicyAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicyAcctTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_PolicyAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_PolicyAccounting.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate represents the /nokia-conf/configure/routing-options/policy-accounting/policy-acct-template YANG schema element.
type NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct {
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	DestClass          map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass        `path:"dest-class" module:"nokia-conf"`
	DestinationClass   map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass `path:"destination-class" module:"nokia-conf"`
	Name               *string                                                                                             `path:"name" module:"nokia-conf"`
	Policer            map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer          `path:"policer" module:"nokia-conf"`
	SourceClass        map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass      `path:"source-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) IsYANGGoStruct() {}

// NewDestClass creates a new entry in the DestClass list of the
// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewDestClass(Index uint32) (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestClass == nil {
		t.DestClass = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestClass", key)
	}

	t.DestClass[key] = &NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass{
		Index: &Index,
	}

	return t.DestClass[key], nil
}

// RenameDestClass renames an entry in the list DestClass within
// the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenameDestClass(oldK, newK uint32) error {
	if _, ok := t.DestClass[newK]; ok {
		return fmt.Errorf("key %v already exists in DestClass", newK)
	}

	e, ok := t.DestClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestClass", oldK)
	}
	e.Index = &newK

	t.DestClass[newK] = e
	delete(t.DestClass, oldK)
	return nil
}

// GetOrCreateDestClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreateDestClass(Index uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass {

	key := Index

	if v, ok := t.DestClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestClass(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestClass got unexpected error: %v", err))
	}
	return v
}

// GetDestClass retrieves the value with the specified key from
// the DestClass map field of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetDestClass(Index uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.DestClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeleteDestClass(Index uint32) {
	key := Index

	delete(t.DestClass, key)
}

// AppendDestClass appends the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass struct to the
// list DestClass of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendDestClass(v *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestClass == nil {
		t.DestClass = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass)
	}

	if _, ok := t.DestClass[key]; ok {
		return fmt.Errorf("duplicate key for list DestClass %v", key)
	}

	t.DestClass[key] = v
	return nil
}

// NewDestinationClass creates a new entry in the DestinationClass list of the
// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewDestinationClass(Index uint32) (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationClass == nil {
		t.DestinationClass = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationClass", key)
	}

	t.DestinationClass[key] = &NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass{
		Index: &Index,
	}

	return t.DestinationClass[key], nil
}

// RenameDestinationClass renames an entry in the list DestinationClass within
// the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenameDestinationClass(oldK, newK uint32) error {
	if _, ok := t.DestinationClass[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationClass", newK)
	}

	e, ok := t.DestinationClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationClass", oldK)
	}
	e.Index = &newK

	t.DestinationClass[newK] = e
	delete(t.DestinationClass, oldK)
	return nil
}

// GetOrCreateDestinationClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreateDestinationClass(Index uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass {

	key := Index

	if v, ok := t.DestinationClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationClass(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationClass got unexpected error: %v", err))
	}
	return v
}

// GetDestinationClass retrieves the value with the specified key from
// the DestinationClass map field of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetDestinationClass(Index uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.DestinationClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeleteDestinationClass(Index uint32) {
	key := Index

	delete(t.DestinationClass, key)
}

// AppendDestinationClass appends the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass struct to the
// list DestinationClass of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendDestinationClass(v *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationClass == nil {
		t.DestinationClass = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass)
	}

	if _, ok := t.DestinationClass[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationClass %v", key)
	}

	t.DestinationClass[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewPolicer(PolicerId uint32) (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenamePolicer(oldK, newK uint32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreatePolicer(PolicerId uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetPolicer(PolicerId uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeletePolicer(PolicerId uint32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer struct to the
// list Policer of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendPolicer(v *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewSourceClass creates a new entry in the SourceClass list of the
// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewSourceClass(Index uint32) (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceClass == nil {
		t.SourceClass = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceClass", key)
	}

	t.SourceClass[key] = &NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass{
		Index: &Index,
	}

	return t.SourceClass[key], nil
}

// RenameSourceClass renames an entry in the list SourceClass within
// the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenameSourceClass(oldK, newK uint32) error {
	if _, ok := t.SourceClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceClass", newK)
	}

	e, ok := t.SourceClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceClass", oldK)
	}
	e.Index = &newK

	t.SourceClass[newK] = e
	delete(t.SourceClass, oldK)
	return nil
}

// GetOrCreateSourceClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreateSourceClass(Index uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass {

	key := Index

	if v, ok := t.SourceClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceClass(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceClass got unexpected error: %v", err))
	}
	return v
}

// GetSourceClass retrieves the value with the specified key from
// the SourceClass map field of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetSourceClass(Index uint32) *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.SourceClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeleteSourceClass(Index uint32) {
	key := Index

	delete(t.SourceClass, key)
}

// AppendSourceClass appends the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass struct to the
// list SourceClass of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendSourceClass(v *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceClass == nil {
		t.SourceClass = make(map[uint32]*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass)
	}

	if _, ok := t.SourceClass[key]; ok {
		return fmt.Errorf("duplicate key for list SourceClass %v", key)
	}

	t.SourceClass[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DestClass {
		e.PopulateDefaults()
	}
	for _, e := range t.DestinationClass {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass represents the /nokia-conf/configure/routing-options/policy-accounting/policy-acct-template/dest-class YANG schema element.
type NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	Policer            *uint32  `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) GetPolicer() uint32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass represents the /nokia-conf/configure/routing-options/policy-accounting/policy-acct-template/destination-class YANG schema element.
type NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	Policer            *uint32  `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) GetPolicer() uint32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer represents the /nokia-conf/configure/routing-options/policy-accounting/policy-acct-template/policer YANG schema element.
type NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxBurstSize       NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Union `path:"max-burst-size" module:"nokia-conf"`
	PeakRate           NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Union     `path:"peak-rate" module:"nokia-conf"`
	PolicerId          *uint32                                                                                           `path:"policer-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxBurstSize retrieves the value of the leaf MaxBurstSize from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBurstSize is set, it can
// safely use t.GetMaxBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBurstSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetMaxBurstSize() NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Union {
	if t == nil || t.MaxBurstSize == nil {
		return NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Enum_auto
	}
	return t.MaxBurstSize
}

// GetPeakRate retrieves the value of the leaf PeakRate from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRate is set, it can
// safely use t.GetPeakRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetPeakRate() NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Union {
	if t == nil || t.PeakRate == nil {
		return NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Enum_max
	}
	return t.PeakRate
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetPolicerId() uint32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBurstSize == nil {
		t.MaxBurstSize = NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Enum_auto
	}
	if t.PeakRate == nil {
		t.PeakRate = NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass represents the /nokia-conf/configure/routing-options/policy-accounting/policy-acct-template/source-class YANG schema element.
type NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass struct {
	Index *uint32 `path:"index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass.
func (*NokiaConf_Configure_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy represents the /nokia-conf/configure/routing-options/route-next-hop-policy YANG schema element.
type NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy struct {
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Template           map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) NewTemplate(TemplateName string) (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template{
		TemplateName: &TemplateName,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) RenameTemplate(oldK, newK string) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateName = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) GetOrCreateTemplate(TemplateName string) *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template {

	key := TemplateName

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) GetTemplate(TemplateName string) *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) DeleteTemplate(TemplateName string) {
	key := TemplateName

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct to the
// list Template of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) AppendTemplate(v *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template represents the /nokia-conf/configure/routing-options/route-next-hop-policy/template YANG schema element.
type NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct {
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                 `path:"description" module:"nokia-conf"`
	ExcludeGroup       map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup `path:"exclude-group" module:"nokia-conf"`
	IncludeGroup       map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup `path:"include-group" module:"nokia-conf"`
	NhType             E_NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_NhType                 `path:"nh-type" module:"nokia-conf"`
	ProtectionType     E_NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType         `path:"protection-type" module:"nokia-conf"`
	Srlg               *bool                                                                                   `path:"srlg" module:"nokia-conf"`
	TemplateName       *string                                                                                 `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) IsYANGGoStruct() {}

// NewExcludeGroup creates a new entry in the ExcludeGroup list of the
// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) NewExcludeGroup(GroupName string) (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeGroup == nil {
		t.ExcludeGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeGroup", key)
	}

	t.ExcludeGroup[key] = &NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup{
		GroupName: &GroupName,
	}

	return t.ExcludeGroup[key], nil
}

// RenameExcludeGroup renames an entry in the list ExcludeGroup within
// the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) RenameExcludeGroup(oldK, newK string) error {
	if _, ok := t.ExcludeGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeGroup", newK)
	}

	e, ok := t.ExcludeGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeGroup", oldK)
	}
	e.GroupName = &newK

	t.ExcludeGroup[newK] = e
	delete(t.ExcludeGroup, oldK)
	return nil
}

// GetOrCreateExcludeGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetOrCreateExcludeGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup {

	key := GroupName

	if v, ok := t.ExcludeGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeGroup got unexpected error: %v", err))
	}
	return v
}

// GetExcludeGroup retrieves the value with the specified key from
// the ExcludeGroup map field of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetExcludeGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.ExcludeGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) DeleteExcludeGroup(GroupName string) {
	key := GroupName

	delete(t.ExcludeGroup, key)
}

// AppendExcludeGroup appends the supplied NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup struct to the
// list ExcludeGroup of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) AppendExcludeGroup(v *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeGroup == nil {
		t.ExcludeGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup)
	}

	if _, ok := t.ExcludeGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeGroup %v", key)
	}

	t.ExcludeGroup[key] = v
	return nil
}

// NewIncludeGroup creates a new entry in the IncludeGroup list of the
// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) NewIncludeGroup(GroupName string) (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IncludeGroup == nil {
		t.IncludeGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IncludeGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IncludeGroup", key)
	}

	t.IncludeGroup[key] = &NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup{
		GroupName: &GroupName,
	}

	return t.IncludeGroup[key], nil
}

// RenameIncludeGroup renames an entry in the list IncludeGroup within
// the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) RenameIncludeGroup(oldK, newK string) error {
	if _, ok := t.IncludeGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in IncludeGroup", newK)
	}

	e, ok := t.IncludeGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IncludeGroup", oldK)
	}
	e.GroupName = &newK

	t.IncludeGroup[newK] = e
	delete(t.IncludeGroup, oldK)
	return nil
}

// GetOrCreateIncludeGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetOrCreateIncludeGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup {

	key := GroupName

	if v, ok := t.IncludeGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIncludeGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIncludeGroup got unexpected error: %v", err))
	}
	return v
}

// GetIncludeGroup retrieves the value with the specified key from
// the IncludeGroup map field of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetIncludeGroup(GroupName string) *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.IncludeGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteIncludeGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) DeleteIncludeGroup(GroupName string) {
	key := GroupName

	delete(t.IncludeGroup, key)
}

// AppendIncludeGroup appends the supplied NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup struct to the
// list IncludeGroup of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) AppendIncludeGroup(v *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IncludeGroup == nil {
		t.IncludeGroup = make(map[string]*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup)
	}

	if _, ok := t.IncludeGroup[key]; ok {
		return fmt.Errorf("duplicate key for list IncludeGroup %v", key)
	}

	t.IncludeGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetNhType retrieves the value of the leaf NhType from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NhType is set, it can
// safely use t.GetNhType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NhType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetNhType() E_NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_NhType {
	if t == nil || t.NhType == 0 {
		return NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_NhType_ip
	}
	return t.NhType
}

// GetProtectionType retrieves the value of the leaf ProtectionType from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectionType is set, it can
// safely use t.GetProtectionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetProtectionType() E_NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType {
	if t == nil || t.ProtectionType == 0 {
		return NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType_node
	}
	return t.ProtectionType
}

// GetSrlg retrieves the value of the leaf Srlg from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlg is set, it can
// safely use t.GetSrlg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetSrlg() bool {
	if t == nil || t.Srlg == nil {
		return false
	}
	return *t.Srlg
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NhType == 0 {
		t.NhType = NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_NhType_ip
	}
	if t.ProtectionType == 0 {
		t.ProtectionType = NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType_node
	}
	if t.Srlg == nil {
		var v bool = false
		t.Srlg = &v
	}
	for _, e := range t.ExcludeGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.IncludeGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup represents the /nokia-conf/configure/routing-options/route-next-hop-policy/template/exclude-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup represents the /nokia-conf/configure/routing-options/route-next-hop-policy/template/include-group YANG schema element.
type NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupName          *string  `path:"group-name" module:"nokia-conf"`
	Preference         *int32   `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) GetPreference() int32 {
	if t == nil || t.Preference == nil {
		return 255
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == nil {
		var v int32 = 255
		t.Preference = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup.
func (*NokiaConf_Configure_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa represents the /nokia-conf/configure/saa YANG schema element.
type NokiaConf_Configure_Saa struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Owner              map[NokiaConf_Configure_Saa_Owner_Key]*NokiaConf_Configure_Saa_Owner `path:"owner" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa) IsYANGGoStruct() {}

// NokiaConf_Configure_Saa_Owner_Key represents the key for list Owner of element /nokia-conf/configure/saa.
type NokiaConf_Configure_Saa_Owner_Key struct {
	OwnerName string `path:"owner-name"`
	Test      string `path:"test"`
}

// NewOwner creates a new entry in the Owner list of the
// NokiaConf_Configure_Saa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Saa) NewOwner(OwnerName string, Test string) (*NokiaConf_Configure_Saa_Owner, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Owner == nil {
		t.Owner = make(map[NokiaConf_Configure_Saa_Owner_Key]*NokiaConf_Configure_Saa_Owner)
	}

	key := NokiaConf_Configure_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Owner[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Owner", key)
	}

	t.Owner[key] = &NokiaConf_Configure_Saa_Owner{
		OwnerName: &OwnerName,
		Test:      &Test,
	}

	return t.Owner[key], nil
}

// RenameOwner renames an entry in the list Owner within
// the NokiaConf_Configure_Saa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Saa) RenameOwner(oldK, newK NokiaConf_Configure_Saa_Owner_Key) error {
	if _, ok := t.Owner[newK]; ok {
		return fmt.Errorf("key %v already exists in Owner", newK)
	}

	e, ok := t.Owner[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Owner", oldK)
	}
	e.OwnerName = &newK.OwnerName
	e.Test = &newK.Test

	t.Owner[newK] = e
	delete(t.Owner, oldK)
	return nil
}

// GetOrCreateOwner retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Saa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Saa) GetOrCreateOwner(OwnerName string, Test string) *NokiaConf_Configure_Saa_Owner {

	key := NokiaConf_Configure_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	if v, ok := t.Owner[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOwner(OwnerName, Test)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOwner got unexpected error: %v", err))
	}
	return v
}

// GetOwner retrieves the value with the specified key from
// the Owner map field of NokiaConf_Configure_Saa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Saa) GetOwner(OwnerName string, Test string) *NokiaConf_Configure_Saa_Owner {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	if lm, ok := t.Owner[key]; ok {
		return lm
	}
	return nil
}

// DeleteOwner deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Saa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Saa) DeleteOwner(OwnerName string, Test string) {
	key := NokiaConf_Configure_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	delete(t.Owner, key)
}

// AppendOwner appends the supplied NokiaConf_Configure_Saa_Owner struct to the
// list Owner of NokiaConf_Configure_Saa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Saa_Owner already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Saa) AppendOwner(v *NokiaConf_Configure_Saa_Owner) error {
	if v.OwnerName == nil {
		return fmt.Errorf("invalid nil key for OwnerName")
	}

	if v.Test == nil {
		return fmt.Errorf("invalid nil key for Test")
	}

	key := NokiaConf_Configure_Saa_Owner_Key{
		OwnerName: *v.OwnerName,
		Test:      *v.Test,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Owner == nil {
		t.Owner = make(map[NokiaConf_Configure_Saa_Owner_Key]*NokiaConf_Configure_Saa_Owner)
	}

	if _, ok := t.Owner[key]; ok {
		return fmt.Errorf("duplicate key for list Owner %v", key)
	}

	t.Owner[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Saa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Saa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Owner {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa.
func (*NokiaConf_Configure_Saa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner represents the /nokia-conf/configure/saa/owner YANG schema element.
type NokiaConf_Configure_Saa_Owner struct {
	AccountingPolicy   *uint32                                                                                        `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Continuous         *bool                                                                                          `path:"continuous" module:"nokia-conf"`
	Description        *string                                                                                        `path:"description" module:"nokia-conf"`
	JitterEvent        map[NokiaConf_Configure_Saa_Owner_JitterEvent_Key]*NokiaConf_Configure_Saa_Owner_JitterEvent   `path:"jitter-event" module:"nokia-conf"`
	LatencyEvent       map[NokiaConf_Configure_Saa_Owner_LatencyEvent_Key]*NokiaConf_Configure_Saa_Owner_LatencyEvent `path:"latency-event" module:"nokia-conf"`
	LossEvent          map[NokiaConf_Configure_Saa_Owner_LossEvent_Key]*NokiaConf_Configure_Saa_Owner_LossEvent       `path:"loss-event" module:"nokia-conf"`
	OwnerName          *string                                                                                        `path:"owner-name" module:"nokia-conf"`
	ProbeHistory       E_NokiaConf_Configure_Saa_Owner_ProbeHistory                                                   `path:"probe-history" module:"nokia-conf"`
	Test               *string                                                                                        `path:"test" module:"nokia-conf"`
	Type               *NokiaConf_Configure_Saa_Owner_Type                                                            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner) IsYANGGoStruct() {}

// NokiaConf_Configure_Saa_Owner_JitterEvent_Key represents the key for list JitterEvent of element /nokia-conf/configure/saa/owner.
type NokiaConf_Configure_Saa_Owner_JitterEvent_Key struct {
	Direction     E_NokiaTypesOam_SaaThresholdDirection                     `path:"direction"`
	ThresholdType E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType `path:"threshold-type"`
}

// NokiaConf_Configure_Saa_Owner_LatencyEvent_Key represents the key for list LatencyEvent of element /nokia-conf/configure/saa/owner.
type NokiaConf_Configure_Saa_Owner_LatencyEvent_Key struct {
	Direction     E_NokiaTypesOam_SaaThresholdDirection                      `path:"direction"`
	ThresholdType E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType `path:"threshold-type"`
}

// NokiaConf_Configure_Saa_Owner_LossEvent_Key represents the key for list LossEvent of element /nokia-conf/configure/saa/owner.
type NokiaConf_Configure_Saa_Owner_LossEvent_Key struct {
	Direction     E_NokiaTypesOam_SaaThresholdDirection                   `path:"direction"`
	ThresholdType E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType `path:"threshold-type"`
}

// NewJitterEvent creates a new entry in the JitterEvent list of the
// NokiaConf_Configure_Saa_Owner struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Saa_Owner) NewJitterEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType) (*NokiaConf_Configure_Saa_Owner_JitterEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.JitterEvent == nil {
		t.JitterEvent = make(map[NokiaConf_Configure_Saa_Owner_JitterEvent_Key]*NokiaConf_Configure_Saa_Owner_JitterEvent)
	}

	key := NokiaConf_Configure_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.JitterEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list JitterEvent", key)
	}

	t.JitterEvent[key] = &NokiaConf_Configure_Saa_Owner_JitterEvent{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	return t.JitterEvent[key], nil
}

// RenameJitterEvent renames an entry in the list JitterEvent within
// the NokiaConf_Configure_Saa_Owner struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Saa_Owner) RenameJitterEvent(oldK, newK NokiaConf_Configure_Saa_Owner_JitterEvent_Key) error {
	if _, ok := t.JitterEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in JitterEvent", newK)
	}

	e, ok := t.JitterEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in JitterEvent", oldK)
	}
	e.Direction = newK.Direction
	e.ThresholdType = newK.ThresholdType

	t.JitterEvent[newK] = e
	delete(t.JitterEvent, oldK)
	return nil
}

// GetOrCreateJitterEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Saa_Owner. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Saa_Owner) GetOrCreateJitterEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType) *NokiaConf_Configure_Saa_Owner_JitterEvent {

	key := NokiaConf_Configure_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if v, ok := t.JitterEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewJitterEvent(Direction, ThresholdType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateJitterEvent got unexpected error: %v", err))
	}
	return v
}

// GetJitterEvent retrieves the value with the specified key from
// the JitterEvent map field of NokiaConf_Configure_Saa_Owner. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Saa_Owner) GetJitterEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType) *NokiaConf_Configure_Saa_Owner_JitterEvent {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if lm, ok := t.JitterEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteJitterEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Saa_Owner. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Saa_Owner) DeleteJitterEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType) {
	key := NokiaConf_Configure_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	delete(t.JitterEvent, key)
}

// AppendJitterEvent appends the supplied NokiaConf_Configure_Saa_Owner_JitterEvent struct to the
// list JitterEvent of NokiaConf_Configure_Saa_Owner. If the key value(s) specified in
// the supplied NokiaConf_Configure_Saa_Owner_JitterEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Saa_Owner) AppendJitterEvent(v *NokiaConf_Configure_Saa_Owner_JitterEvent) error {
	key := NokiaConf_Configure_Saa_Owner_JitterEvent_Key{
		Direction:     v.Direction,
		ThresholdType: v.ThresholdType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.JitterEvent == nil {
		t.JitterEvent = make(map[NokiaConf_Configure_Saa_Owner_JitterEvent_Key]*NokiaConf_Configure_Saa_Owner_JitterEvent)
	}

	if _, ok := t.JitterEvent[key]; ok {
		return fmt.Errorf("duplicate key for list JitterEvent %v", key)
	}

	t.JitterEvent[key] = v
	return nil
}

// NewLatencyEvent creates a new entry in the LatencyEvent list of the
// NokiaConf_Configure_Saa_Owner struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Saa_Owner) NewLatencyEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType) (*NokiaConf_Configure_Saa_Owner_LatencyEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LatencyEvent == nil {
		t.LatencyEvent = make(map[NokiaConf_Configure_Saa_Owner_LatencyEvent_Key]*NokiaConf_Configure_Saa_Owner_LatencyEvent)
	}

	key := NokiaConf_Configure_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LatencyEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LatencyEvent", key)
	}

	t.LatencyEvent[key] = &NokiaConf_Configure_Saa_Owner_LatencyEvent{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	return t.LatencyEvent[key], nil
}

// RenameLatencyEvent renames an entry in the list LatencyEvent within
// the NokiaConf_Configure_Saa_Owner struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Saa_Owner) RenameLatencyEvent(oldK, newK NokiaConf_Configure_Saa_Owner_LatencyEvent_Key) error {
	if _, ok := t.LatencyEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in LatencyEvent", newK)
	}

	e, ok := t.LatencyEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LatencyEvent", oldK)
	}
	e.Direction = newK.Direction
	e.ThresholdType = newK.ThresholdType

	t.LatencyEvent[newK] = e
	delete(t.LatencyEvent, oldK)
	return nil
}

// GetOrCreateLatencyEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Saa_Owner. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Saa_Owner) GetOrCreateLatencyEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType) *NokiaConf_Configure_Saa_Owner_LatencyEvent {

	key := NokiaConf_Configure_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if v, ok := t.LatencyEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLatencyEvent(Direction, ThresholdType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLatencyEvent got unexpected error: %v", err))
	}
	return v
}

// GetLatencyEvent retrieves the value with the specified key from
// the LatencyEvent map field of NokiaConf_Configure_Saa_Owner. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Saa_Owner) GetLatencyEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType) *NokiaConf_Configure_Saa_Owner_LatencyEvent {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if lm, ok := t.LatencyEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteLatencyEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Saa_Owner. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Saa_Owner) DeleteLatencyEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType) {
	key := NokiaConf_Configure_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	delete(t.LatencyEvent, key)
}

// AppendLatencyEvent appends the supplied NokiaConf_Configure_Saa_Owner_LatencyEvent struct to the
// list LatencyEvent of NokiaConf_Configure_Saa_Owner. If the key value(s) specified in
// the supplied NokiaConf_Configure_Saa_Owner_LatencyEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Saa_Owner) AppendLatencyEvent(v *NokiaConf_Configure_Saa_Owner_LatencyEvent) error {
	key := NokiaConf_Configure_Saa_Owner_LatencyEvent_Key{
		Direction:     v.Direction,
		ThresholdType: v.ThresholdType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LatencyEvent == nil {
		t.LatencyEvent = make(map[NokiaConf_Configure_Saa_Owner_LatencyEvent_Key]*NokiaConf_Configure_Saa_Owner_LatencyEvent)
	}

	if _, ok := t.LatencyEvent[key]; ok {
		return fmt.Errorf("duplicate key for list LatencyEvent %v", key)
	}

	t.LatencyEvent[key] = v
	return nil
}

// NewLossEvent creates a new entry in the LossEvent list of the
// NokiaConf_Configure_Saa_Owner struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Saa_Owner) NewLossEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType) (*NokiaConf_Configure_Saa_Owner_LossEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LossEvent == nil {
		t.LossEvent = make(map[NokiaConf_Configure_Saa_Owner_LossEvent_Key]*NokiaConf_Configure_Saa_Owner_LossEvent)
	}

	key := NokiaConf_Configure_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LossEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LossEvent", key)
	}

	t.LossEvent[key] = &NokiaConf_Configure_Saa_Owner_LossEvent{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	return t.LossEvent[key], nil
}

// RenameLossEvent renames an entry in the list LossEvent within
// the NokiaConf_Configure_Saa_Owner struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Saa_Owner) RenameLossEvent(oldK, newK NokiaConf_Configure_Saa_Owner_LossEvent_Key) error {
	if _, ok := t.LossEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in LossEvent", newK)
	}

	e, ok := t.LossEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LossEvent", oldK)
	}
	e.Direction = newK.Direction
	e.ThresholdType = newK.ThresholdType

	t.LossEvent[newK] = e
	delete(t.LossEvent, oldK)
	return nil
}

// GetOrCreateLossEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Saa_Owner. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Saa_Owner) GetOrCreateLossEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType) *NokiaConf_Configure_Saa_Owner_LossEvent {

	key := NokiaConf_Configure_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if v, ok := t.LossEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLossEvent(Direction, ThresholdType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLossEvent got unexpected error: %v", err))
	}
	return v
}

// GetLossEvent retrieves the value with the specified key from
// the LossEvent map field of NokiaConf_Configure_Saa_Owner. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Saa_Owner) GetLossEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType) *NokiaConf_Configure_Saa_Owner_LossEvent {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if lm, ok := t.LossEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteLossEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Saa_Owner. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Saa_Owner) DeleteLossEvent(Direction E_NokiaTypesOam_SaaThresholdDirection, ThresholdType E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType) {
	key := NokiaConf_Configure_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	delete(t.LossEvent, key)
}

// AppendLossEvent appends the supplied NokiaConf_Configure_Saa_Owner_LossEvent struct to the
// list LossEvent of NokiaConf_Configure_Saa_Owner. If the key value(s) specified in
// the supplied NokiaConf_Configure_Saa_Owner_LossEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Saa_Owner) AppendLossEvent(v *NokiaConf_Configure_Saa_Owner_LossEvent) error {
	key := NokiaConf_Configure_Saa_Owner_LossEvent_Key{
		Direction:     v.Direction,
		ThresholdType: v.ThresholdType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LossEvent == nil {
		t.LossEvent = make(map[NokiaConf_Configure_Saa_Owner_LossEvent_Key]*NokiaConf_Configure_Saa_Owner_LossEvent)
	}

	if _, ok := t.LossEvent[key]; ok {
		return fmt.Errorf("duplicate key for list LossEvent %v", key)
	}

	t.LossEvent[key] = v
	return nil
}

// GetOrCreateType retrieves the value of the Type field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Saa_Owner) GetOrCreateType() *NokiaConf_Configure_Saa_Owner_Type {
	if t.Type != nil {
		return t.Type
	}
	t.Type = &NokiaConf_Configure_Saa_Owner_Type{}
	return t.Type
}

// GetType returns the value of the Type struct pointer
// from NokiaConf_Configure_Saa_Owner. If the receiver or the field Type is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Saa_Owner) GetType() *NokiaConf_Configure_Saa_Owner_Type {
	if t != nil && t.Type != nil {
		return t.Type
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetContinuous retrieves the value of the leaf Continuous from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Continuous is set, it can
// safely use t.GetContinuous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Continuous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetContinuous() bool {
	if t == nil || t.Continuous == nil {
		return false
	}
	return *t.Continuous
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOwnerName retrieves the value of the leaf OwnerName from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OwnerName is set, it can
// safely use t.GetOwnerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OwnerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetOwnerName() string {
	if t == nil || t.OwnerName == nil {
		return ""
	}
	return *t.OwnerName
}

// GetProbeHistory retrieves the value of the leaf ProbeHistory from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbeHistory is set, it can
// safely use t.GetProbeHistory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbeHistory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetProbeHistory() E_NokiaConf_Configure_Saa_Owner_ProbeHistory {
	if t == nil || t.ProbeHistory == 0 {
		return NokiaConf_Configure_Saa_Owner_ProbeHistory_auto
	}
	return t.ProbeHistory
}

// GetTest retrieves the value of the leaf Test from the NokiaConf_Configure_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Test is set, it can
// safely use t.GetTest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Test == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner) GetTest() string {
	if t == nil || t.Test == nil {
		return ""
	}
	return *t.Test
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Continuous == nil {
		var v bool = false
		t.Continuous = &v
	}
	if t.ProbeHistory == 0 {
		t.ProbeHistory = NokiaConf_Configure_Saa_Owner_ProbeHistory_auto
	}
	t.Type.PopulateDefaults()
	for _, e := range t.JitterEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.LatencyEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.LossEvent {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Saa_Owner struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Saa_Owner) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OwnerName == nil {
		return nil, fmt.Errorf("nil value for key OwnerName")
	}

	if t.Test == nil {
		return nil, fmt.Errorf("nil value for key Test")
	}

	return map[string]interface{}{
		"owner-name": *t.OwnerName,
		"test":       *t.Test,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner.
func (*NokiaConf_Configure_Saa_Owner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner_JitterEvent represents the /nokia-conf/configure/saa/owner/jitter-event YANG schema element.
type NokiaConf_Configure_Saa_Owner_JitterEvent struct {
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesOam_SaaThresholdDirection                     `path:"direction" module:"nokia-conf"`
	Threshold          *uint32                                                   `path:"threshold" module:"nokia-conf"`
	ThresholdType      E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType `path:"threshold-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner_JitterEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner_JitterEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) GetDirection() E_NokiaTypesOam_SaaThresholdDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetThresholdType retrieves the value of the leaf ThresholdType from the NokiaConf_Configure_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdType is set, it can
// safely use t.GetThresholdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) GetThresholdType() E_NokiaConf_Configure_Saa_Owner_JitterEvent_ThresholdType {
	if t == nil || t.ThresholdType == 0 {
		return 0
	}
	return t.ThresholdType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner_JitterEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Saa_Owner_JitterEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":      t.Direction,
		"threshold-type": t.ThresholdType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner_JitterEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner_JitterEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner_JitterEvent.
func (*NokiaConf_Configure_Saa_Owner_JitterEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner_LatencyEvent represents the /nokia-conf/configure/saa/owner/latency-event YANG schema element.
type NokiaConf_Configure_Saa_Owner_LatencyEvent struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesOam_SaaThresholdDirection                      `path:"direction" module:"nokia-conf"`
	Threshold          *uint32                                                    `path:"threshold" module:"nokia-conf"`
	ThresholdType      E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType `path:"threshold-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner_LatencyEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner_LatencyEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) GetDirection() E_NokiaTypesOam_SaaThresholdDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetThresholdType retrieves the value of the leaf ThresholdType from the NokiaConf_Configure_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdType is set, it can
// safely use t.GetThresholdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) GetThresholdType() E_NokiaConf_Configure_Saa_Owner_LatencyEvent_ThresholdType {
	if t == nil || t.ThresholdType == 0 {
		return 0
	}
	return t.ThresholdType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner_LatencyEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Saa_Owner_LatencyEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":      t.Direction,
		"threshold-type": t.ThresholdType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner_LatencyEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner_LatencyEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner_LatencyEvent.
func (*NokiaConf_Configure_Saa_Owner_LatencyEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner_LossEvent represents the /nokia-conf/configure/saa/owner/loss-event YANG schema element.
type NokiaConf_Configure_Saa_Owner_LossEvent struct {
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesOam_SaaThresholdDirection                   `path:"direction" module:"nokia-conf"`
	Threshold          *uint32                                                 `path:"threshold" module:"nokia-conf"`
	ThresholdType      E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType `path:"threshold-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner_LossEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner_LossEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) GetDirection() E_NokiaTypesOam_SaaThresholdDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetThresholdType retrieves the value of the leaf ThresholdType from the NokiaConf_Configure_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdType is set, it can
// safely use t.GetThresholdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) GetThresholdType() E_NokiaConf_Configure_Saa_Owner_LossEvent_ThresholdType {
	if t == nil || t.ThresholdType == 0 {
		return 0
	}
	return t.ThresholdType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner_LossEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Saa_Owner_LossEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":      t.Direction,
		"threshold-type": t.ThresholdType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner_LossEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner_LossEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner_LossEvent.
func (*NokiaConf_Configure_Saa_Owner_LossEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner_Type represents the /nokia-conf/configure/saa/owner/type YANG schema element.
type NokiaConf_Configure_Saa_Owner_Type struct {
	IcmpPing *NokiaConf_Configure_Saa_Owner_Type_IcmpPing `path:"icmp-ping" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner_Type implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner_Type) IsYANGGoStruct() {}

// GetOrCreateIcmpPing retrieves the value of the IcmpPing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Saa_Owner_Type) GetOrCreateIcmpPing() *NokiaConf_Configure_Saa_Owner_Type_IcmpPing {
	if t.IcmpPing != nil {
		return t.IcmpPing
	}
	t.IcmpPing = &NokiaConf_Configure_Saa_Owner_Type_IcmpPing{}
	return t.IcmpPing
}

// GetIcmpPing returns the value of the IcmpPing struct pointer
// from NokiaConf_Configure_Saa_Owner_Type. If the receiver or the field IcmpPing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Saa_Owner_Type) GetIcmpPing() *NokiaConf_Configure_Saa_Owner_Type_IcmpPing {
	if t != nil && t.IcmpPing != nil {
		return t.IcmpPing
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner_Type
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner_Type) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IcmpPing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_Type) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner_Type"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_Type) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner_Type) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner_Type.
func (*NokiaConf_Configure_Saa_Owner_Type) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner_Type_IcmpPing represents the /nokia-conf/configure/saa/owner/type/icmp-ping YANG schema element.
type NokiaConf_Configure_Saa_Owner_Type_IcmpPing struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	BypassRouting      *bool                                                      `path:"bypass-routing" module:"nokia-conf"`
	Count              *uint32                                                    `path:"count" module:"nokia-conf"`
	DestinationAddress *string                                                    `path:"destination-address" module:"nokia-conf"`
	DoNotFragment      *bool                                                      `path:"do-not-fragment" module:"nokia-conf"`
	Interface          *string                                                    `path:"interface" module:"nokia-conf"`
	Interval           NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Interval_Union `path:"interval" module:"nokia-conf"`
	NextHopAddress     *string                                                    `path:"next-hop-address" module:"nokia-conf"`
	Pattern            NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Pattern_Union  `path:"pattern" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos           `path:"qos" module:"nokia-conf"`
	RouterInstance     *string                                                    `path:"router-instance" module:"nokia-conf"`
	Size               *uint32                                                    `path:"size" module:"nokia-conf"`
	SourceAddress      *string                                                    `path:"source-address" module:"nokia-conf"`
	Timeout            *uint32                                                    `path:"timeout" module:"nokia-conf"`
	Ttl                *uint32                                                    `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner_Type_IcmpPing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner_Type_IcmpPing) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetOrCreateQos() *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Saa_Owner_Type_IcmpPing. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetQos() *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBypassRouting retrieves the value of the leaf BypassRouting from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassRouting is set, it can
// safely use t.GetBypassRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetBypassRouting() bool {
	if t == nil || t.BypassRouting == nil {
		return false
	}
	return *t.BypassRouting
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 5
	}
	return *t.Count
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDoNotFragment retrieves the value of the leaf DoNotFragment from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DoNotFragment is set, it can
// safely use t.GetDoNotFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DoNotFragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetDoNotFragment() bool {
	if t == nil || t.DoNotFragment == nil {
		return false
	}
	return *t.DoNotFragment
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetInterval() NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(1)
	}
	return t.Interval
}

// GetNextHopAddress retrieves the value of the leaf NextHopAddress from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopAddress is set, it can
// safely use t.GetNextHopAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetNextHopAddress() string {
	if t == nil || t.NextHopAddress == nil {
		return ""
	}
	return *t.NextHopAddress
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetPattern() NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Pattern_Union {
	if t == nil || t.Pattern == nil {
		return NokiaTypesOam_PaddingPattern_Enum_sequential
	}
	return t.Pattern
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 56
	}
	return *t.Size
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 64
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner_Type_IcmpPing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BypassRouting == nil {
		var v bool = false
		t.BypassRouting = &v
	}
	if t.Count == nil {
		var v uint32 = 5
		t.Count = &v
	}
	if t.DoNotFragment == nil {
		var v bool = false
		t.DoNotFragment = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(1)
	}
	if t.Pattern == nil {
		t.Pattern = NokiaTypesOam_PaddingPattern_Enum_sequential
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.Size == nil {
		var v uint32 = 56
		t.Size = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.Ttl == nil {
		var v uint32 = 64
		t.Ttl = &v
	}
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner_Type_IcmpPing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner_Type_IcmpPing.
func (*NokiaConf_Configure_Saa_Owner_Type_IcmpPing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos represents the /nokia-conf/configure/saa/owner/type/icmp-ping/qos YANG schema element.
type NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos struct {
	Fc  E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Tos *uint32                 `path:"tos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_nc
	}
	return t.Fc
}

// GetTos retrieves the value of the leaf Tos from the NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tos is set, it can
// safely use t.GetTos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) GetTos() uint32 {
	if t == nil || t.Tos == nil {
		return 0
	}
	return *t.Tos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_nc
	}
	if t.Tos == nil {
		var v uint32 = 0
		t.Tos = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos.
func (*NokiaConf_Configure_Saa_Owner_Type_IcmpPing_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite represents the /nokia-conf/configure/satellite YANG schema element.
type NokiaConf_Configure_Satellite struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	EthernetSatellite  map[uint32]*NokiaConf_Configure_Satellite_EthernetSatellite `path:"ethernet-satellite" module:"nokia-conf"`
	FileTransfer       *NokiaConf_Configure_Satellite_FileTransfer                 `path:"file-transfer" module:"nokia-conf"`
	PortTemplate       map[string]*NokiaConf_Configure_Satellite_PortTemplate      `path:"port-template" module:"nokia-conf"`
	PortTopology       map[string]*NokiaConf_Configure_Satellite_PortTopology      `path:"port-topology" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite) IsYANGGoStruct() {}

// NewEthernetSatellite creates a new entry in the EthernetSatellite list of the
// NokiaConf_Configure_Satellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Satellite) NewEthernetSatellite(SatelliteId uint32) (*NokiaConf_Configure_Satellite_EthernetSatellite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSatellite == nil {
		t.EthernetSatellite = make(map[uint32]*NokiaConf_Configure_Satellite_EthernetSatellite)
	}

	key := SatelliteId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthernetSatellite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthernetSatellite", key)
	}

	t.EthernetSatellite[key] = &NokiaConf_Configure_Satellite_EthernetSatellite{
		SatelliteId: &SatelliteId,
	}

	return t.EthernetSatellite[key], nil
}

// RenameEthernetSatellite renames an entry in the list EthernetSatellite within
// the NokiaConf_Configure_Satellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Satellite) RenameEthernetSatellite(oldK, newK uint32) error {
	if _, ok := t.EthernetSatellite[newK]; ok {
		return fmt.Errorf("key %v already exists in EthernetSatellite", newK)
	}

	e, ok := t.EthernetSatellite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthernetSatellite", oldK)
	}
	e.SatelliteId = &newK

	t.EthernetSatellite[newK] = e
	delete(t.EthernetSatellite, oldK)
	return nil
}

// GetOrCreateEthernetSatellite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Satellite) GetOrCreateEthernetSatellite(SatelliteId uint32) *NokiaConf_Configure_Satellite_EthernetSatellite {

	key := SatelliteId

	if v, ok := t.EthernetSatellite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthernetSatellite(SatelliteId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthernetSatellite got unexpected error: %v", err))
	}
	return v
}

// GetEthernetSatellite retrieves the value with the specified key from
// the EthernetSatellite map field of NokiaConf_Configure_Satellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Satellite) GetEthernetSatellite(SatelliteId uint32) *NokiaConf_Configure_Satellite_EthernetSatellite {

	if t == nil {
		return nil
	}

	key := SatelliteId

	if lm, ok := t.EthernetSatellite[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthernetSatellite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Satellite) DeleteEthernetSatellite(SatelliteId uint32) {
	key := SatelliteId

	delete(t.EthernetSatellite, key)
}

// AppendEthernetSatellite appends the supplied NokiaConf_Configure_Satellite_EthernetSatellite struct to the
// list EthernetSatellite of NokiaConf_Configure_Satellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Satellite_EthernetSatellite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Satellite) AppendEthernetSatellite(v *NokiaConf_Configure_Satellite_EthernetSatellite) error {
	if v.SatelliteId == nil {
		return fmt.Errorf("invalid nil key received for SatelliteId")
	}

	key := *v.SatelliteId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSatellite == nil {
		t.EthernetSatellite = make(map[uint32]*NokiaConf_Configure_Satellite_EthernetSatellite)
	}

	if _, ok := t.EthernetSatellite[key]; ok {
		return fmt.Errorf("duplicate key for list EthernetSatellite %v", key)
	}

	t.EthernetSatellite[key] = v
	return nil
}

// NewPortTemplate creates a new entry in the PortTemplate list of the
// NokiaConf_Configure_Satellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Satellite) NewPortTemplate(TemplateName string) (*NokiaConf_Configure_Satellite_PortTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTemplate == nil {
		t.PortTemplate = make(map[string]*NokiaConf_Configure_Satellite_PortTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortTemplate", key)
	}

	t.PortTemplate[key] = &NokiaConf_Configure_Satellite_PortTemplate{
		TemplateName: &TemplateName,
	}

	return t.PortTemplate[key], nil
}

// RenamePortTemplate renames an entry in the list PortTemplate within
// the NokiaConf_Configure_Satellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Satellite) RenamePortTemplate(oldK, newK string) error {
	if _, ok := t.PortTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PortTemplate", newK)
	}

	e, ok := t.PortTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortTemplate", oldK)
	}
	e.TemplateName = &newK

	t.PortTemplate[newK] = e
	delete(t.PortTemplate, oldK)
	return nil
}

// GetOrCreatePortTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Satellite) GetOrCreatePortTemplate(TemplateName string) *NokiaConf_Configure_Satellite_PortTemplate {

	key := TemplateName

	if v, ok := t.PortTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPortTemplate retrieves the value with the specified key from
// the PortTemplate map field of NokiaConf_Configure_Satellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Satellite) GetPortTemplate(TemplateName string) *NokiaConf_Configure_Satellite_PortTemplate {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.PortTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePortTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Satellite) DeletePortTemplate(TemplateName string) {
	key := TemplateName

	delete(t.PortTemplate, key)
}

// AppendPortTemplate appends the supplied NokiaConf_Configure_Satellite_PortTemplate struct to the
// list PortTemplate of NokiaConf_Configure_Satellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Satellite_PortTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Satellite) AppendPortTemplate(v *NokiaConf_Configure_Satellite_PortTemplate) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTemplate == nil {
		t.PortTemplate = make(map[string]*NokiaConf_Configure_Satellite_PortTemplate)
	}

	if _, ok := t.PortTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PortTemplate %v", key)
	}

	t.PortTemplate[key] = v
	return nil
}

// NewPortTopology creates a new entry in the PortTopology list of the
// NokiaConf_Configure_Satellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Satellite) NewPortTopology(LocalPortId string) (*NokiaConf_Configure_Satellite_PortTopology, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTopology == nil {
		t.PortTopology = make(map[string]*NokiaConf_Configure_Satellite_PortTopology)
	}

	key := LocalPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortTopology[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortTopology", key)
	}

	t.PortTopology[key] = &NokiaConf_Configure_Satellite_PortTopology{
		LocalPortId: &LocalPortId,
	}

	return t.PortTopology[key], nil
}

// RenamePortTopology renames an entry in the list PortTopology within
// the NokiaConf_Configure_Satellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Satellite) RenamePortTopology(oldK, newK string) error {
	if _, ok := t.PortTopology[newK]; ok {
		return fmt.Errorf("key %v already exists in PortTopology", newK)
	}

	e, ok := t.PortTopology[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortTopology", oldK)
	}
	e.LocalPortId = &newK

	t.PortTopology[newK] = e
	delete(t.PortTopology, oldK)
	return nil
}

// GetOrCreatePortTopology retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Satellite) GetOrCreatePortTopology(LocalPortId string) *NokiaConf_Configure_Satellite_PortTopology {

	key := LocalPortId

	if v, ok := t.PortTopology[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortTopology(LocalPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortTopology got unexpected error: %v", err))
	}
	return v
}

// GetPortTopology retrieves the value with the specified key from
// the PortTopology map field of NokiaConf_Configure_Satellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Satellite) GetPortTopology(LocalPortId string) *NokiaConf_Configure_Satellite_PortTopology {

	if t == nil {
		return nil
	}

	key := LocalPortId

	if lm, ok := t.PortTopology[key]; ok {
		return lm
	}
	return nil
}

// DeletePortTopology deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Satellite) DeletePortTopology(LocalPortId string) {
	key := LocalPortId

	delete(t.PortTopology, key)
}

// AppendPortTopology appends the supplied NokiaConf_Configure_Satellite_PortTopology struct to the
// list PortTopology of NokiaConf_Configure_Satellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Satellite_PortTopology already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Satellite) AppendPortTopology(v *NokiaConf_Configure_Satellite_PortTopology) error {
	if v.LocalPortId == nil {
		return fmt.Errorf("invalid nil key received for LocalPortId")
	}

	key := *v.LocalPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTopology == nil {
		t.PortTopology = make(map[string]*NokiaConf_Configure_Satellite_PortTopology)
	}

	if _, ok := t.PortTopology[key]; ok {
		return fmt.Errorf("duplicate key for list PortTopology %v", key)
	}

	t.PortTopology[key] = v
	return nil
}

// GetOrCreateFileTransfer retrieves the value of the FileTransfer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Satellite) GetOrCreateFileTransfer() *NokiaConf_Configure_Satellite_FileTransfer {
	if t.FileTransfer != nil {
		return t.FileTransfer
	}
	t.FileTransfer = &NokiaConf_Configure_Satellite_FileTransfer{}
	return t.FileTransfer
}

// GetFileTransfer returns the value of the FileTransfer struct pointer
// from NokiaConf_Configure_Satellite. If the receiver or the field FileTransfer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Satellite) GetFileTransfer() *NokiaConf_Configure_Satellite_FileTransfer {
	if t != nil && t.FileTransfer != nil {
		return t.FileTransfer
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FileTransfer.PopulateDefaults()
	for _, e := range t.EthernetSatellite {
		e.PopulateDefaults()
	}
	for _, e := range t.PortTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.PortTopology {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite.
func (*NokiaConf_Configure_Satellite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite_EthernetSatellite represents the /nokia-conf/configure/satellite/ethernet-satellite YANG schema element.
type NokiaConf_Configure_Satellite_EthernetSatellite struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientDownDelay    *int32                                                              `path:"client-down-delay" module:"nokia-conf"`
	ConsoleAccess      E_NokiaTypesSros_AdminState                                         `path:"console-access" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	Feature            []E_NokiaConf_Configure_Satellite_EthernetSatellite_Feature         `path:"feature" module:"nokia-conf"`
	MacAddress         *string                                                             `path:"mac-address" module:"nokia-conf"`
	PortMap            map[string]*NokiaConf_Configure_Satellite_EthernetSatellite_PortMap `path:"port-map" module:"nokia-conf"`
	PortTemplate       *string                                                             `path:"port-template" module:"nokia-conf"`
	PtpTc              *bool                                                               `path:"ptp-tc" module:"nokia-conf"`
	SatType            E_NokiaTypesChassis_SatType                                         `path:"sat-type" module:"nokia-conf"`
	SatelliteId        *uint32                                                             `path:"satellite-id" module:"nokia-conf"`
	SoftwareRepository *string                                                             `path:"software-repository" module:"nokia-conf"`
	SyncE              *bool                                                               `path:"sync-e" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite_EthernetSatellite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite_EthernetSatellite) IsYANGGoStruct() {}

// NewPortMap creates a new entry in the PortMap list of the
// NokiaConf_Configure_Satellite_EthernetSatellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) NewPortMap(ClientPortId string) (*NokiaConf_Configure_Satellite_EthernetSatellite_PortMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[string]*NokiaConf_Configure_Satellite_EthernetSatellite_PortMap)
	}

	key := ClientPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortMap", key)
	}

	t.PortMap[key] = &NokiaConf_Configure_Satellite_EthernetSatellite_PortMap{
		ClientPortId: &ClientPortId,
	}

	return t.PortMap[key], nil
}

// RenamePortMap renames an entry in the list PortMap within
// the NokiaConf_Configure_Satellite_EthernetSatellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) RenamePortMap(oldK, newK string) error {
	if _, ok := t.PortMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PortMap", newK)
	}

	e, ok := t.PortMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortMap", oldK)
	}
	e.ClientPortId = &newK

	t.PortMap[newK] = e
	delete(t.PortMap, oldK)
	return nil
}

// GetOrCreatePortMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite_EthernetSatellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetOrCreatePortMap(ClientPortId string) *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap {

	key := ClientPortId

	if v, ok := t.PortMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortMap(ClientPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortMap got unexpected error: %v", err))
	}
	return v
}

// GetPortMap retrieves the value with the specified key from
// the PortMap map field of NokiaConf_Configure_Satellite_EthernetSatellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetPortMap(ClientPortId string) *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap {

	if t == nil {
		return nil
	}

	key := ClientPortId

	if lm, ok := t.PortMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePortMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite_EthernetSatellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) DeletePortMap(ClientPortId string) {
	key := ClientPortId

	delete(t.PortMap, key)
}

// AppendPortMap appends the supplied NokiaConf_Configure_Satellite_EthernetSatellite_PortMap struct to the
// list PortMap of NokiaConf_Configure_Satellite_EthernetSatellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Satellite_EthernetSatellite_PortMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) AppendPortMap(v *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) error {
	if v.ClientPortId == nil {
		return fmt.Errorf("invalid nil key received for ClientPortId")
	}

	key := *v.ClientPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[string]*NokiaConf_Configure_Satellite_EthernetSatellite_PortMap)
	}

	if _, ok := t.PortMap[key]; ok {
		return fmt.Errorf("duplicate key for list PortMap %v", key)
	}

	t.PortMap[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClientDownDelay retrieves the value of the leaf ClientDownDelay from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientDownDelay is set, it can
// safely use t.GetClientDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetClientDownDelay() int32 {
	if t == nil || t.ClientDownDelay == nil {
		return 0
	}
	return *t.ClientDownDelay
}

// GetConsoleAccess retrieves the value of the leaf ConsoleAccess from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsoleAccess is set, it can
// safely use t.GetConsoleAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsoleAccess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetConsoleAccess() E_NokiaTypesSros_AdminState {
	if t == nil || t.ConsoleAccess == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.ConsoleAccess
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFeature retrieves the value of the leaf Feature from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Feature is set, it can
// safely use t.GetFeature() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Feature == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetFeature() []E_NokiaConf_Configure_Satellite_EthernetSatellite_Feature {
	if t == nil || t.Feature == nil {
		return nil
	}
	return t.Feature
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPortTemplate retrieves the value of the leaf PortTemplate from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortTemplate is set, it can
// safely use t.GetPortTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetPortTemplate() string {
	if t == nil || t.PortTemplate == nil {
		return ""
	}
	return *t.PortTemplate
}

// GetPtpTc retrieves the value of the leaf PtpTc from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PtpTc is set, it can
// safely use t.GetPtpTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PtpTc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetPtpTc() bool {
	if t == nil || t.PtpTc == nil {
		return false
	}
	return *t.PtpTc
}

// GetSatType retrieves the value of the leaf SatType from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatType is set, it can
// safely use t.GetSatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetSatType() E_NokiaTypesChassis_SatType {
	if t == nil || t.SatType == 0 {
		return 0
	}
	return t.SatType
}

// GetSatelliteId retrieves the value of the leaf SatelliteId from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatelliteId is set, it can
// safely use t.GetSatelliteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatelliteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetSatelliteId() uint32 {
	if t == nil || t.SatelliteId == nil {
		return 0
	}
	return *t.SatelliteId
}

// GetSoftwareRepository retrieves the value of the leaf SoftwareRepository from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareRepository is set, it can
// safely use t.GetSoftwareRepository() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareRepository == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetSoftwareRepository() string {
	if t == nil || t.SoftwareRepository == nil {
		return ""
	}
	return *t.SoftwareRepository
}

// GetSyncE retrieves the value of the leaf SyncE from the NokiaConf_Configure_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncE is set, it can
// safely use t.GetSyncE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) GetSyncE() bool {
	if t == nil || t.SyncE == nil {
		return false
	}
	return *t.SyncE
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite_EthernetSatellite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ConsoleAccess == 0 {
		t.ConsoleAccess = NokiaTypesSros_AdminState_disable
	}
	if t.PtpTc == nil {
		var v bool = false
		t.PtpTc = &v
	}
	if t.SyncE == nil {
		var v bool = false
		t.SyncE = &v
	}
	for _, e := range t.PortMap {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Satellite_EthernetSatellite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SatelliteId == nil {
		return nil, fmt.Errorf("nil value for key SatelliteId")
	}

	return map[string]interface{}{
		"satellite-id": *t.SatelliteId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite_EthernetSatellite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite_EthernetSatellite.
func (*NokiaConf_Configure_Satellite_EthernetSatellite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite_EthernetSatellite_PortMap represents the /nokia-conf/configure/satellite/ethernet-satellite/port-map YANG schema element.
type NokiaConf_Configure_Satellite_EthernetSatellite_PortMap struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientPortId       *string  `path:"client-port-id" module:"nokia-conf"`
	Primary            *string  `path:"primary" module:"nokia-conf"`
	Secondary          *string  `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite_EthernetSatellite_PortMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClientPortId retrieves the value of the leaf ClientPortId from the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientPortId is set, it can
// safely use t.GetClientPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) GetClientPortId() string {
	if t == nil || t.ClientPortId == nil {
		return ""
	}
	return *t.ClientPortId
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) GetPrimary() string {
	if t == nil || t.Primary == nil {
		return ""
	}
	return *t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) GetSecondary() string {
	if t == nil || t.Secondary == nil {
		return ""
	}
	return *t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Satellite_EthernetSatellite_PortMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClientPortId == nil {
		return nil, fmt.Errorf("nil value for key ClientPortId")
	}

	return map[string]interface{}{
		"client-port-id": *t.ClientPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite_EthernetSatellite_PortMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite_EthernetSatellite_PortMap.
func (*NokiaConf_Configure_Satellite_EthernetSatellite_PortMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite_FileTransfer represents the /nokia-conf/configure/satellite/file-transfer YANG schema element.
type NokiaConf_Configure_Satellite_FileTransfer struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ftp                *bool    `path:"ftp" module:"nokia-conf"`
	Scp                *bool    `path:"scp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite_FileTransfer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite_FileTransfer) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite_FileTransfer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_FileTransfer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite_FileTransfer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_FileTransfer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Satellite_FileTransfer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_FileTransfer) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetScp retrieves the value of the leaf Scp from the NokiaConf_Configure_Satellite_FileTransfer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scp is set, it can
// safely use t.GetScp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_FileTransfer) GetScp() bool {
	if t == nil || t.Scp == nil {
		return false
	}
	return *t.Scp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite_FileTransfer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite_FileTransfer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Scp == nil {
		var v bool = false
		t.Scp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_FileTransfer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite_FileTransfer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_FileTransfer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite_FileTransfer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite_FileTransfer.
func (*NokiaConf_Configure_Satellite_FileTransfer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite_PortTemplate represents the /nokia-conf/configure/satellite/port-template YANG schema element.
type NokiaConf_Configure_Satellite_PortTemplate struct {
	AdminState         E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                     `path:"description" module:"nokia-conf"`
	Port               map[string]*NokiaConf_Configure_Satellite_PortTemplate_Port `path:"port" module:"nokia-conf"`
	SatType            E_NokiaTypesChassis_SatType                                 `path:"sat-type" module:"nokia-conf"`
	TemplateName       *string                                                     `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite_PortTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite_PortTemplate) IsYANGGoStruct() {}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Satellite_PortTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Satellite_PortTemplate) NewPort(SatPhysPortId string) (*NokiaConf_Configure_Satellite_PortTemplate_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Satellite_PortTemplate_Port)
	}

	key := SatPhysPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Satellite_PortTemplate_Port{
		SatPhysPortId: &SatPhysPortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Satellite_PortTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.SatPhysPortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite_PortTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetOrCreatePort(SatPhysPortId string) *NokiaConf_Configure_Satellite_PortTemplate_Port {

	key := SatPhysPortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(SatPhysPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Satellite_PortTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetPort(SatPhysPortId string) *NokiaConf_Configure_Satellite_PortTemplate_Port {

	if t == nil {
		return nil
	}

	key := SatPhysPortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Satellite_PortTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Satellite_PortTemplate) DeletePort(SatPhysPortId string) {
	key := SatPhysPortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Satellite_PortTemplate_Port struct to the
// list Port of NokiaConf_Configure_Satellite_PortTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Satellite_PortTemplate_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Satellite_PortTemplate) AppendPort(v *NokiaConf_Configure_Satellite_PortTemplate_Port) error {
	if v.SatPhysPortId == nil {
		return fmt.Errorf("invalid nil key received for SatPhysPortId")
	}

	key := *v.SatPhysPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Satellite_PortTemplate_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSatType retrieves the value of the leaf SatType from the NokiaConf_Configure_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatType is set, it can
// safely use t.GetSatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetSatType() E_NokiaTypesChassis_SatType {
	if t == nil || t.SatType == 0 {
		return 0
	}
	return t.SatType
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite_PortTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite_PortTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Satellite_PortTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Satellite_PortTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_PortTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite_PortTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_PortTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite_PortTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite_PortTemplate.
func (*NokiaConf_Configure_Satellite_PortTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite_PortTemplate_Port represents the /nokia-conf/configure/satellite/port-template/port YANG schema element.
type NokiaConf_Configure_Satellite_PortTemplate_Port struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Role               E_NokiaConf_Configure_Satellite_PortTemplate_Port_Role `path:"role" module:"nokia-conf"`
	SatPhysPortId      *string                                                `path:"sat-phys-port-id" module:"nokia-conf"`
	Uplink             *string                                                `path:"uplink" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite_PortTemplate_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite_PortTemplate_Port) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRole retrieves the value of the leaf Role from the NokiaConf_Configure_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) GetRole() E_NokiaConf_Configure_Satellite_PortTemplate_Port_Role {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// GetSatPhysPortId retrieves the value of the leaf SatPhysPortId from the NokiaConf_Configure_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatPhysPortId is set, it can
// safely use t.GetSatPhysPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatPhysPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) GetSatPhysPortId() string {
	if t == nil || t.SatPhysPortId == nil {
		return ""
	}
	return *t.SatPhysPortId
}

// GetUplink retrieves the value of the leaf Uplink from the NokiaConf_Configure_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uplink is set, it can
// safely use t.GetUplink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uplink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) GetUplink() string {
	if t == nil || t.Uplink == nil {
		return ""
	}
	return *t.Uplink
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite_PortTemplate_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Satellite_PortTemplate_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SatPhysPortId == nil {
		return nil, fmt.Errorf("nil value for key SatPhysPortId")
	}

	return map[string]interface{}{
		"sat-phys-port-id": *t.SatPhysPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite_PortTemplate_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite_PortTemplate_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite_PortTemplate_Port.
func (*NokiaConf_Configure_Satellite_PortTemplate_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Satellite_PortTopology represents the /nokia-conf/configure/satellite/port-topology YANG schema element.
type NokiaConf_Configure_Satellite_PortTopology struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FarEndPortId       *string  `path:"far-end-port-id" module:"nokia-conf"`
	LocalPortId        *string  `path:"local-port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Satellite_PortTopology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Satellite_PortTopology) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Satellite_PortTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTopology) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Satellite_PortTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTopology) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFarEndPortId retrieves the value of the leaf FarEndPortId from the NokiaConf_Configure_Satellite_PortTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FarEndPortId is set, it can
// safely use t.GetFarEndPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FarEndPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTopology) GetFarEndPortId() string {
	if t == nil || t.FarEndPortId == nil {
		return ""
	}
	return *t.FarEndPortId
}

// GetLocalPortId retrieves the value of the leaf LocalPortId from the NokiaConf_Configure_Satellite_PortTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPortId is set, it can
// safely use t.GetLocalPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Satellite_PortTopology) GetLocalPortId() string {
	if t == nil || t.LocalPortId == nil {
		return ""
	}
	return *t.LocalPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Satellite_PortTopology
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Satellite_PortTopology) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Satellite_PortTopology struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Satellite_PortTopology) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalPortId == nil {
		return nil, fmt.Errorf("nil value for key LocalPortId")
	}

	return map[string]interface{}{
		"local-port-id": *t.LocalPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_PortTopology) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Satellite_PortTopology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Satellite_PortTopology) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Satellite_PortTopology) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Satellite_PortTopology.
func (*NokiaConf_Configure_Satellite_PortTopology) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service represents the /nokia-conf/configure/service YANG schema element.
type NokiaConf_Configure_Service struct {
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Cpipe              map[string]*NokiaConf_Configure_Service_Cpipe      `path:"cpipe" module:"nokia-conf"`
	Customer           map[string]*NokiaConf_Configure_Service_Customer   `path:"customer" module:"nokia-conf"`
	Epipe              map[string]*NokiaConf_Configure_Service_Epipe      `path:"epipe" module:"nokia-conf"`
	Ies                map[string]*NokiaConf_Configure_Service_Ies        `path:"ies" module:"nokia-conf"`
	Ipfix              *NokiaConf_Configure_Service_Ipfix                 `path:"ipfix" module:"nokia-conf"`
	Ipipe              map[string]*NokiaConf_Configure_Service_Ipipe      `path:"ipipe" module:"nokia-conf"`
	MacList            map[string]*NokiaConf_Configure_Service_MacList    `path:"mac-list" module:"nokia-conf"`
	MdAutoId           *NokiaConf_Configure_Service_MdAutoId              `path:"md-auto-id" module:"nokia-conf"`
	Mrp                *NokiaConf_Configure_Service_Mrp                   `path:"mrp" module:"nokia-conf"`
	Nat                *NokiaConf_Configure_Service_Nat                   `path:"nat" module:"nokia-conf"`
	OperGroup          map[string]*NokiaConf_Configure_Service_OperGroup  `path:"oper-group" module:"nokia-conf"`
	Pbb                *NokiaConf_Configure_Service_Pbb                   `path:"pbb" module:"nokia-conf"`
	ProxyArpNd         *NokiaConf_Configure_Service_ProxyArpNd            `path:"proxy-arp-nd" module:"nokia-conf"`
	PwTemplate         map[string]*NokiaConf_Configure_Service_PwTemplate `path:"pw-template" module:"nokia-conf"`
	Sdp                map[uint32]*NokiaConf_Configure_Service_Sdp        `path:"sdp" module:"nokia-conf"`
	SdpGroup           *NokiaConf_Configure_Service_SdpGroup              `path:"sdp-group" module:"nokia-conf"`
	System             *NokiaConf_Configure_Service_System                `path:"system" module:"nokia-conf"`
	Template           *NokiaConf_Configure_Service_Template              `path:"template" module:"nokia-conf"`
	Upnp               *NokiaConf_Configure_Service_Upnp                  `path:"upnp" module:"nokia-conf"`
	Vpls               map[string]*NokiaConf_Configure_Service_Vpls       `path:"vpls" module:"nokia-conf"`
	Vprn               map[string]*NokiaConf_Configure_Service_Vprn       `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service) IsYANGGoStruct() {}

// NewCpipe creates a new entry in the Cpipe list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewCpipe(ServiceName string) (*NokiaConf_Configure_Service_Cpipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpipe == nil {
		t.Cpipe = make(map[string]*NokiaConf_Configure_Service_Cpipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpipe", key)
	}

	t.Cpipe[key] = &NokiaConf_Configure_Service_Cpipe{
		ServiceName: &ServiceName,
	}

	return t.Cpipe[key], nil
}

// RenameCpipe renames an entry in the list Cpipe within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameCpipe(oldK, newK string) error {
	if _, ok := t.Cpipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpipe", newK)
	}

	e, ok := t.Cpipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpipe", oldK)
	}
	e.ServiceName = &newK

	t.Cpipe[newK] = e
	delete(t.Cpipe, oldK)
	return nil
}

// GetOrCreateCpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateCpipe(ServiceName string) *NokiaConf_Configure_Service_Cpipe {

	key := ServiceName

	if v, ok := t.Cpipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpipe got unexpected error: %v", err))
	}
	return v
}

// GetCpipe retrieves the value with the specified key from
// the Cpipe map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetCpipe(ServiceName string) *NokiaConf_Configure_Service_Cpipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Cpipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteCpipe(ServiceName string) {
	key := ServiceName

	delete(t.Cpipe, key)
}

// AppendCpipe appends the supplied NokiaConf_Configure_Service_Cpipe struct to the
// list Cpipe of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendCpipe(v *NokiaConf_Configure_Service_Cpipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpipe == nil {
		t.Cpipe = make(map[string]*NokiaConf_Configure_Service_Cpipe)
	}

	if _, ok := t.Cpipe[key]; ok {
		return fmt.Errorf("duplicate key for list Cpipe %v", key)
	}

	t.Cpipe[key] = v
	return nil
}

// NewCustomer creates a new entry in the Customer list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewCustomer(CustomerName string) (*NokiaConf_Configure_Service_Customer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Customer == nil {
		t.Customer = make(map[string]*NokiaConf_Configure_Service_Customer)
	}

	key := CustomerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Customer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Customer", key)
	}

	t.Customer[key] = &NokiaConf_Configure_Service_Customer{
		CustomerName: &CustomerName,
	}

	return t.Customer[key], nil
}

// RenameCustomer renames an entry in the list Customer within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameCustomer(oldK, newK string) error {
	if _, ok := t.Customer[newK]; ok {
		return fmt.Errorf("key %v already exists in Customer", newK)
	}

	e, ok := t.Customer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Customer", oldK)
	}
	e.CustomerName = &newK

	t.Customer[newK] = e
	delete(t.Customer, oldK)
	return nil
}

// GetOrCreateCustomer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateCustomer(CustomerName string) *NokiaConf_Configure_Service_Customer {

	key := CustomerName

	if v, ok := t.Customer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomer(CustomerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomer got unexpected error: %v", err))
	}
	return v
}

// GetCustomer retrieves the value with the specified key from
// the Customer map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetCustomer(CustomerName string) *NokiaConf_Configure_Service_Customer {

	if t == nil {
		return nil
	}

	key := CustomerName

	if lm, ok := t.Customer[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteCustomer(CustomerName string) {
	key := CustomerName

	delete(t.Customer, key)
}

// AppendCustomer appends the supplied NokiaConf_Configure_Service_Customer struct to the
// list Customer of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Customer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendCustomer(v *NokiaConf_Configure_Service_Customer) error {
	if v.CustomerName == nil {
		return fmt.Errorf("invalid nil key received for CustomerName")
	}

	key := *v.CustomerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Customer == nil {
		t.Customer = make(map[string]*NokiaConf_Configure_Service_Customer)
	}

	if _, ok := t.Customer[key]; ok {
		return fmt.Errorf("duplicate key for list Customer %v", key)
	}

	t.Customer[key] = v
	return nil
}

// NewEpipe creates a new entry in the Epipe list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewEpipe(ServiceName string) (*NokiaConf_Configure_Service_Epipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_Service_Epipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Epipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Epipe", key)
	}

	t.Epipe[key] = &NokiaConf_Configure_Service_Epipe{
		ServiceName: &ServiceName,
	}

	return t.Epipe[key], nil
}

// RenameEpipe renames an entry in the list Epipe within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameEpipe(oldK, newK string) error {
	if _, ok := t.Epipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Epipe", newK)
	}

	e, ok := t.Epipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Epipe", oldK)
	}
	e.ServiceName = &newK

	t.Epipe[newK] = e
	delete(t.Epipe, oldK)
	return nil
}

// GetOrCreateEpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateEpipe(ServiceName string) *NokiaConf_Configure_Service_Epipe {

	key := ServiceName

	if v, ok := t.Epipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEpipe got unexpected error: %v", err))
	}
	return v
}

// GetEpipe retrieves the value with the specified key from
// the Epipe map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetEpipe(ServiceName string) *NokiaConf_Configure_Service_Epipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Epipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteEpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteEpipe(ServiceName string) {
	key := ServiceName

	delete(t.Epipe, key)
}

// AppendEpipe appends the supplied NokiaConf_Configure_Service_Epipe struct to the
// list Epipe of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendEpipe(v *NokiaConf_Configure_Service_Epipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_Service_Epipe)
	}

	if _, ok := t.Epipe[key]; ok {
		return fmt.Errorf("duplicate key for list Epipe %v", key)
	}

	t.Epipe[key] = v
	return nil
}

// NewIes creates a new entry in the Ies list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewIes(ServiceName string) (*NokiaConf_Configure_Service_Ies, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ies == nil {
		t.Ies = make(map[string]*NokiaConf_Configure_Service_Ies)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ies[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ies", key)
	}

	t.Ies[key] = &NokiaConf_Configure_Service_Ies{
		ServiceName: &ServiceName,
	}

	return t.Ies[key], nil
}

// RenameIes renames an entry in the list Ies within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameIes(oldK, newK string) error {
	if _, ok := t.Ies[newK]; ok {
		return fmt.Errorf("key %v already exists in Ies", newK)
	}

	e, ok := t.Ies[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ies", oldK)
	}
	e.ServiceName = &newK

	t.Ies[newK] = e
	delete(t.Ies, oldK)
	return nil
}

// GetOrCreateIes retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateIes(ServiceName string) *NokiaConf_Configure_Service_Ies {

	key := ServiceName

	if v, ok := t.Ies[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIes(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIes got unexpected error: %v", err))
	}
	return v
}

// GetIes retrieves the value with the specified key from
// the Ies map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetIes(ServiceName string) *NokiaConf_Configure_Service_Ies {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Ies[key]; ok {
		return lm
	}
	return nil
}

// DeleteIes deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteIes(ServiceName string) {
	key := ServiceName

	delete(t.Ies, key)
}

// AppendIes appends the supplied NokiaConf_Configure_Service_Ies struct to the
// list Ies of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendIes(v *NokiaConf_Configure_Service_Ies) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ies == nil {
		t.Ies = make(map[string]*NokiaConf_Configure_Service_Ies)
	}

	if _, ok := t.Ies[key]; ok {
		return fmt.Errorf("duplicate key for list Ies %v", key)
	}

	t.Ies[key] = v
	return nil
}

// NewIpipe creates a new entry in the Ipipe list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewIpipe(ServiceName string) (*NokiaConf_Configure_Service_Ipipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipipe == nil {
		t.Ipipe = make(map[string]*NokiaConf_Configure_Service_Ipipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipipe", key)
	}

	t.Ipipe[key] = &NokiaConf_Configure_Service_Ipipe{
		ServiceName: &ServiceName,
	}

	return t.Ipipe[key], nil
}

// RenameIpipe renames an entry in the list Ipipe within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameIpipe(oldK, newK string) error {
	if _, ok := t.Ipipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipipe", newK)
	}

	e, ok := t.Ipipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipipe", oldK)
	}
	e.ServiceName = &newK

	t.Ipipe[newK] = e
	delete(t.Ipipe, oldK)
	return nil
}

// GetOrCreateIpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateIpipe(ServiceName string) *NokiaConf_Configure_Service_Ipipe {

	key := ServiceName

	if v, ok := t.Ipipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpipe got unexpected error: %v", err))
	}
	return v
}

// GetIpipe retrieves the value with the specified key from
// the Ipipe map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetIpipe(ServiceName string) *NokiaConf_Configure_Service_Ipipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Ipipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteIpipe(ServiceName string) {
	key := ServiceName

	delete(t.Ipipe, key)
}

// AppendIpipe appends the supplied NokiaConf_Configure_Service_Ipipe struct to the
// list Ipipe of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendIpipe(v *NokiaConf_Configure_Service_Ipipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipipe == nil {
		t.Ipipe = make(map[string]*NokiaConf_Configure_Service_Ipipe)
	}

	if _, ok := t.Ipipe[key]; ok {
		return fmt.Errorf("duplicate key for list Ipipe %v", key)
	}

	t.Ipipe[key] = v
	return nil
}

// NewMacList creates a new entry in the MacList list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewMacList(Name string) (*NokiaConf_Configure_Service_MacList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacList == nil {
		t.MacList = make(map[string]*NokiaConf_Configure_Service_MacList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacList", key)
	}

	t.MacList[key] = &NokiaConf_Configure_Service_MacList{
		Name: &Name,
	}

	return t.MacList[key], nil
}

// RenameMacList renames an entry in the list MacList within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameMacList(oldK, newK string) error {
	if _, ok := t.MacList[newK]; ok {
		return fmt.Errorf("key %v already exists in MacList", newK)
	}

	e, ok := t.MacList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacList", oldK)
	}
	e.Name = &newK

	t.MacList[newK] = e
	delete(t.MacList, oldK)
	return nil
}

// GetOrCreateMacList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateMacList(Name string) *NokiaConf_Configure_Service_MacList {

	key := Name

	if v, ok := t.MacList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacList got unexpected error: %v", err))
	}
	return v
}

// GetMacList retrieves the value with the specified key from
// the MacList map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetMacList(Name string) *NokiaConf_Configure_Service_MacList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MacList[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteMacList(Name string) {
	key := Name

	delete(t.MacList, key)
}

// AppendMacList appends the supplied NokiaConf_Configure_Service_MacList struct to the
// list MacList of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_MacList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendMacList(v *NokiaConf_Configure_Service_MacList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacList == nil {
		t.MacList = make(map[string]*NokiaConf_Configure_Service_MacList)
	}

	if _, ok := t.MacList[key]; ok {
		return fmt.Errorf("duplicate key for list MacList %v", key)
	}

	t.MacList[key] = v
	return nil
}

// NewOperGroup creates a new entry in the OperGroup list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewOperGroup(Name string) (*NokiaConf_Configure_Service_OperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OperGroup == nil {
		t.OperGroup = make(map[string]*NokiaConf_Configure_Service_OperGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OperGroup", key)
	}

	t.OperGroup[key] = &NokiaConf_Configure_Service_OperGroup{
		Name: &Name,
	}

	return t.OperGroup[key], nil
}

// RenameOperGroup renames an entry in the list OperGroup within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameOperGroup(oldK, newK string) error {
	if _, ok := t.OperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in OperGroup", newK)
	}

	e, ok := t.OperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OperGroup", oldK)
	}
	e.Name = &newK

	t.OperGroup[newK] = e
	delete(t.OperGroup, oldK)
	return nil
}

// GetOrCreateOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateOperGroup(Name string) *NokiaConf_Configure_Service_OperGroup {

	key := Name

	if v, ok := t.OperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOperGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetOperGroup retrieves the value with the specified key from
// the OperGroup map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetOperGroup(Name string) *NokiaConf_Configure_Service_OperGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.OperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteOperGroup(Name string) {
	key := Name

	delete(t.OperGroup, key)
}

// AppendOperGroup appends the supplied NokiaConf_Configure_Service_OperGroup struct to the
// list OperGroup of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_OperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendOperGroup(v *NokiaConf_Configure_Service_OperGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OperGroup == nil {
		t.OperGroup = make(map[string]*NokiaConf_Configure_Service_OperGroup)
	}

	if _, ok := t.OperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list OperGroup %v", key)
	}

	t.OperGroup[key] = v
	return nil
}

// NewPwTemplate creates a new entry in the PwTemplate list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewPwTemplate(PwTemplateName string) (*NokiaConf_Configure_Service_PwTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplate == nil {
		t.PwTemplate = make(map[string]*NokiaConf_Configure_Service_PwTemplate)
	}

	key := PwTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwTemplate", key)
	}

	t.PwTemplate[key] = &NokiaConf_Configure_Service_PwTemplate{
		PwTemplateName: &PwTemplateName,
	}

	return t.PwTemplate[key], nil
}

// RenamePwTemplate renames an entry in the list PwTemplate within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenamePwTemplate(oldK, newK string) error {
	if _, ok := t.PwTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PwTemplate", newK)
	}

	e, ok := t.PwTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwTemplate", oldK)
	}
	e.PwTemplateName = &newK

	t.PwTemplate[newK] = e
	delete(t.PwTemplate, oldK)
	return nil
}

// GetOrCreatePwTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreatePwTemplate(PwTemplateName string) *NokiaConf_Configure_Service_PwTemplate {

	key := PwTemplateName

	if v, ok := t.PwTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwTemplate(PwTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPwTemplate retrieves the value with the specified key from
// the PwTemplate map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetPwTemplate(PwTemplateName string) *NokiaConf_Configure_Service_PwTemplate {

	if t == nil {
		return nil
	}

	key := PwTemplateName

	if lm, ok := t.PwTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePwTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeletePwTemplate(PwTemplateName string) {
	key := PwTemplateName

	delete(t.PwTemplate, key)
}

// AppendPwTemplate appends the supplied NokiaConf_Configure_Service_PwTemplate struct to the
// list PwTemplate of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_PwTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendPwTemplate(v *NokiaConf_Configure_Service_PwTemplate) error {
	if v.PwTemplateName == nil {
		return fmt.Errorf("invalid nil key received for PwTemplateName")
	}

	key := *v.PwTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplate == nil {
		t.PwTemplate = make(map[string]*NokiaConf_Configure_Service_PwTemplate)
	}

	if _, ok := t.PwTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PwTemplate %v", key)
	}

	t.PwTemplate[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewSdp(SdpId uint32) (*NokiaConf_Configure_Service_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_Service_Sdp)
	}

	key := SdpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Service_Sdp{
		SdpId: &SdpId,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameSdp(oldK, newK uint32) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.SdpId = &newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateSdp(SdpId uint32) *NokiaConf_Configure_Service_Sdp {

	key := SdpId

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(SdpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetSdp(SdpId uint32) *NokiaConf_Configure_Service_Sdp {

	if t == nil {
		return nil
	}

	key := SdpId

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteSdp(SdpId uint32) {
	key := SdpId

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Service_Sdp struct to the
// list Sdp of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendSdp(v *NokiaConf_Configure_Service_Sdp) error {
	if v.SdpId == nil {
		return fmt.Errorf("invalid nil key received for SdpId")
	}

	key := *v.SdpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_Service_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// NewVpls creates a new entry in the Vpls list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewVpls(ServiceName string) (*NokiaConf_Configure_Service_Vpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Service_Vpls)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vpls", key)
	}

	t.Vpls[key] = &NokiaConf_Configure_Service_Vpls{
		ServiceName: &ServiceName,
	}

	return t.Vpls[key], nil
}

// RenameVpls renames an entry in the list Vpls within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameVpls(oldK, newK string) error {
	if _, ok := t.Vpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Vpls", newK)
	}

	e, ok := t.Vpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vpls", oldK)
	}
	e.ServiceName = &newK

	t.Vpls[newK] = e
	delete(t.Vpls, oldK)
	return nil
}

// GetOrCreateVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateVpls(ServiceName string) *NokiaConf_Configure_Service_Vpls {

	key := ServiceName

	if v, ok := t.Vpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVpls(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVpls got unexpected error: %v", err))
	}
	return v
}

// GetVpls retrieves the value with the specified key from
// the Vpls map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetVpls(ServiceName string) *NokiaConf_Configure_Service_Vpls {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Vpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteVpls(ServiceName string) {
	key := ServiceName

	delete(t.Vpls, key)
}

// AppendVpls appends the supplied NokiaConf_Configure_Service_Vpls struct to the
// list Vpls of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendVpls(v *NokiaConf_Configure_Service_Vpls) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Service_Vpls)
	}

	if _, ok := t.Vpls[key]; ok {
		return fmt.Errorf("duplicate key for list Vpls %v", key)
	}

	t.Vpls[key] = v
	return nil
}

// NewVprn creates a new entry in the Vprn list of the
// NokiaConf_Configure_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service) NewVprn(ServiceName string) (*NokiaConf_Configure_Service_Vprn, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vprn == nil {
		t.Vprn = make(map[string]*NokiaConf_Configure_Service_Vprn)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vprn[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vprn", key)
	}

	t.Vprn[key] = &NokiaConf_Configure_Service_Vprn{
		ServiceName: &ServiceName,
	}

	return t.Vprn[key], nil
}

// RenameVprn renames an entry in the list Vprn within
// the NokiaConf_Configure_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service) RenameVprn(oldK, newK string) error {
	if _, ok := t.Vprn[newK]; ok {
		return fmt.Errorf("key %v already exists in Vprn", newK)
	}

	e, ok := t.Vprn[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vprn", oldK)
	}
	e.ServiceName = &newK

	t.Vprn[newK] = e
	delete(t.Vprn, oldK)
	return nil
}

// GetOrCreateVprn retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service) GetOrCreateVprn(ServiceName string) *NokiaConf_Configure_Service_Vprn {

	key := ServiceName

	if v, ok := t.Vprn[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprn(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprn got unexpected error: %v", err))
	}
	return v
}

// GetVprn retrieves the value with the specified key from
// the Vprn map field of NokiaConf_Configure_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service) GetVprn(ServiceName string) *NokiaConf_Configure_Service_Vprn {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Vprn[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprn deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service) DeleteVprn(ServiceName string) {
	key := ServiceName

	delete(t.Vprn, key)
}

// AppendVprn appends the supplied NokiaConf_Configure_Service_Vprn struct to the
// list Vprn of NokiaConf_Configure_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service) AppendVprn(v *NokiaConf_Configure_Service_Vprn) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vprn == nil {
		t.Vprn = make(map[string]*NokiaConf_Configure_Service_Vprn)
	}

	if _, ok := t.Vprn[key]; ok {
		return fmt.Errorf("duplicate key for list Vprn %v", key)
	}

	t.Vprn[key] = v
	return nil
}

// GetOrCreateIpfix retrieves the value of the Ipfix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateIpfix() *NokiaConf_Configure_Service_Ipfix {
	if t.Ipfix != nil {
		return t.Ipfix
	}
	t.Ipfix = &NokiaConf_Configure_Service_Ipfix{}
	return t.Ipfix
}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateMdAutoId() *NokiaConf_Configure_Service_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Service_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateMrp() *NokiaConf_Configure_Service_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Service_Mrp{}
	return t.Mrp
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateNat() *NokiaConf_Configure_Service_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Service_Nat{}
	return t.Nat
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreatePbb() *NokiaConf_Configure_Service_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_Pbb{}
	return t.Pbb
}

// GetOrCreateProxyArpNd retrieves the value of the ProxyArpNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateProxyArpNd() *NokiaConf_Configure_Service_ProxyArpNd {
	if t.ProxyArpNd != nil {
		return t.ProxyArpNd
	}
	t.ProxyArpNd = &NokiaConf_Configure_Service_ProxyArpNd{}
	return t.ProxyArpNd
}

// GetOrCreateSdpGroup retrieves the value of the SdpGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateSdpGroup() *NokiaConf_Configure_Service_SdpGroup {
	if t.SdpGroup != nil {
		return t.SdpGroup
	}
	t.SdpGroup = &NokiaConf_Configure_Service_SdpGroup{}
	return t.SdpGroup
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateSystem() *NokiaConf_Configure_Service_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NokiaConf_Configure_Service_System{}
	return t.System
}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateTemplate() *NokiaConf_Configure_Service_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_Service_Template{}
	return t.Template
}

// GetOrCreateUpnp retrieves the value of the Upnp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service) GetOrCreateUpnp() *NokiaConf_Configure_Service_Upnp {
	if t.Upnp != nil {
		return t.Upnp
	}
	t.Upnp = &NokiaConf_Configure_Service_Upnp{}
	return t.Upnp
}

// GetIpfix returns the value of the Ipfix struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field Ipfix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetIpfix() *NokiaConf_Configure_Service_Ipfix {
	if t != nil && t.Ipfix != nil {
		return t.Ipfix
	}
	return nil
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetMdAutoId() *NokiaConf_Configure_Service_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetMrp() *NokiaConf_Configure_Service_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetNat() *NokiaConf_Configure_Service_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetPbb() *NokiaConf_Configure_Service_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetProxyArpNd returns the value of the ProxyArpNd struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field ProxyArpNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetProxyArpNd() *NokiaConf_Configure_Service_ProxyArpNd {
	if t != nil && t.ProxyArpNd != nil {
		return t.ProxyArpNd
	}
	return nil
}

// GetSdpGroup returns the value of the SdpGroup struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field SdpGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetSdpGroup() *NokiaConf_Configure_Service_SdpGroup {
	if t != nil && t.SdpGroup != nil {
		return t.SdpGroup
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetSystem() *NokiaConf_Configure_Service_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetTemplate() *NokiaConf_Configure_Service_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetUpnp returns the value of the Upnp struct pointer
// from NokiaConf_Configure_Service. If the receiver or the field Upnp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service) GetUpnp() *NokiaConf_Configure_Service_Upnp {
	if t != nil && t.Upnp != nil {
		return t.Upnp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipfix.PopulateDefaults()
	t.MdAutoId.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.ProxyArpNd.PopulateDefaults()
	t.SdpGroup.PopulateDefaults()
	t.System.PopulateDefaults()
	t.Template.PopulateDefaults()
	t.Upnp.PopulateDefaults()
	for _, e := range t.Cpipe {
		e.PopulateDefaults()
	}
	for _, e := range t.Customer {
		e.PopulateDefaults()
	}
	for _, e := range t.Epipe {
		e.PopulateDefaults()
	}
	for _, e := range t.Ies {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipipe {
		e.PopulateDefaults()
	}
	for _, e := range t.MacList {
		e.PopulateDefaults()
	}
	for _, e := range t.OperGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.PwTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Vpls {
		e.PopulateDefaults()
	}
	for _, e := range t.Vprn {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service.
func (*NokiaConf_Configure_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe represents the /nokia-conf/configure/service/cpipe YANG schema element.
type NokiaConf_Configure_Service_Cpipe struct {
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Customer           *string                                                `path:"customer" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	Endpoint           map[string]*NokiaConf_Configure_Service_Cpipe_Endpoint `path:"endpoint" module:"nokia-conf"`
	Sap                map[string]*NokiaConf_Configure_Service_Cpipe_Sap      `path:"sap" module:"nokia-conf"`
	ServiceId          *uint32                                                `path:"service-id" module:"nokia-conf"`
	ServiceMtu         *int32                                                 `path:"service-mtu" module:"nokia-conf"`
	ServiceName        *string                                                `path:"service-name" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Cpipe_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Test               *bool                                                  `path:"test" module:"nokia-conf"`
	VcSwitching        *bool                                                  `path:"vc-switching" module:"nokia-conf"`
	VcType             E_NokiaTypesServices_CpipeVcType                       `path:"vc-type" module:"nokia-conf"`
	VpnId              *uint32                                                `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Service_Cpipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe) NewEndpoint(Name string) (*NokiaConf_Configure_Service_Cpipe_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Cpipe_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Service_Cpipe_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Service_Cpipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Service_Cpipe_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Service_Cpipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe) GetEndpoint(Name string) *NokiaConf_Configure_Service_Cpipe_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Service_Cpipe_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Service_Cpipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe) AppendEndpoint(v *NokiaConf_Configure_Service_Cpipe_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Cpipe_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Cpipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe) NewSap(SapId string) (*NokiaConf_Configure_Service_Cpipe_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Cpipe_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Cpipe_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Cpipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Cpipe_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Cpipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe) GetSap(SapId string) *NokiaConf_Configure_Service_Cpipe_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Cpipe_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Cpipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe) AppendSap(v *NokiaConf_Configure_Service_Cpipe_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Cpipe_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Cpipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Cpipe_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Cpipe_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Cpipe_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Cpipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Cpipe_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Cpipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Cpipe_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Cpipe_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Cpipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe) AppendSpokeSdp(v *NokiaConf_Configure_Service_Cpipe_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Cpipe_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTest retrieves the value of the leaf Test from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Test is set, it can
// safely use t.GetTest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Test == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetTest() bool {
	if t == nil || t.Test == nil {
		return false
	}
	return *t.Test
}

// GetVcSwitching retrieves the value of the leaf VcSwitching from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcSwitching is set, it can
// safely use t.GetVcSwitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcSwitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetVcSwitching() bool {
	if t == nil || t.VcSwitching == nil {
		return false
	}
	return *t.VcSwitching
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetVcType() E_NokiaTypesServices_CpipeVcType {
	if t == nil || t.VcType == 0 {
		return 0
	}
	return t.VcType
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Test == nil {
		var v bool = false
		t.Test = &v
	}
	if t.VcSwitching == nil {
		var v bool = false
		t.VcSwitching = &v
	}
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe.
func (*NokiaConf_Configure_Service_Cpipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Endpoint represents the /nokia-conf/configure/service/cpipe/endpoint YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Endpoint struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	HoldTimeActive     *uint32                                                       `path:"hold-time-active" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	RevertTime         NokiaConf_Configure_Service_Cpipe_Endpoint_RevertTime_Union   `path:"revert-time" module:"nokia-conf"`
	StandbySignaling   E_NokiaConf_Configure_Service_Cpipe_Endpoint_StandbySignaling `path:"standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Endpoint) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTimeActive retrieves the value of the leaf HoldTimeActive from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeActive is set, it can
// safely use t.GetHoldTimeActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeActive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetHoldTimeActive() uint32 {
	if t == nil || t.HoldTimeActive == nil {
		return 0
	}
	return *t.HoldTimeActive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetRevertTime() NokiaConf_Configure_Service_Cpipe_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) GetStandbySignaling() E_NokiaConf_Configure_Service_Cpipe_Endpoint_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return 0
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Endpoint.
func (*NokiaConf_Configure_Service_Cpipe_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap represents the /nokia-conf/configure/service/cpipe/sap YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap struct {
	AccountingPolicy   *uint32                                        `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Cem                *NokiaConf_Configure_Service_Cpipe_Sap_Cem     `path:"cem" module:"nokia-conf"`
	CollectStats       *bool                                          `path:"collect-stats" module:"nokia-conf"`
	Description        *string                                        `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                        `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Cpipe_Sap_Egress  `path:"egress" module:"nokia-conf"`
	Endpoint           *string                                        `path:"endpoint" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Cpipe_Sap_Ingress `path:"ingress" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Cpipe_Sap_Lag     `path:"lag" module:"nokia-conf"`
	MultiServiceSite   *string                                        `path:"multi-service-site" module:"nokia-conf"`
	SapId              *string                                        `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap) IsYANGGoStruct() {}

// GetOrCreateCem retrieves the value of the Cem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetOrCreateCem() *NokiaConf_Configure_Service_Cpipe_Sap_Cem {
	if t.Cem != nil {
		return t.Cem
	}
	t.Cem = &NokiaConf_Configure_Service_Cpipe_Sap_Cem{}
	return t.Cem
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Cpipe_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Cpipe_Sap_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Cpipe_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Cpipe_Sap_Lag{}
	return t.Lag
}

// GetCem returns the value of the Cem struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap. If the receiver or the field Cem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetCem() *NokiaConf_Configure_Service_Cpipe_Sap_Cem {
	if t != nil && t.Cem != nil {
		return t.Cem
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetEgress() *NokiaConf_Configure_Service_Cpipe_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetIngress() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetLag() *NokiaConf_Configure_Service_Cpipe_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Cem.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap.
func (*NokiaConf_Configure_Service_Cpipe_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Cem represents the /nokia-conf/configure/service/cpipe/sap/cem YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Cem struct {
	Packet      *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet      `path:"packet" module:"nokia-conf"`
	ReportAlarm *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm `path:"report-alarm" module:"nokia-conf"`
	RtpHeader   *bool                                                  `path:"rtp-header" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Cem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Cem) IsYANGGoStruct() {}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) GetOrCreatePacket() *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet{}
	return t.Packet
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) GetOrCreateReportAlarm() *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm{}
	return t.ReportAlarm
}

// GetPacket returns the value of the Packet struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Cem. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) GetPacket() *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Cem. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) GetReportAlarm() *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetRtpHeader retrieves the value of the leaf RtpHeader from the NokiaConf_Configure_Service_Cpipe_Sap_Cem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtpHeader is set, it can
// safely use t.GetRtpHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtpHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) GetRtpHeader() bool {
	if t == nil || t.RtpHeader == nil {
		return false
	}
	return *t.RtpHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Cem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RtpHeader == nil {
		var v bool = false
		t.RtpHeader = &v
	}
	t.Packet.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Cem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Cem.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Cem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet represents the /nokia-conf/configure/service/cpipe/sap/cem/packet YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet struct {
	JitterBuffer *uint32 `path:"jitter-buffer" module:"nokia-conf"`
	PayloadSize  *uint32 `path:"payload-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) IsYANGGoStruct() {}

// GetJitterBuffer retrieves the value of the leaf JitterBuffer from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JitterBuffer is set, it can
// safely use t.GetJitterBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JitterBuffer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) GetJitterBuffer() uint32 {
	if t == nil || t.JitterBuffer == nil {
		return 0
	}
	return *t.JitterBuffer
}

// GetPayloadSize retrieves the value of the leaf PayloadSize from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PayloadSize is set, it can
// safely use t.GetPayloadSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PayloadSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) GetPayloadSize() uint32 {
	if t == nil || t.PayloadSize == nil {
		return 0
	}
	return *t.PayloadSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Cem_Packet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm represents the /nokia-conf/configure/service/cpipe/sap/cem/report-alarm YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm struct {
	BufferOverrun    *bool `path:"buffer-overrun" module:"nokia-conf"`
	BufferUnderrun   *bool `path:"buffer-underrun" module:"nokia-conf"`
	MalformedPackets *bool `path:"malformed-packets" module:"nokia-conf"`
	PacketLoss       *bool `path:"packet-loss" module:"nokia-conf"`
	RemoteFault      *bool `path:"remote-fault" module:"nokia-conf"`
	RemotePacketLoss *bool `path:"remote-packet-loss" module:"nokia-conf"`
	RemoteRdi        *bool `path:"remote-rdi" module:"nokia-conf"`
	StrayPackets     *bool `path:"stray-packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) IsYANGGoStruct() {}

// GetBufferOverrun retrieves the value of the leaf BufferOverrun from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferOverrun is set, it can
// safely use t.GetBufferOverrun() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferOverrun == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetBufferOverrun() bool {
	if t == nil || t.BufferOverrun == nil {
		return true
	}
	return *t.BufferOverrun
}

// GetBufferUnderrun retrieves the value of the leaf BufferUnderrun from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferUnderrun is set, it can
// safely use t.GetBufferUnderrun() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferUnderrun == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetBufferUnderrun() bool {
	if t == nil || t.BufferUnderrun == nil {
		return true
	}
	return *t.BufferUnderrun
}

// GetMalformedPackets retrieves the value of the leaf MalformedPackets from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MalformedPackets is set, it can
// safely use t.GetMalformedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MalformedPackets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetMalformedPackets() bool {
	if t == nil || t.MalformedPackets == nil {
		return true
	}
	return *t.MalformedPackets
}

// GetPacketLoss retrieves the value of the leaf PacketLoss from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketLoss is set, it can
// safely use t.GetPacketLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetPacketLoss() bool {
	if t == nil || t.PacketLoss == nil {
		return true
	}
	return *t.PacketLoss
}

// GetRemoteFault retrieves the value of the leaf RemoteFault from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteFault is set, it can
// safely use t.GetRemoteFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetRemoteFault() bool {
	if t == nil || t.RemoteFault == nil {
		return false
	}
	return *t.RemoteFault
}

// GetRemotePacketLoss retrieves the value of the leaf RemotePacketLoss from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePacketLoss is set, it can
// safely use t.GetRemotePacketLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePacketLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetRemotePacketLoss() bool {
	if t == nil || t.RemotePacketLoss == nil {
		return false
	}
	return *t.RemotePacketLoss
}

// GetRemoteRdi retrieves the value of the leaf RemoteRdi from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteRdi is set, it can
// safely use t.GetRemoteRdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteRdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetRemoteRdi() bool {
	if t == nil || t.RemoteRdi == nil {
		return false
	}
	return *t.RemoteRdi
}

// GetStrayPackets retrieves the value of the leaf StrayPackets from the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrayPackets is set, it can
// safely use t.GetStrayPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrayPackets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) GetStrayPackets() bool {
	if t == nil || t.StrayPackets == nil {
		return true
	}
	return *t.StrayPackets
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BufferOverrun == nil {
		var v bool = true
		t.BufferOverrun = &v
	}
	if t.BufferUnderrun == nil {
		var v bool = true
		t.BufferUnderrun = &v
	}
	if t.MalformedPackets == nil {
		var v bool = true
		t.MalformedPackets = &v
	}
	if t.PacketLoss == nil {
		var v bool = true
		t.PacketLoss = &v
	}
	if t.RemoteFault == nil {
		var v bool = false
		t.RemoteFault = &v
	}
	if t.RemotePacketLoss == nil {
		var v bool = false
		t.RemotePacketLoss = &v
	}
	if t.RemoteRdi == nil {
		var v bool = false
		t.RemoteRdi = &v
	}
	if t.StrayPackets == nil {
		var v bool = true
		t.StrayPackets = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Cem_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress represents the /nokia-conf/configure/service/cpipe/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress struct {
	AggRate *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate represents the /nokia-conf/configure/service/cpipe/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate struct {
	Cir                  NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth *bool                                                          `path:"limit-unused-bandwidth" module:"nokia-conf"`
	Rate                 *int64                                                         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos represents the /nokia-conf/configure/service/cpipe/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                    `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress struct {
	Overrides  *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct {
	Policer map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue   map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                    `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                                      `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                        `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *int32                                                                                        `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                         `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                        `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                     `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                      `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/cpipe/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress represents the /nokia-conf/configure/service/cpipe/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress struct {
	Qos *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                     `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress struct {
	Overrides   *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName  *string                                                                 `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaTypesServices_ServicesSapQueuingType                             `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria      `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                      `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                           `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                          `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                       `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/cpipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_Sap_Lag represents the /nokia-conf/configure/service/cpipe/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Cpipe_Sap_Lag struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Lag) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_Sap_Lag.
func (*NokiaConf_Configure_Service_Cpipe_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp represents the /nokia-conf/configure/service/cpipe/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bandwidth_Union `path:"bandwidth" module:"nokia-conf"`
	Bfd                *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd            `path:"bfd" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness    `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate        *string                                                    `path:"bfd-template" module:"nokia-conf"`
	ControlWord        *bool                                                      `path:"control-word" module:"nokia-conf"`
	Description        *string                                                    `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress         `path:"egress" module:"nokia-conf"`
	Endpoint           *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint       `path:"endpoint" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress        `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                    `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetBfd() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetBandwidth() NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bandwidth_Union {
	if t == nil || t.Bandwidth == nil {
		return UnionUint32(0)
	}
	return t.Bandwidth
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return true
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		t.Bandwidth = UnionUint32(0)
	}
	if t.ControlWord == nil {
		var v bool = true
		t.ControlWord = &v
	}
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Cpipe_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd represents the /nokia-conf/configure/service/cpipe/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd struct {
	BfdLiveness *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                     `path:"bfd-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/service/cpipe/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/cpipe/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress represents the /nokia-conf/configure/service/cpipe/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress struct {
	Qos     *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/service/cpipe/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/cpipe/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                          `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/cpipe/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint represents the /nokia-conf/configure/service/cpipe/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint struct {
	Icb        *bool                                                                `path:"icb" module:"nokia-conf"`
	Name       *string                                                              `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetIcb retrieves the value of the leaf Icb from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icb is set, it can
// safely use t.GetIcb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) GetIcb() bool {
	if t == nil || t.Icb == nil {
		return false
	}
	return *t.Icb
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icb == nil {
		var v bool = false
		t.Icb = &v
	}
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress represents the /nokia-conf/configure/service/cpipe/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress struct {
	Qos     *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/service/cpipe/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/cpipe/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                         `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/cpipe/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer represents the /nokia-conf/configure/service/customer YANG schema element.
type NokiaConf_Configure_Service_Customer struct {
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Contact            *string                                                           `path:"contact" module:"nokia-conf"`
	CustomerId         *uint32                                                           `path:"customer-id" module:"nokia-conf"`
	CustomerName       *string                                                           `path:"customer-name" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	MultiServiceSite   map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite `path:"multi-service-site" module:"nokia-conf"`
	Phone              *string                                                           `path:"phone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer) IsYANGGoStruct() {}

// NewMultiServiceSite creates a new entry in the MultiServiceSite list of the
// NokiaConf_Configure_Service_Customer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Customer) NewMultiServiceSite(MultiServiceSiteName string) (*NokiaConf_Configure_Service_Customer_MultiServiceSite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiServiceSite == nil {
		t.MultiServiceSite = make(map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite)
	}

	key := MultiServiceSiteName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultiServiceSite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultiServiceSite", key)
	}

	t.MultiServiceSite[key] = &NokiaConf_Configure_Service_Customer_MultiServiceSite{
		MultiServiceSiteName: &MultiServiceSiteName,
	}

	return t.MultiServiceSite[key], nil
}

// RenameMultiServiceSite renames an entry in the list MultiServiceSite within
// the NokiaConf_Configure_Service_Customer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Customer) RenameMultiServiceSite(oldK, newK string) error {
	if _, ok := t.MultiServiceSite[newK]; ok {
		return fmt.Errorf("key %v already exists in MultiServiceSite", newK)
	}

	e, ok := t.MultiServiceSite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultiServiceSite", oldK)
	}
	e.MultiServiceSiteName = &newK

	t.MultiServiceSite[newK] = e
	delete(t.MultiServiceSite, oldK)
	return nil
}

// GetOrCreateMultiServiceSite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Customer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Customer) GetOrCreateMultiServiceSite(MultiServiceSiteName string) *NokiaConf_Configure_Service_Customer_MultiServiceSite {

	key := MultiServiceSiteName

	if v, ok := t.MultiServiceSite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultiServiceSite(MultiServiceSiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultiServiceSite got unexpected error: %v", err))
	}
	return v
}

// GetMultiServiceSite retrieves the value with the specified key from
// the MultiServiceSite map field of NokiaConf_Configure_Service_Customer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Customer) GetMultiServiceSite(MultiServiceSiteName string) *NokiaConf_Configure_Service_Customer_MultiServiceSite {

	if t == nil {
		return nil
	}

	key := MultiServiceSiteName

	if lm, ok := t.MultiServiceSite[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultiServiceSite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Customer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Customer) DeleteMultiServiceSite(MultiServiceSiteName string) {
	key := MultiServiceSiteName

	delete(t.MultiServiceSite, key)
}

// AppendMultiServiceSite appends the supplied NokiaConf_Configure_Service_Customer_MultiServiceSite struct to the
// list MultiServiceSite of NokiaConf_Configure_Service_Customer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Customer_MultiServiceSite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Customer) AppendMultiServiceSite(v *NokiaConf_Configure_Service_Customer_MultiServiceSite) error {
	if v.MultiServiceSiteName == nil {
		return fmt.Errorf("invalid nil key received for MultiServiceSiteName")
	}

	key := *v.MultiServiceSiteName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiServiceSite == nil {
		t.MultiServiceSite = make(map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite)
	}

	if _, ok := t.MultiServiceSite[key]; ok {
		return fmt.Errorf("duplicate key for list MultiServiceSite %v", key)
	}

	t.MultiServiceSite[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetContact retrieves the value of the leaf Contact from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Contact is set, it can
// safely use t.GetContact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Contact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetContact() string {
	if t == nil || t.Contact == nil {
		return ""
	}
	return *t.Contact
}

// GetCustomerId retrieves the value of the leaf CustomerId from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomerId is set, it can
// safely use t.GetCustomerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetCustomerId() uint32 {
	if t == nil || t.CustomerId == nil {
		return 0
	}
	return *t.CustomerId
}

// GetCustomerName retrieves the value of the leaf CustomerName from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomerName is set, it can
// safely use t.GetCustomerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetCustomerName() string {
	if t == nil || t.CustomerName == nil {
		return ""
	}
	return *t.CustomerName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPhone retrieves the value of the leaf Phone from the NokiaConf_Configure_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Phone is set, it can
// safely use t.GetPhone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Phone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer) GetPhone() string {
	if t == nil || t.Phone == nil {
		return ""
	}
	return *t.Phone
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MultiServiceSite {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Customer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Customer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CustomerName == nil {
		return nil, fmt.Errorf("nil value for key CustomerName")
	}

	return map[string]interface{}{
		"customer-name": *t.CustomerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer.
func (*NokiaConf_Configure_Service_Customer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite represents the /nokia-conf/configure/service/customer/multi-service-site YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite struct {
	ApplyGroups          []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Assignment           *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment `path:"assignment" module:"nokia-conf"`
	Description          *string                                                           `path:"description" module:"nokia-conf"`
	Egress               *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress     `path:"egress" module:"nokia-conf"`
	Ingress              *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress    `path:"ingress" module:"nokia-conf"`
	MultiServiceSiteName *string                                                           `path:"multi-service-site-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite) IsYANGGoStruct() {}

// GetOrCreateAssignment retrieves the value of the Assignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetOrCreateAssignment() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment {
	if t.Assignment != nil {
		return t.Assignment
	}
	t.Assignment = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment{}
	return t.Assignment
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetOrCreateEgress() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetOrCreateIngress() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress{}
	return t.Ingress
}

// GetAssignment returns the value of the Assignment struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite. If the receiver or the field Assignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetAssignment() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment {
	if t != nil && t.Assignment != nil {
		return t.Assignment
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetEgress() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetIngress() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Customer_MultiServiceSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Customer_MultiServiceSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Customer_MultiServiceSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMultiServiceSiteName retrieves the value of the leaf MultiServiceSiteName from the NokiaConf_Configure_Service_Customer_MultiServiceSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSiteName is set, it can
// safely use t.GetMultiServiceSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) GetMultiServiceSiteName() string {
	if t == nil || t.MultiServiceSiteName == nil {
		return ""
	}
	return *t.MultiServiceSiteName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Assignment.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Customer_MultiServiceSite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MultiServiceSiteName == nil {
		return nil, fmt.Errorf("nil value for key MultiServiceSiteName")
	}

	return map[string]interface{}{
		"multi-service-site-name": *t.MultiServiceSiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment represents the /nokia-conf/configure/service/customer/multi-service-site/assignment YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment struct {
	Card *uint32 `path:"card" module:"nokia-conf"`
	Fpe  *uint32 `path:"fpe" module:"nokia-conf"`
	Port *string `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) IsYANGGoStruct() {}

// GetCard retrieves the value of the leaf Card from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Card is set, it can
// safely use t.GetCard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Card == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) GetCard() uint32 {
	if t == nil || t.Card == nil {
		return 0
	}
	return *t.Card
}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) GetPort() string {
	if t == nil || t.Port == nil {
		return ""
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Assignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress represents the /nokia-conf/configure/service/customer/multi-service-site/egress YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress struct {
	AggRate              *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate         `path:"agg-rate" module:"nokia-conf"`
	PolicerControlPolicy *string                                                                       `path:"policer-control-policy" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) GetAggRate() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) GetSchedulerPolicy() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetPolicerControlPolicy retrieves the value of the leaf PolicerControlPolicy from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicy is set, it can
// safely use t.GetPolicerControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) GetPolicerControlPolicy() string {
	if t == nil || t.PolicerControlPolicy == nil {
		return ""
	}
	return *t.PolicerControlPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate represents the /nokia-conf/configure/service/customer/multi-service-site/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate struct {
	LimitUnusedBandwidth      *bool  `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool  `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) IsYANGGoStruct() {}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy represents the /nokia-conf/configure/service/customer/multi-service-site/egress/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                 `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/customer/multi-service-site/egress/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/customer/multi-service-site/egress/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                                  `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/customer/multi-service-site/egress/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/customer/multi-service-site/egress/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress represents the /nokia-conf/configure/service/customer/multi-service-site/ingress YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress struct {
	PolicerControlPolicy *string                                                                        `path:"policer-control-policy" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) IsYANGGoStruct() {}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) GetSchedulerPolicy() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetPolicerControlPolicy retrieves the value of the leaf PolicerControlPolicy from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicy is set, it can
// safely use t.GetPolicerControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) GetPolicerControlPolicy() string {
	if t == nil || t.PolicerControlPolicy == nil {
		return ""
	}
	return *t.PolicerControlPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy represents the /nokia-conf/configure/service/customer/multi-service-site/ingress/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/customer/multi-service-site/ingress/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/customer/multi-service-site/ingress/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                                   `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/customer/multi-service-site/ingress/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/customer/multi-service-site/ingress/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe represents the /nokia-conf/configure/service/epipe YANG schema element.
type NokiaConf_Configure_Service_Epipe struct {
	AdminState             E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Bgp                    map[int32]*NokiaConf_Configure_Service_Epipe_Bgp              `path:"bgp" module:"nokia-conf"`
	BgpEvpn                *NokiaConf_Configure_Service_Epipe_BgpEvpn                    `path:"bgp-evpn" module:"nokia-conf" yangPresence:"true"`
	BgpMhSite              map[string]*NokiaConf_Configure_Service_Epipe_BgpMhSite       `path:"bgp-mh-site" module:"nokia-conf"`
	BgpVpws                *NokiaConf_Configure_Service_Epipe_BgpVpws                    `path:"bgp-vpws" module:"nokia-conf" yangPresence:"true"`
	Customer               *string                                                       `path:"customer" module:"nokia-conf"`
	Description            *string                                                       `path:"description" module:"nokia-conf"`
	Endpoint               map[string]*NokiaConf_Configure_Service_Epipe_Endpoint        `path:"endpoint" module:"nokia-conf"`
	EthCfm                 *NokiaConf_Configure_Service_Epipe_EthCfm                     `path:"eth-cfm" module:"nokia-conf"`
	IgnoreL2VpnMtuMismatch *bool                                                         `path:"ignore-l2vpn-mtu-mismatch" module:"nokia-conf"`
	LoadBalancing          *NokiaConf_Configure_Service_Epipe_LoadBalancing              `path:"load-balancing" module:"nokia-conf"`
	NatOutside             map[uint32]*NokiaConf_Configure_Service_Epipe_NatOutside      `path:"nat-outside" module:"nokia-conf"`
	OperGroup              *string                                                       `path:"oper-group" module:"nokia-conf"`
	Pbb                    *NokiaConf_Configure_Service_Epipe_Pbb                        `path:"pbb" module:"nokia-conf"`
	Sap                    map[string]*NokiaConf_Configure_Service_Epipe_Sap             `path:"sap" module:"nokia-conf"`
	SegmentRoutingV6       map[int32]*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 `path:"segment-routing-v6" module:"nokia-conf"`
	ServiceId              *uint32                                                       `path:"service-id" module:"nokia-conf"`
	ServiceMtu             *int32                                                        `path:"service-mtu" module:"nokia-conf"`
	ServiceName            *string                                                       `path:"service-name" module:"nokia-conf"`
	SpokeSdp               map[string]*NokiaConf_Configure_Service_Epipe_SpokeSdp        `path:"spoke-sdp" module:"nokia-conf"`
	Test                   *bool                                                         `path:"test" module:"nokia-conf"`
	VcSwitching            *bool                                                         `path:"vc-switching" module:"nokia-conf"`
	VpnId                  *uint32                                                       `path:"vpn-id" module:"nokia-conf"`
	Vxlan                  *NokiaConf_Configure_Service_Epipe_Vxlan                      `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe) IsYANGGoStruct() {}

// NewBgp creates a new entry in the Bgp list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewBgp(BgpInstance int32) (*NokiaConf_Configure_Service_Epipe_Bgp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[int32]*NokiaConf_Configure_Service_Epipe_Bgp)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bgp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bgp", key)
	}

	t.Bgp[key] = &NokiaConf_Configure_Service_Epipe_Bgp{
		BgpInstance: &BgpInstance,
	}

	return t.Bgp[key], nil
}

// RenameBgp renames an entry in the list Bgp within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameBgp(oldK, newK int32) error {
	if _, ok := t.Bgp[newK]; ok {
		return fmt.Errorf("key %v already exists in Bgp", newK)
	}

	e, ok := t.Bgp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Bgp", oldK)
	}
	e.BgpInstance = &newK

	t.Bgp[newK] = e
	delete(t.Bgp, oldK)
	return nil
}

// GetOrCreateBgp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateBgp(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_Bgp {

	key := BgpInstance

	if v, ok := t.Bgp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgp(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgp got unexpected error: %v", err))
	}
	return v
}

// GetBgp retrieves the value with the specified key from
// the Bgp map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetBgp(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_Bgp {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Bgp[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteBgp(BgpInstance int32) {
	key := BgpInstance

	delete(t.Bgp, key)
}

// AppendBgp appends the supplied NokiaConf_Configure_Service_Epipe_Bgp struct to the
// list Bgp of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Bgp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendBgp(v *NokiaConf_Configure_Service_Epipe_Bgp) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[int32]*NokiaConf_Configure_Service_Epipe_Bgp)
	}

	if _, ok := t.Bgp[key]; ok {
		return fmt.Errorf("duplicate key for list Bgp %v", key)
	}

	t.Bgp[key] = v
	return nil
}

// NewBgpMhSite creates a new entry in the BgpMhSite list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewBgpMhSite(SiteName string) (*NokiaConf_Configure_Service_Epipe_BgpMhSite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpMhSite)
	}

	key := SiteName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpMhSite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpMhSite", key)
	}

	t.BgpMhSite[key] = &NokiaConf_Configure_Service_Epipe_BgpMhSite{
		SiteName: &SiteName,
	}

	return t.BgpMhSite[key], nil
}

// RenameBgpMhSite renames an entry in the list BgpMhSite within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameBgpMhSite(oldK, newK string) error {
	if _, ok := t.BgpMhSite[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpMhSite", newK)
	}

	e, ok := t.BgpMhSite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpMhSite", oldK)
	}
	e.SiteName = &newK

	t.BgpMhSite[newK] = e
	delete(t.BgpMhSite, oldK)
	return nil
}

// GetOrCreateBgpMhSite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateBgpMhSite(SiteName string) *NokiaConf_Configure_Service_Epipe_BgpMhSite {

	key := SiteName

	if v, ok := t.BgpMhSite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpMhSite(SiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpMhSite got unexpected error: %v", err))
	}
	return v
}

// GetBgpMhSite retrieves the value with the specified key from
// the BgpMhSite map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetBgpMhSite(SiteName string) *NokiaConf_Configure_Service_Epipe_BgpMhSite {

	if t == nil {
		return nil
	}

	key := SiteName

	if lm, ok := t.BgpMhSite[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpMhSite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteBgpMhSite(SiteName string) {
	key := SiteName

	delete(t.BgpMhSite, key)
}

// AppendBgpMhSite appends the supplied NokiaConf_Configure_Service_Epipe_BgpMhSite struct to the
// list BgpMhSite of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpMhSite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendBgpMhSite(v *NokiaConf_Configure_Service_Epipe_BgpMhSite) error {
	if v.SiteName == nil {
		return fmt.Errorf("invalid nil key received for SiteName")
	}

	key := *v.SiteName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpMhSite)
	}

	if _, ok := t.BgpMhSite[key]; ok {
		return fmt.Errorf("duplicate key for list BgpMhSite %v", key)
	}

	t.BgpMhSite[key] = v
	return nil
}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewEndpoint(Name string) (*NokiaConf_Configure_Service_Epipe_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Epipe_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Service_Epipe_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Service_Epipe_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetEndpoint(Name string) *NokiaConf_Configure_Service_Epipe_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Service_Epipe_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendEndpoint(v *NokiaConf_Configure_Service_Epipe_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Epipe_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewNatOutside creates a new entry in the NatOutside list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewNatOutside(NatGroup uint32) (*NokiaConf_Configure_Service_Epipe_NatOutside, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatOutside == nil {
		t.NatOutside = make(map[uint32]*NokiaConf_Configure_Service_Epipe_NatOutside)
	}

	key := NatGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatOutside[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatOutside", key)
	}

	t.NatOutside[key] = &NokiaConf_Configure_Service_Epipe_NatOutside{
		NatGroup: &NatGroup,
	}

	return t.NatOutside[key], nil
}

// RenameNatOutside renames an entry in the list NatOutside within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameNatOutside(oldK, newK uint32) error {
	if _, ok := t.NatOutside[newK]; ok {
		return fmt.Errorf("key %v already exists in NatOutside", newK)
	}

	e, ok := t.NatOutside[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatOutside", oldK)
	}
	e.NatGroup = &newK

	t.NatOutside[newK] = e
	delete(t.NatOutside, oldK)
	return nil
}

// GetOrCreateNatOutside retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateNatOutside(NatGroup uint32) *NokiaConf_Configure_Service_Epipe_NatOutside {

	key := NatGroup

	if v, ok := t.NatOutside[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatOutside(NatGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatOutside got unexpected error: %v", err))
	}
	return v
}

// GetNatOutside retrieves the value with the specified key from
// the NatOutside map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetNatOutside(NatGroup uint32) *NokiaConf_Configure_Service_Epipe_NatOutside {

	if t == nil {
		return nil
	}

	key := NatGroup

	if lm, ok := t.NatOutside[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatOutside deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteNatOutside(NatGroup uint32) {
	key := NatGroup

	delete(t.NatOutside, key)
}

// AppendNatOutside appends the supplied NokiaConf_Configure_Service_Epipe_NatOutside struct to the
// list NatOutside of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_NatOutside already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendNatOutside(v *NokiaConf_Configure_Service_Epipe_NatOutside) error {
	if v.NatGroup == nil {
		return fmt.Errorf("invalid nil key received for NatGroup")
	}

	key := *v.NatGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatOutside == nil {
		t.NatOutside = make(map[uint32]*NokiaConf_Configure_Service_Epipe_NatOutside)
	}

	if _, ok := t.NatOutside[key]; ok {
		return fmt.Errorf("duplicate key for list NatOutside %v", key)
	}

	t.NatOutside[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewSap(SapId string) (*NokiaConf_Configure_Service_Epipe_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Epipe_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Epipe_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Epipe_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetSap(SapId string) *NokiaConf_Configure_Service_Epipe_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Epipe_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendSap(v *NokiaConf_Configure_Service_Epipe_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Epipe_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSegmentRoutingV6 creates a new entry in the SegmentRoutingV6 list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewSegmentRoutingV6(Instance int32) (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6)
	}

	key := Instance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentRoutingV6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentRoutingV6", key)
	}

	t.SegmentRoutingV6[key] = &NokiaConf_Configure_Service_Epipe_SegmentRoutingV6{
		Instance: &Instance,
	}

	return t.SegmentRoutingV6[key], nil
}

// RenameSegmentRoutingV6 renames an entry in the list SegmentRoutingV6 within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameSegmentRoutingV6(oldK, newK int32) error {
	if _, ok := t.SegmentRoutingV6[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentRoutingV6", newK)
	}

	e, ok := t.SegmentRoutingV6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentRoutingV6", oldK)
	}
	e.Instance = &newK

	t.SegmentRoutingV6[newK] = e
	delete(t.SegmentRoutingV6, oldK)
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateSegmentRoutingV6(Instance int32) *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 {

	key := Instance

	if v, ok := t.SegmentRoutingV6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentRoutingV6(Instance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentRoutingV6 got unexpected error: %v", err))
	}
	return v
}

// GetSegmentRoutingV6 retrieves the value with the specified key from
// the SegmentRoutingV6 map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetSegmentRoutingV6(Instance int32) *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 {

	if t == nil {
		return nil
	}

	key := Instance

	if lm, ok := t.SegmentRoutingV6[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentRoutingV6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteSegmentRoutingV6(Instance int32) {
	key := Instance

	delete(t.SegmentRoutingV6, key)
}

// AppendSegmentRoutingV6 appends the supplied NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 struct to the
// list SegmentRoutingV6 of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendSegmentRoutingV6(v *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) error {
	if v.Instance == nil {
		return fmt.Errorf("invalid nil key received for Instance")
	}

	key := *v.Instance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6)
	}

	if _, ok := t.SegmentRoutingV6[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentRoutingV6 %v", key)
	}

	t.SegmentRoutingV6[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Epipe_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Epipe_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Epipe_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Epipe_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Epipe_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Epipe_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe) AppendSpokeSdp(v *NokiaConf_Configure_Service_Epipe_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Epipe_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateBgpEvpn() *NokiaConf_Configure_Service_Epipe_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Service_Epipe_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpVpws retrieves the value of the BgpVpws field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateBgpVpws() *NokiaConf_Configure_Service_Epipe_BgpVpws {
	if t.BgpVpws != nil {
		return t.BgpVpws
	}
	t.BgpVpws = &NokiaConf_Configure_Service_Epipe_BgpVpws{}
	return t.BgpVpws
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Epipe_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Epipe_EthCfm{}
	return t.EthCfm
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateLoadBalancing() *NokiaConf_Configure_Service_Epipe_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Service_Epipe_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreatePbb() *NokiaConf_Configure_Service_Epipe_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_Epipe_Pbb{}
	return t.Pbb
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe) GetOrCreateVxlan() *NokiaConf_Configure_Service_Epipe_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Service_Epipe_Vxlan{}
	return t.Vxlan
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Service_Epipe. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetBgpEvpn() *NokiaConf_Configure_Service_Epipe_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpVpws returns the value of the BgpVpws struct pointer
// from NokiaConf_Configure_Service_Epipe. If the receiver or the field BgpVpws is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetBgpVpws() *NokiaConf_Configure_Service_Epipe_BgpVpws {
	if t != nil && t.BgpVpws != nil {
		return t.BgpVpws
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Epipe. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetEthCfm() *NokiaConf_Configure_Service_Epipe_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Service_Epipe. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetLoadBalancing() *NokiaConf_Configure_Service_Epipe_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service_Epipe. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetPbb() *NokiaConf_Configure_Service_Epipe_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Service_Epipe. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe) GetVxlan() *NokiaConf_Configure_Service_Epipe_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreL2VpnMtuMismatch retrieves the value of the leaf IgnoreL2VpnMtuMismatch from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreL2VpnMtuMismatch is set, it can
// safely use t.GetIgnoreL2VpnMtuMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreL2VpnMtuMismatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetIgnoreL2VpnMtuMismatch() bool {
	if t == nil || t.IgnoreL2VpnMtuMismatch == nil {
		return false
	}
	return *t.IgnoreL2VpnMtuMismatch
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTest retrieves the value of the leaf Test from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Test is set, it can
// safely use t.GetTest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Test == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetTest() bool {
	if t == nil || t.Test == nil {
		return false
	}
	return *t.Test
}

// GetVcSwitching retrieves the value of the leaf VcSwitching from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcSwitching is set, it can
// safely use t.GetVcSwitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcSwitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetVcSwitching() bool {
	if t == nil || t.VcSwitching == nil {
		return false
	}
	return *t.VcSwitching
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreL2VpnMtuMismatch == nil {
		var v bool = false
		t.IgnoreL2VpnMtuMismatch = &v
	}
	if t.Test == nil {
		var v bool = false
		t.Test = &v
	}
	if t.VcSwitching == nil {
		var v bool = false
		t.VcSwitching = &v
	}
	t.BgpEvpn.PopulateDefaults()
	t.BgpVpws.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
	for _, e := range t.Bgp {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpMhSite {
		e.PopulateDefaults()
	}
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.NatOutside {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SegmentRoutingV6 {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe.
func (*NokiaConf_Configure_Service_Epipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Bgp represents the /nokia-conf/configure/service/epipe/bgp YANG schema element.
type NokiaConf_Configure_Service_Epipe_Bgp struct {
	AdvServiceMtu      *int32                                                              `path:"adv-service-mtu" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpInstance        *int32                                                              `path:"bgp-instance" module:"nokia-conf"`
	PwTemplateBinding  map[string]*NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding `path:"pw-template-binding" module:"nokia-conf"`
	RouteDistinguisher NokiaConf_Configure_Service_Epipe_Bgp_RouteDistinguisher_Union      `path:"route-distinguisher" module:"nokia-conf"`
	RouteTarget        *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget                  `path:"route-target" module:"nokia-conf"`
	VsiExport          []string                                                            `path:"vsi-export" module:"nokia-conf"`
	VsiImport          []string                                                            `path:"vsi-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Bgp) IsYANGGoStruct() {}

// NewPwTemplateBinding creates a new entry in the PwTemplateBinding list of the
// NokiaConf_Configure_Service_Epipe_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) NewPwTemplateBinding(PwTemplateName string) (*NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding)
	}

	key := PwTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwTemplateBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwTemplateBinding", key)
	}

	t.PwTemplateBinding[key] = &NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding{
		PwTemplateName: &PwTemplateName,
	}

	return t.PwTemplateBinding[key], nil
}

// RenamePwTemplateBinding renames an entry in the list PwTemplateBinding within
// the NokiaConf_Configure_Service_Epipe_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) RenamePwTemplateBinding(oldK, newK string) error {
	if _, ok := t.PwTemplateBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in PwTemplateBinding", newK)
	}

	e, ok := t.PwTemplateBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwTemplateBinding", oldK)
	}
	e.PwTemplateName = &newK

	t.PwTemplateBinding[newK] = e
	delete(t.PwTemplateBinding, oldK)
	return nil
}

// GetOrCreatePwTemplateBinding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetOrCreatePwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding {

	key := PwTemplateName

	if v, ok := t.PwTemplateBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwTemplateBinding(PwTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwTemplateBinding got unexpected error: %v", err))
	}
	return v
}

// GetPwTemplateBinding retrieves the value with the specified key from
// the PwTemplateBinding map field of NokiaConf_Configure_Service_Epipe_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetPwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding {

	if t == nil {
		return nil
	}

	key := PwTemplateName

	if lm, ok := t.PwTemplateBinding[key]; ok {
		return lm
	}
	return nil
}

// DeletePwTemplateBinding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) DeletePwTemplateBinding(PwTemplateName string) {
	key := PwTemplateName

	delete(t.PwTemplateBinding, key)
}

// AppendPwTemplateBinding appends the supplied NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding struct to the
// list PwTemplateBinding of NokiaConf_Configure_Service_Epipe_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) AppendPwTemplateBinding(v *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) error {
	if v.PwTemplateName == nil {
		return fmt.Errorf("invalid nil key received for PwTemplateName")
	}

	key := *v.PwTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding)
	}

	if _, ok := t.PwTemplateBinding[key]; ok {
		return fmt.Errorf("duplicate key for list PwTemplateBinding %v", key)
	}

	t.PwTemplateBinding[key] = v
	return nil
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetOrCreateRouteTarget() *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget{}
	return t.RouteTarget
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from NokiaConf_Configure_Service_Epipe_Bgp. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetRouteTarget() *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetRouteDistinguisher() NokiaConf_Configure_Service_Epipe_Bgp_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// GetVsiExport retrieves the value of the leaf VsiExport from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiExport is set, it can
// safely use t.GetVsiExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetVsiExport() []string {
	if t == nil || t.VsiExport == nil {
		return nil
	}
	return t.VsiExport
}

// GetVsiImport retrieves the value of the leaf VsiImport from the NokiaConf_Configure_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiImport is set, it can
// safely use t.GetVsiImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) GetVsiImport() []string {
	if t == nil || t.VsiImport == nil {
		return nil
	}
	return t.VsiImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTarget.PopulateDefaults()
	for _, e := range t.PwTemplateBinding {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Bgp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Bgp.
func (*NokiaConf_Configure_Service_Epipe_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn represents the /nokia-conf/configure/service/epipe/bgp-evpn YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn struct {
	ApplyGroups             []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Evi                     *uint32                                                                       `path:"evi" module:"nokia-conf"`
	LocalAc                 *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc                            `path:"local-ac" module:"nokia-conf"`
	LocalAttachmentCircuit  map[string]*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit  `path:"local-attachment-circuit" module:"nokia-conf"`
	Mpls                    map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls                     `path:"mpls" module:"nokia-conf"`
	RemoteAc                *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc                           `path:"remote-ac" module:"nokia-conf"`
	RemoteAttachmentCircuit map[string]*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit `path:"remote-attachment-circuit" module:"nokia-conf"`
	SegmentRoutingV6        map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6         `path:"segment-routing-v6" module:"nokia-conf"`
	Vxlan                   map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan                    `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn) IsYANGGoStruct() {}

// NewLocalAttachmentCircuit creates a new entry in the LocalAttachmentCircuit list of the
// NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) NewLocalAttachmentCircuit(Name string) (*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAttachmentCircuit == nil {
		t.LocalAttachmentCircuit = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAttachmentCircuit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAttachmentCircuit", key)
	}

	t.LocalAttachmentCircuit[key] = &NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit{
		Name: &Name,
	}

	return t.LocalAttachmentCircuit[key], nil
}

// RenameLocalAttachmentCircuit renames an entry in the list LocalAttachmentCircuit within
// the NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) RenameLocalAttachmentCircuit(oldK, newK string) error {
	if _, ok := t.LocalAttachmentCircuit[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalAttachmentCircuit", newK)
	}

	e, ok := t.LocalAttachmentCircuit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalAttachmentCircuit", oldK)
	}
	e.Name = &newK

	t.LocalAttachmentCircuit[newK] = e
	delete(t.LocalAttachmentCircuit, oldK)
	return nil
}

// GetOrCreateLocalAttachmentCircuit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateLocalAttachmentCircuit(Name string) *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit {

	key := Name

	if v, ok := t.LocalAttachmentCircuit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalAttachmentCircuit(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalAttachmentCircuit got unexpected error: %v", err))
	}
	return v
}

// GetLocalAttachmentCircuit retrieves the value with the specified key from
// the LocalAttachmentCircuit map field of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetLocalAttachmentCircuit(Name string) *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LocalAttachmentCircuit[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalAttachmentCircuit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) DeleteLocalAttachmentCircuit(Name string) {
	key := Name

	delete(t.LocalAttachmentCircuit, key)
}

// AppendLocalAttachmentCircuit appends the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit struct to the
// list LocalAttachmentCircuit of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) AppendLocalAttachmentCircuit(v *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAttachmentCircuit == nil {
		t.LocalAttachmentCircuit = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit)
	}

	if _, ok := t.LocalAttachmentCircuit[key]; ok {
		return fmt.Errorf("duplicate key for list LocalAttachmentCircuit %v", key)
	}

	t.LocalAttachmentCircuit[key] = v
	return nil
}

// NewMpls creates a new entry in the Mpls list of the
// NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) NewMpls(BgpInstance int32) (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mpls", key)
	}

	t.Mpls[key] = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls{
		BgpInstance: &BgpInstance,
	}

	return t.Mpls[key], nil
}

// RenameMpls renames an entry in the list Mpls within
// the NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) RenameMpls(oldK, newK int32) error {
	if _, ok := t.Mpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Mpls", newK)
	}

	e, ok := t.Mpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mpls", oldK)
	}
	e.BgpInstance = &newK

	t.Mpls[newK] = e
	delete(t.Mpls, oldK)
	return nil
}

// GetOrCreateMpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateMpls(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls {

	key := BgpInstance

	if v, ok := t.Mpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMpls(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMpls got unexpected error: %v", err))
	}
	return v
}

// GetMpls retrieves the value with the specified key from
// the Mpls map field of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetMpls(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Mpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteMpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) DeleteMpls(BgpInstance int32) {
	key := BgpInstance

	delete(t.Mpls, key)
}

// AppendMpls appends the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls struct to the
// list Mpls of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) AppendMpls(v *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls)
	}

	if _, ok := t.Mpls[key]; ok {
		return fmt.Errorf("duplicate key for list Mpls %v", key)
	}

	t.Mpls[key] = v
	return nil
}

// NewRemoteAttachmentCircuit creates a new entry in the RemoteAttachmentCircuit list of the
// NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) NewRemoteAttachmentCircuit(Name string) (*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteAttachmentCircuit == nil {
		t.RemoteAttachmentCircuit = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteAttachmentCircuit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteAttachmentCircuit", key)
	}

	t.RemoteAttachmentCircuit[key] = &NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit{
		Name: &Name,
	}

	return t.RemoteAttachmentCircuit[key], nil
}

// RenameRemoteAttachmentCircuit renames an entry in the list RemoteAttachmentCircuit within
// the NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) RenameRemoteAttachmentCircuit(oldK, newK string) error {
	if _, ok := t.RemoteAttachmentCircuit[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteAttachmentCircuit", newK)
	}

	e, ok := t.RemoteAttachmentCircuit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteAttachmentCircuit", oldK)
	}
	e.Name = &newK

	t.RemoteAttachmentCircuit[newK] = e
	delete(t.RemoteAttachmentCircuit, oldK)
	return nil
}

// GetOrCreateRemoteAttachmentCircuit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateRemoteAttachmentCircuit(Name string) *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit {

	key := Name

	if v, ok := t.RemoteAttachmentCircuit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteAttachmentCircuit(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteAttachmentCircuit got unexpected error: %v", err))
	}
	return v
}

// GetRemoteAttachmentCircuit retrieves the value with the specified key from
// the RemoteAttachmentCircuit map field of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetRemoteAttachmentCircuit(Name string) *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RemoteAttachmentCircuit[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteAttachmentCircuit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) DeleteRemoteAttachmentCircuit(Name string) {
	key := Name

	delete(t.RemoteAttachmentCircuit, key)
}

// AppendRemoteAttachmentCircuit appends the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit struct to the
// list RemoteAttachmentCircuit of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) AppendRemoteAttachmentCircuit(v *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteAttachmentCircuit == nil {
		t.RemoteAttachmentCircuit = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit)
	}

	if _, ok := t.RemoteAttachmentCircuit[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteAttachmentCircuit %v", key)
	}

	t.RemoteAttachmentCircuit[key] = v
	return nil
}

// NewSegmentRoutingV6 creates a new entry in the SegmentRoutingV6 list of the
// NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) NewSegmentRoutingV6(BgpInstance int32) (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentRoutingV6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentRoutingV6", key)
	}

	t.SegmentRoutingV6[key] = &NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6{
		BgpInstance: &BgpInstance,
	}

	return t.SegmentRoutingV6[key], nil
}

// RenameSegmentRoutingV6 renames an entry in the list SegmentRoutingV6 within
// the NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) RenameSegmentRoutingV6(oldK, newK int32) error {
	if _, ok := t.SegmentRoutingV6[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentRoutingV6", newK)
	}

	e, ok := t.SegmentRoutingV6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentRoutingV6", oldK)
	}
	e.BgpInstance = &newK

	t.SegmentRoutingV6[newK] = e
	delete(t.SegmentRoutingV6, oldK)
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateSegmentRoutingV6(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 {

	key := BgpInstance

	if v, ok := t.SegmentRoutingV6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentRoutingV6(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentRoutingV6 got unexpected error: %v", err))
	}
	return v
}

// GetSegmentRoutingV6 retrieves the value with the specified key from
// the SegmentRoutingV6 map field of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetSegmentRoutingV6(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.SegmentRoutingV6[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentRoutingV6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) DeleteSegmentRoutingV6(BgpInstance int32) {
	key := BgpInstance

	delete(t.SegmentRoutingV6, key)
}

// AppendSegmentRoutingV6 appends the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 struct to the
// list SegmentRoutingV6 of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) AppendSegmentRoutingV6(v *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6)
	}

	if _, ok := t.SegmentRoutingV6[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentRoutingV6 %v", key)
	}

	t.SegmentRoutingV6[key] = v
	return nil
}

// NewVxlan creates a new entry in the Vxlan list of the
// NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) NewVxlan(BgpInstance int32) (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vxlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vxlan", key)
	}

	t.Vxlan[key] = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan{
		BgpInstance: &BgpInstance,
	}

	return t.Vxlan[key], nil
}

// RenameVxlan renames an entry in the list Vxlan within
// the NokiaConf_Configure_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) RenameVxlan(oldK, newK int32) error {
	if _, ok := t.Vxlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vxlan", newK)
	}

	e, ok := t.Vxlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vxlan", oldK)
	}
	e.BgpInstance = &newK

	t.Vxlan[newK] = e
	delete(t.Vxlan, oldK)
	return nil
}

// GetOrCreateVxlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateVxlan(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan {

	key := BgpInstance

	if v, ok := t.Vxlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVxlan(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVxlan got unexpected error: %v", err))
	}
	return v
}

// GetVxlan retrieves the value with the specified key from
// the Vxlan map field of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetVxlan(BgpInstance int32) *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Vxlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVxlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) DeleteVxlan(BgpInstance int32) {
	key := BgpInstance

	delete(t.Vxlan, key)
}

// AppendVxlan appends the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan struct to the
// list Vxlan of NokiaConf_Configure_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) AppendVxlan(v *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[int32]*NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan)
	}

	if _, ok := t.Vxlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vxlan %v", key)
	}

	t.Vxlan[key] = v
	return nil
}

// GetOrCreateLocalAc retrieves the value of the LocalAc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateLocalAc() *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc {
	if t.LocalAc != nil {
		return t.LocalAc
	}
	t.LocalAc = &NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc{}
	return t.LocalAc
}

// GetOrCreateRemoteAc retrieves the value of the RemoteAc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetOrCreateRemoteAc() *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc {
	if t.RemoteAc != nil {
		return t.RemoteAc
	}
	t.RemoteAc = &NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc{}
	return t.RemoteAc
}

// GetLocalAc returns the value of the LocalAc struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver or the field LocalAc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetLocalAc() *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc {
	if t != nil && t.LocalAc != nil {
		return t.LocalAc
	}
	return nil
}

// GetRemoteAc returns the value of the RemoteAc struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn. If the receiver or the field RemoteAc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetRemoteAc() *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc {
	if t != nil && t.RemoteAc != nil {
		return t.RemoteAc
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEvi retrieves the value of the leaf Evi from the NokiaConf_Configure_Service_Epipe_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evi is set, it can
// safely use t.GetEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) GetEvi() uint32 {
	if t == nil || t.Evi == nil {
		return 0
	}
	return *t.Evi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocalAc.PopulateDefaults()
	t.RemoteAc.PopulateDefaults()
	for _, e := range t.LocalAttachmentCircuit {
		e.PopulateDefaults()
	}
	for _, e := range t.Mpls {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteAttachmentCircuit {
		e.PopulateDefaults()
	}
	for _, e := range t.SegmentRoutingV6 {
		e.PopulateDefaults()
	}
	for _, e := range t.Vxlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc represents the /nokia-conf/configure/service/epipe/bgp-evpn/local-ac YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc struct {
	EthTag *int32  `path:"eth-tag" module:"nokia-conf"`
	Name   *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) IsYANGGoStruct() {}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit represents the /nokia-conf/configure/service/epipe/bgp-evpn/local-attachment-circuit YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Endpoint           *string  `path:"endpoint" module:"nokia-conf"`
	EthTag             *int32   `path:"eth-tag" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls represents the /nokia-conf/configure/service/epipe/bgp-evpn/mpls YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls struct {
	AdminState              E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoBindTunnel          *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel     `path:"auto-bind-tunnel" module:"nokia-conf"`
	BgpInstance             *int32                                                             `path:"bgp-instance" module:"nokia-conf"`
	ControlWord             *bool                                                              `path:"control-word" module:"nokia-conf"`
	DefaultRouteTag         *string                                                            `path:"default-route-tag" module:"nokia-conf"`
	DynamicEgressLabelLimit *bool                                                              `path:"dynamic-egress-label-limit" module:"nokia-conf"`
	Ecmp                    *int32                                                             `path:"ecmp" module:"nokia-conf"`
	Endpoint                *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint           `path:"endpoint" module:"nokia-conf"`
	EntropyLabel            *bool                                                              `path:"entropy-label" module:"nokia-conf"`
	EviThreeByteAutoRt      *bool                                                              `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	ForceVcForwarding       E_NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	OperGroup               *string                                                            `path:"oper-group" module:"nokia-conf"`
	RouteNextHop            *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop       `path:"route-next-hop" module:"nokia-conf"`
	SendTunnelEncap         *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap    `path:"send-tunnel-encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) IsYANGGoStruct() {}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint{}
	return t.Endpoint
}

// GetOrCreateRouteNextHop retrieves the value of the RouteNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetOrCreateRouteNextHop() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop {
	if t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	t.RouteNextHop = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop{}
	return t.RouteNextHop
}

// GetOrCreateSendTunnelEncap retrieves the value of the SendTunnelEncap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetOrCreateSendTunnelEncap() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap {
	if t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	t.SendTunnelEncap = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap{}
	return t.SendTunnelEncap
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetAutoBindTunnel() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetEndpoint() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetRouteNextHop returns the value of the RouteNextHop struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field RouteNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetRouteNextHop() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop {
	if t != nil && t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	return nil
}

// GetSendTunnelEncap returns the value of the SendTunnelEncap struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field SendTunnelEncap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetSendTunnelEncap() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap {
	if t != nil && t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetDynamicEgressLabelLimit retrieves the value of the leaf DynamicEgressLabelLimit from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEgressLabelLimit is set, it can
// safely use t.GetDynamicEgressLabelLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEgressLabelLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetDynamicEgressLabelLimit() bool {
	if t == nil || t.DynamicEgressLabelLimit == nil {
		return false
	}
	return *t.DynamicEgressLabelLimit
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetForceVcForwarding() E_NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.DynamicEgressLabelLimit == nil {
		var v bool = false
		t.DynamicEgressLabelLimit = &v
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	t.AutoBindTunnel.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.RouteNextHop.PopulateDefaults()
	t.SendTunnelEncap.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel represents the /nokia-conf/configure/service/epipe/bgp-evpn/mpls/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                                           `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	Ecmp                       *uint32                                                                         `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                           `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                              `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/service/epipe/bgp-evpn/mpls/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint represents the /nokia-conf/configure/service/epipe/bgp-evpn/mpls/endpoint YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop represents the /nokia-conf/configure/service/epipe/bgp-evpn/mpls/route-next-hop YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop struct {
	IpAddress  *string   `path:"ip-address" module:"nokia-conf"`
	SystemIpv4 YANGEmpty `path:"system-ipv4" module:"nokia-conf"`
	SystemIpv6 YANGEmpty `path:"system-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSystemIpv4 retrieves the value of the leaf SystemIpv4 from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv4 is set, it can
// safely use t.GetSystemIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv4() YANGEmpty {
	if t == nil || t.SystemIpv4 == false {
		return false
	}
	return t.SystemIpv4
}

// GetSystemIpv6 retrieves the value of the leaf SystemIpv6 from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv6 is set, it can
// safely use t.GetSystemIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv6() YANGEmpty {
	if t == nil || t.SystemIpv6 == false {
		return false
	}
	return t.SystemIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap represents the /nokia-conf/configure/service/epipe/bgp-evpn/mpls/send-tunnel-encap YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap struct {
	Mpls        *bool `path:"mpls" module:"nokia-conf"`
	MplsOverUdp *bool `path:"mpls-over-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) IsYANGGoStruct() {}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return true
	}
	return *t.Mpls
}

// GetMplsOverUdp retrieves the value of the leaf MplsOverUdp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsOverUdp is set, it can
// safely use t.GetMplsOverUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsOverUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) GetMplsOverUdp() bool {
	if t == nil || t.MplsOverUdp == nil {
		return false
	}
	return *t.MplsOverUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mpls == nil {
		var v bool = true
		t.Mpls = &v
	}
	if t.MplsOverUdp == nil {
		var v bool = false
		t.MplsOverUdp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc represents the /nokia-conf/configure/service/epipe/bgp-evpn/remote-ac YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc struct {
	EthTag *int32  `path:"eth-tag" module:"nokia-conf"`
	Name   *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) IsYANGGoStruct() {}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit represents the /nokia-conf/configure/service/epipe/bgp-evpn/remote-attachment-circuit YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Endpoint           *string  `path:"endpoint" module:"nokia-conf"`
	EthTag             *int32   `path:"eth-tag" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 represents the /nokia-conf/configure/service/epipe/bgp-evpn/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpInstance        *int32                                                                         `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag    *string                                                                        `path:"default-route-tag" module:"nokia-conf"`
	Ecmp               *int32                                                                         `path:"ecmp" module:"nokia-conf"`
	EviThreeByteAutoRt *bool                                                                          `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	ForceVcForwarding  E_NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	OperGroup          *string                                                                        `path:"oper-group" module:"nokia-conf"`
	RouteNextHop       *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop       `path:"route-next-hop" module:"nokia-conf"`
	SourceAddress      *string                                                                        `path:"source-address" module:"nokia-conf"`
	Srv6               *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6               `path:"srv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateRouteNextHop retrieves the value of the RouteNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetOrCreateRouteNextHop() *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop {
	if t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	t.RouteNextHop = &NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop{}
	return t.RouteNextHop
}

// GetOrCreateSrv6 retrieves the value of the Srv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetOrCreateSrv6() *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 {
	if t.Srv6 != nil {
		return t.Srv6
	}
	t.Srv6 = &NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6{}
	return t.Srv6
}

// GetRouteNextHop returns the value of the RouteNextHop struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6. If the receiver or the field RouteNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetRouteNextHop() *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop {
	if t != nil && t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	return nil
}

// GetSrv6 returns the value of the Srv6 struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6. If the receiver or the field Srv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetSrv6() *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 {
	if t != nil && t.Srv6 != nil {
		return t.Srv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetForceVcForwarding() E_NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	t.RouteNextHop.PopulateDefaults()
	t.Srv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop represents the /nokia-conf/configure/service/epipe/bgp-evpn/segment-routing-v6/route-next-hop YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop struct {
	IpAddress  *string   `path:"ip-address" module:"nokia-conf"`
	SystemIpv4 YANGEmpty `path:"system-ipv4" module:"nokia-conf"`
	SystemIpv6 YANGEmpty `path:"system-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSystemIpv4 retrieves the value of the leaf SystemIpv4 from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv4 is set, it can
// safely use t.GetSystemIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) GetSystemIpv4() YANGEmpty {
	if t == nil || t.SystemIpv4 == false {
		return false
	}
	return t.SystemIpv4
}

// GetSystemIpv6 retrieves the value of the leaf SystemIpv6 from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv6 is set, it can
// safely use t.GetSystemIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) GetSystemIpv6() YANGEmpty {
	if t == nil || t.SystemIpv6 == false {
		return false
	}
	return t.SystemIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 represents the /nokia-conf/configure/service/epipe/bgp-evpn/segment-routing-v6/srv6 YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 struct {
	DefaultLocator *string `path:"default-locator" module:"nokia-conf"`
	Instance       *int32  `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) IsYANGGoStruct() {}

// GetDefaultLocator retrieves the value of the leaf DefaultLocator from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLocator is set, it can
// safely use t.GetDefaultLocator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLocator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) GetDefaultLocator() string {
	if t == nil || t.DefaultLocator == nil {
		return ""
	}
	return *t.DefaultLocator
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) GetInstance() int32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan represents the /nokia-conf/configure/service/epipe/bgp-evpn/vxlan YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpInstance        *int32                      `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag    *string                     `path:"default-route-tag" module:"nokia-conf"`
	Ecmp               *int32                      `path:"ecmp" module:"nokia-conf"`
	EviThreeByteAutoRt *bool                       `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	SendTunnelEncap    *bool                       `path:"send-tunnel-encap" module:"nokia-conf"`
	VxlanInstance      *uint32                     `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetSendTunnelEncap retrieves the value of the leaf SendTunnelEncap from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendTunnelEncap is set, it can
// safely use t.GetSendTunnelEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendTunnelEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetSendTunnelEncap() bool {
	if t == nil || t.SendTunnelEncap == nil {
		return true
	}
	return *t.SendTunnelEncap
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) GetVxlanInstance() uint32 {
	if t == nil || t.VxlanInstance == nil {
		return 0
	}
	return *t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	if t.SendTunnelEncap == nil {
		var v bool = true
		t.SendTunnelEncap = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan.
func (*NokiaConf_Configure_Service_Epipe_BgpEvpn_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpMhSite represents the /nokia-conf/configure/service/epipe/bgp-mh-site YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpMhSite struct {
	ActivationTimer    *int32                      `path:"activation-timer" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BootTimer          *int32                      `path:"boot-timer" module:"nokia-conf"`
	Id                 *int32                      `path:"id" module:"nokia-conf"`
	MinDownTimer       *int32                      `path:"min-down-timer" module:"nokia-conf"`
	Preference         *uint32                     `path:"preference" module:"nokia-conf"`
	Sap                *string                     `path:"sap" module:"nokia-conf"`
	SiteName           *string                     `path:"site-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpMhSite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpMhSite) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetActivationTimer() int32 {
	if t == nil || t.ActivationTimer == nil {
		return 0
	}
	return *t.ActivationTimer
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetBootTimer() int32 {
	if t == nil || t.BootTimer == nil {
		return 0
	}
	return *t.BootTimer
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMinDownTimer retrieves the value of the leaf MinDownTimer from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDownTimer is set, it can
// safely use t.GetMinDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetMinDownTimer() int32 {
	if t == nil || t.MinDownTimer == nil {
		return 0
	}
	return *t.MinDownTimer
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSiteName retrieves the value of the leaf SiteName from the NokiaConf_Configure_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiteName is set, it can
// safely use t.GetSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) GetSiteName() string {
	if t == nil || t.SiteName == nil {
		return ""
	}
	return *t.SiteName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpMhSite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpMhSite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SiteName == nil {
		return nil, fmt.Errorf("nil value for key SiteName")
	}

	return map[string]interface{}{
		"site-name": *t.SiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpMhSite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpMhSite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpMhSite.
func (*NokiaConf_Configure_Service_Epipe_BgpMhSite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpVpws represents the /nokia-conf/configure/service/epipe/bgp-vpws YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpVpws struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	LocalVe            *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe             `path:"local-ve" module:"nokia-conf"`
	RemoteVe           map[string]*NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe `path:"remote-ve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpVpws implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpVpws) IsYANGGoStruct() {}

// NewRemoteVe creates a new entry in the RemoteVe list of the
// NokiaConf_Configure_Service_Epipe_BgpVpws struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) NewRemoteVe(Name string) (*NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteVe == nil {
		t.RemoteVe = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteVe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteVe", key)
	}

	t.RemoteVe[key] = &NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe{
		Name: &Name,
	}

	return t.RemoteVe[key], nil
}

// RenameRemoteVe renames an entry in the list RemoteVe within
// the NokiaConf_Configure_Service_Epipe_BgpVpws struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) RenameRemoteVe(oldK, newK string) error {
	if _, ok := t.RemoteVe[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteVe", newK)
	}

	e, ok := t.RemoteVe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteVe", oldK)
	}
	e.Name = &newK

	t.RemoteVe[newK] = e
	delete(t.RemoteVe, oldK)
	return nil
}

// GetOrCreateRemoteVe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpVpws. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetOrCreateRemoteVe(Name string) *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe {

	key := Name

	if v, ok := t.RemoteVe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteVe(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteVe got unexpected error: %v", err))
	}
	return v
}

// GetRemoteVe retrieves the value with the specified key from
// the RemoteVe map field of NokiaConf_Configure_Service_Epipe_BgpVpws. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetRemoteVe(Name string) *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RemoteVe[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteVe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_BgpVpws. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) DeleteRemoteVe(Name string) {
	key := Name

	delete(t.RemoteVe, key)
}

// AppendRemoteVe appends the supplied NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe struct to the
// list RemoteVe of NokiaConf_Configure_Service_Epipe_BgpVpws. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) AppendRemoteVe(v *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteVe == nil {
		t.RemoteVe = make(map[string]*NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe)
	}

	if _, ok := t.RemoteVe[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteVe %v", key)
	}

	t.RemoteVe[key] = v
	return nil
}

// GetOrCreateLocalVe retrieves the value of the LocalVe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetOrCreateLocalVe() *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe {
	if t.LocalVe != nil {
		return t.LocalVe
	}
	t.LocalVe = &NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe{}
	return t.LocalVe
}

// GetLocalVe returns the value of the LocalVe struct pointer
// from NokiaConf_Configure_Service_Epipe_BgpVpws. If the receiver or the field LocalVe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetLocalVe() *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe {
	if t != nil && t.LocalVe != nil {
		return t.LocalVe
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_BgpVpws
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpVpws
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpVpws
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpVpws
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LocalVe.PopulateDefaults()
	for _, e := range t.RemoteVe {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpVpws"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpVpws.
func (*NokiaConf_Configure_Service_Epipe_BgpVpws) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe represents the /nokia-conf/configure/service/epipe/bgp-vpws/local-ve YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe struct {
	Id   *int32  `path:"id" module:"nokia-conf"`
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe.
func (*NokiaConf_Configure_Service_Epipe_BgpVpws_LocalVe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe represents the /nokia-conf/configure/service/epipe/bgp-vpws/remote-ve YANG schema element.
type NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *int32   `path:"id" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe.
func (*NokiaConf_Configure_Service_Epipe_BgpVpws_RemoteVe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding represents the /nokia-conf/configure/service/epipe/bgp/pw-template-binding YANG schema element.
type NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool    `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate        *string  `path:"bfd-template" module:"nokia-conf"`
	Endpoint           *string  `path:"endpoint" module:"nokia-conf"`
	ImportRt           []string `path:"import-rt" module:"nokia-conf"`
	PwTemplateName     *string  `path:"pw-template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetImportRt retrieves the value of the leaf ImportRt from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRt is set, it can
// safely use t.GetImportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetImportRt() []string {
	if t == nil || t.ImportRt == nil {
		return nil
	}
	return t.ImportRt
}

// GetPwTemplateName retrieves the value of the leaf PwTemplateName from the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateName is set, it can
// safely use t.GetPwTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) GetPwTemplateName() string {
	if t == nil || t.PwTemplateName == nil {
		return ""
	}
	return *t.PwTemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwTemplateName == nil {
		return nil, fmt.Errorf("nil value for key PwTemplateName")
	}

	return map[string]interface{}{
		"pw-template-name": *t.PwTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding.
func (*NokiaConf_Configure_Service_Epipe_Bgp_PwTemplateBinding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget represents the /nokia-conf/configure/service/epipe/bgp/route-target YANG schema element.
type NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget struct {
	Export *string `path:"export" module:"nokia-conf"`
	Import *string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) GetImport() string {
	if t == nil || t.Import == nil {
		return ""
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget.
func (*NokiaConf_Configure_Service_Epipe_Bgp_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Endpoint represents the /nokia-conf/configure/service/epipe/endpoint YANG schema element.
type NokiaConf_Configure_Service_Epipe_Endpoint struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	HoldTimeActive     *uint32                                                       `path:"hold-time-active" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	RevertTime         NokiaConf_Configure_Service_Epipe_Endpoint_RevertTime_Union   `path:"revert-time" module:"nokia-conf"`
	StandbySignaling   E_NokiaConf_Configure_Service_Epipe_Endpoint_StandbySignaling `path:"standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Endpoint) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTimeActive retrieves the value of the leaf HoldTimeActive from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeActive is set, it can
// safely use t.GetHoldTimeActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeActive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetHoldTimeActive() uint32 {
	if t == nil || t.HoldTimeActive == nil {
		return 0
	}
	return *t.HoldTimeActive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetRevertTime() NokiaConf_Configure_Service_Epipe_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) GetStandbySignaling() E_NokiaConf_Configure_Service_Epipe_Endpoint_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return 0
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Endpoint.
func (*NokiaConf_Configure_Service_Epipe_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_EthCfm represents the /nokia-conf/configure/service/epipe/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Epipe_EthCfm struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_EthCfm) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_EthCfm.
func (*NokiaConf_Configure_Service_Epipe_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_LoadBalancing represents the /nokia-conf/configure/service/epipe/load-balancing YANG schema element.
type NokiaConf_Configure_Service_Epipe_LoadBalancing struct {
	LblEthOrIpL4Teid  *bool `path:"lbl-eth-or-ip-l4-teid" module:"nokia-conf"`
	PerServiceHashing *bool `path:"per-service-hashing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_LoadBalancing) IsYANGGoStruct() {}

// GetLblEthOrIpL4Teid retrieves the value of the leaf LblEthOrIpL4Teid from the NokiaConf_Configure_Service_Epipe_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LblEthOrIpL4Teid is set, it can
// safely use t.GetLblEthOrIpL4Teid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LblEthOrIpL4Teid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_LoadBalancing) GetLblEthOrIpL4Teid() bool {
	if t == nil || t.LblEthOrIpL4Teid == nil {
		return false
	}
	return *t.LblEthOrIpL4Teid
}

// GetPerServiceHashing retrieves the value of the leaf PerServiceHashing from the NokiaConf_Configure_Service_Epipe_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerServiceHashing is set, it can
// safely use t.GetPerServiceHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerServiceHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_LoadBalancing) GetPerServiceHashing() bool {
	if t == nil || t.PerServiceHashing == nil {
		return false
	}
	return *t.PerServiceHashing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LblEthOrIpL4Teid == nil {
		var v bool = false
		t.LblEthOrIpL4Teid = &v
	}
	if t.PerServiceHashing == nil {
		var v bool = false
		t.PerServiceHashing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_LoadBalancing.
func (*NokiaConf_Configure_Service_Epipe_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_NatOutside represents the /nokia-conf/configure/service/epipe/nat-outside YANG schema element.
type NokiaConf_Configure_Service_Epipe_NatOutside struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	NatGroup           *uint32                     `path:"nat-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_NatOutside implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_NatOutside) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_NatOutside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_NatOutside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_NatOutside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Service_Epipe_NatOutside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_NatOutside
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_NatOutside struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NatGroup == nil {
		return nil, fmt.Errorf("nil value for key NatGroup")
	}

	return map[string]interface{}{
		"nat-group": *t.NatGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_NatOutside"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_NatOutside) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_NatOutside.
func (*NokiaConf_Configure_Service_Epipe_NatOutside) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Pbb represents the /nokia-conf/configure/service/epipe/pbb YANG schema element.
type NokiaConf_Configure_Service_Epipe_Pbb struct {
	ForceQtagForwarding     *bool                                                           `path:"force-qtag-forwarding" module:"nokia-conf"`
	LocalSwitchServiceState E_NokiaConf_Configure_Service_Epipe_Pbb_LocalSwitchServiceState `path:"local-switch-service-state" module:"nokia-conf"`
	Tunnel                  *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel                   `path:"tunnel" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Pbb) IsYANGGoStruct() {}

// GetOrCreateTunnel retrieves the value of the Tunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) GetOrCreateTunnel() *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel {
	if t.Tunnel != nil {
		return t.Tunnel
	}
	t.Tunnel = &NokiaConf_Configure_Service_Epipe_Pbb_Tunnel{}
	return t.Tunnel
}

// GetTunnel returns the value of the Tunnel struct pointer
// from NokiaConf_Configure_Service_Epipe_Pbb. If the receiver or the field Tunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) GetTunnel() *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel {
	if t != nil && t.Tunnel != nil {
		return t.Tunnel
	}
	return nil
}

// GetForceQtagForwarding retrieves the value of the leaf ForceQtagForwarding from the NokiaConf_Configure_Service_Epipe_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceQtagForwarding is set, it can
// safely use t.GetForceQtagForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceQtagForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) GetForceQtagForwarding() bool {
	if t == nil || t.ForceQtagForwarding == nil {
		return false
	}
	return *t.ForceQtagForwarding
}

// GetLocalSwitchServiceState retrieves the value of the leaf LocalSwitchServiceState from the NokiaConf_Configure_Service_Epipe_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSwitchServiceState is set, it can
// safely use t.GetLocalSwitchServiceState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSwitchServiceState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) GetLocalSwitchServiceState() E_NokiaConf_Configure_Service_Epipe_Pbb_LocalSwitchServiceState {
	if t == nil || t.LocalSwitchServiceState == 0 {
		return NokiaConf_Configure_Service_Epipe_Pbb_LocalSwitchServiceState_sap
	}
	return t.LocalSwitchServiceState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceQtagForwarding == nil {
		var v bool = false
		t.ForceQtagForwarding = &v
	}
	if t.LocalSwitchServiceState == 0 {
		t.LocalSwitchServiceState = NokiaConf_Configure_Service_Epipe_Pbb_LocalSwitchServiceState_sap
	}
	t.Tunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Pbb.
func (*NokiaConf_Configure_Service_Epipe_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Pbb_Tunnel represents the /nokia-conf/configure/service/epipe/pbb/tunnel YANG schema element.
type NokiaConf_Configure_Service_Epipe_Pbb_Tunnel struct {
	ApplyGroups             []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string `path:"apply-groups-exclude" module:"nokia-conf"`
	BackboneDestMac         *string  `path:"backbone-dest-mac" module:"nokia-conf"`
	BackboneDestMacName     *string  `path:"backbone-dest-mac-name" module:"nokia-conf"`
	BackboneVplsServiceName *string  `path:"backbone-vpls-service-name" module:"nokia-conf"`
	Isid                    *int32   `path:"isid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Pbb_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackboneDestMac retrieves the value of the leaf BackboneDestMac from the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneDestMac is set, it can
// safely use t.GetBackboneDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneDestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) GetBackboneDestMac() string {
	if t == nil || t.BackboneDestMac == nil {
		return ""
	}
	return *t.BackboneDestMac
}

// GetBackboneDestMacName retrieves the value of the leaf BackboneDestMacName from the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneDestMacName is set, it can
// safely use t.GetBackboneDestMacName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneDestMacName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) GetBackboneDestMacName() string {
	if t == nil || t.BackboneDestMacName == nil {
		return ""
	}
	return *t.BackboneDestMacName
}

// GetBackboneVplsServiceName retrieves the value of the leaf BackboneVplsServiceName from the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneVplsServiceName is set, it can
// safely use t.GetBackboneVplsServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneVplsServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) GetBackboneVplsServiceName() string {
	if t == nil || t.BackboneVplsServiceName == nil {
		return ""
	}
	return *t.BackboneVplsServiceName
}

// GetIsid retrieves the value of the leaf Isid from the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Isid is set, it can
// safely use t.GetIsid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Isid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) GetIsid() int32 {
	if t == nil || t.Isid == nil {
		return 0
	}
	return *t.Isid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Pbb_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Pbb_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Pbb_Tunnel.
func (*NokiaConf_Configure_Service_Epipe_Pbb_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap represents the /nokia-conf/configure/service/epipe/sap YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap struct {
	Aarp               *NokiaConf_Configure_Service_Epipe_Sap_Aarp          `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy   *uint32                                              `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	AppProfile         *string                                              `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint64                                              `path:"bandwidth" module:"nokia-conf"`
	Cflowd             *bool                                                `path:"cflowd" module:"nokia-conf"`
	CollectStats       *bool                                                `path:"collect-stats" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                              `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                              `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Epipe_Sap_Egress        `path:"egress" module:"nokia-conf"`
	Endpoint           *string                                              `path:"endpoint" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Epipe_Sap_EthCfm        `path:"eth-cfm" module:"nokia-conf"`
	Ethernet           *NokiaConf_Configure_Service_Epipe_Sap_Ethernet      `path:"ethernet" module:"nokia-conf"`
	IgnoreOperDown     *bool                                                `path:"ignore-oper-down" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Epipe_Sap_Ingress       `path:"ingress" module:"nokia-conf"`
	L2Tpv3Session      *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session `path:"l2tpv3-session" module:"nokia-conf" yangPresence:"true"`
	Lag                *NokiaConf_Configure_Service_Epipe_Sap_Lag           `path:"lag" module:"nokia-conf"`
	McRing             *NokiaConf_Configure_Service_Epipe_Sap_McRing        `path:"mc-ring" module:"nokia-conf" yangPresence:"true"`
	MonitorOperGroup   *string                                              `path:"monitor-oper-group" module:"nokia-conf"`
	MultiServiceSite   *string                                              `path:"multi-service-site" module:"nokia-conf"`
	OperGroup          *string                                              `path:"oper-group" module:"nokia-conf"`
	SapId              *string                                              `path:"sap-id" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateAarp() *NokiaConf_Configure_Service_Epipe_Sap_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Epipe_Sap_Aarp{}
	return t.Aarp
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Epipe_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Epipe_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Epipe_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateEthernet() *NokiaConf_Configure_Service_Epipe_Sap_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_Service_Epipe_Sap_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Epipe_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Epipe_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateL2Tpv3Session retrieves the value of the L2Tpv3Session field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateL2Tpv3Session() *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session {
	if t.L2Tpv3Session != nil {
		return t.L2Tpv3Session
	}
	t.L2Tpv3Session = &NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session{}
	return t.L2Tpv3Session
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Epipe_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Epipe_Sap_Lag{}
	return t.Lag
}

// GetOrCreateMcRing retrieves the value of the McRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateMcRing() *NokiaConf_Configure_Service_Epipe_Sap_McRing {
	if t.McRing != nil {
		return t.McRing
	}
	t.McRing = &NokiaConf_Configure_Service_Epipe_Sap_McRing{}
	return t.McRing
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetAarp() *NokiaConf_Configure_Service_Epipe_Sap_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetCpuProtection() *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetEgress() *NokiaConf_Configure_Service_Epipe_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetEthCfm() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetEthernet() *NokiaConf_Configure_Service_Epipe_Sap_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetIngress() *NokiaConf_Configure_Service_Epipe_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetL2Tpv3Session returns the value of the L2Tpv3Session struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field L2Tpv3Session is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetL2Tpv3Session() *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session {
	if t != nil && t.L2Tpv3Session != nil {
		return t.L2Tpv3Session
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetLag() *NokiaConf_Configure_Service_Epipe_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetMcRing returns the value of the McRing struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field McRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetMcRing() *NokiaConf_Configure_Service_Epipe_Sap_McRing {
	if t != nil && t.McRing != nil {
		return t.McRing
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetTransitPolicy() *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCflowd retrieves the value of the leaf Cflowd from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cflowd is set, it can
// safely use t.GetCflowd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cflowd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetCflowd() bool {
	if t == nil || t.Cflowd == nil {
		return false
	}
	return *t.Cflowd
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetIgnoreOperDown retrieves the value of the leaf IgnoreOperDown from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreOperDown is set, it can
// safely use t.GetIgnoreOperDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreOperDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetIgnoreOperDown() bool {
	if t == nil || t.IgnoreOperDown == nil {
		return false
	}
	return *t.IgnoreOperDown
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Cflowd == nil {
		var v bool = false
		t.Cflowd = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.IgnoreOperDown == nil {
		var v bool = false
		t.IgnoreOperDown = &v
	}
	t.Aarp.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.L2Tpv3Session.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.McRing.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap.
func (*NokiaConf_Configure_Service_Epipe_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Aarp represents the /nokia-conf/configure/service/epipe/sap/aarp YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Epipe_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Epipe_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Aarp.
func (*NokiaConf_Configure_Service_Epipe_Sap_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_CpuProtection represents the /nokia-conf/configure/service/epipe/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                             `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                               `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Epipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Epipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_CpuProtection.
func (*NokiaConf_Configure_Service_Epipe_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/epipe/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress represents the /nokia-conf/configure/service/epipe/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress struct {
	AggRate          *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate          `path:"agg-rate" module:"nokia-conf"`
	Filter           *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter           `path:"filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos              `path:"qos" module:"nokia-conf"`
	VlanManipulation *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation `path:"vlan-manipulation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos{}
	return t.Qos
}

// GetOrCreateVlanManipulation retrieves the value of the VlanManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetOrCreateVlanManipulation() *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation {
	if t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	t.VlanManipulation = &NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation{}
	return t.VlanManipulation
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVlanManipulation returns the value of the VlanManipulation struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress. If the receiver or the field VlanManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) GetVlanManipulation() *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation {
	if t != nil && t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.VlanManipulation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate represents the /nokia-conf/configure/service/epipe/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate struct {
	Cir                       NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth      *bool                                                          `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                          `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64                                                         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter represents the /nokia-conf/configure/service/epipe/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos represents the /nokia-conf/configure/service/epipe/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos struct {
	EgressRemarkPolicy   *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy   `path:"egress-remark-policy" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                  `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
	VlanQosPolicy        *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy        `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.EgressRemarkPolicy.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/service/epipe/sap/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/epipe/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/epipe/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/epipe/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/epipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/epipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                    `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                       `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                     `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[uint32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues           `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                                    `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                                                   `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                            `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                           `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                           `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                            `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                           `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *int32                                                                                            `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                    `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                                      `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                        `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *int32                                                                                        `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                         `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                        `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/service/epipe/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/epipe/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                     `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/epipe/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/epipe/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                      `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/epipe/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/epipe/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/service/epipe/sap/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation represents the /nokia-conf/configure/service/epipe/sap/egress/vlan-manipulation YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation struct {
	Action E_NokiaTypesServices_VlanManipulationEgressActionType `path:"action" module:"nokia-conf"`
	Tag    E_NokiaTypesServices_VlanManipulationEgressVlanType   `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) GetAction() E_NokiaTypesServices_VlanManipulationEgressActionType {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) GetTag() E_NokiaTypesServices_VlanManipulationEgressVlanType {
	if t == nil || t.Tag == 0 {
		return NokiaTypesServices_VlanManipulationEgressVlanType_null
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == 0 {
		t.Tag = NokiaTypesServices_VlanManipulationEgressVlanType_null
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation.
func (*NokiaConf_Configure_Service_Epipe_Sap_Egress_VlanManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm represents the /nokia-conf/configure/service/epipe/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm struct {
	Ais                      *bool                                                                                                                    `path:"ais" module:"nokia-conf"`
	ApplyGroups              []string                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats        *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats                                                          `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                    `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                 `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                 `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/epipe/sap/eth-cfm.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Epipe_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Epipe_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Service_Epipe_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Service_Epipe_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) AppendMip(v *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                               `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                              `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                             `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                             `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                             `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                      `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                             `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                               `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                               `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                              `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                             `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                             `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                             `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                             `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                             `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                               `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetAis() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                 `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                    `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                  `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                   `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                               `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                          `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}
