/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv4/pool/subnet/minimum-free YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv4/pool/subnet/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) IsYANGGoStruct() {
}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv4/pool/subnet/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct {
	AsciiString     *string                                                                                                      `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                                      `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                                    `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                                      `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                                     `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6 represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	AutoProvisioned    *bool                                                                                `path:"auto-provisioned" module:"nokia-conf"`
	Defaults           *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults            `path:"defaults" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                                                              `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover            `path:"failover" module:"nokia-conf" yangPresence:"true"`
	IgnoreRapidCommit  *bool                                                                                `path:"ignore-rapid-commit" module:"nokia-conf"`
	InterfaceIdMapping *bool                                                                                `path:"interface-id-mapping" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	LeaseQuery         *bool                                                                                `path:"lease-query" module:"nokia-conf"`
	Name               *string                                                                              `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId            `path:"server-id" module:"nokia-conf" yangPresence:"true"`
	UserIdentification E_NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) NewPool(PoolName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetPool(PoolName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) AppendPool(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateDefaults() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults{}
	return t.Defaults
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateLeaseHold() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreatePoolSelection() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection{}
	return t.PoolSelection
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateServerId() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId{}
	return t.ServerId
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetDefaults() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetLeaseHold() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetPoolSelection() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetServerId() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAutoProvisioned retrieves the value of the leaf AutoProvisioned from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoProvisioned is set, it can
// safely use t.GetAutoProvisioned() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoProvisioned == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetAutoProvisioned() bool {
	if t == nil || t.AutoProvisioned == nil {
		return false
	}
	return *t.AutoProvisioned
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreRapidCommit retrieves the value of the leaf IgnoreRapidCommit from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreRapidCommit is set, it can
// safely use t.GetIgnoreRapidCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreRapidCommit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetIgnoreRapidCommit() bool {
	if t == nil || t.IgnoreRapidCommit == nil {
		return false
	}
	return *t.IgnoreRapidCommit
}

// GetInterfaceIdMapping retrieves the value of the leaf InterfaceIdMapping from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceIdMapping is set, it can
// safely use t.GetInterfaceIdMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceIdMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetInterfaceIdMapping() bool {
	if t == nil || t.InterfaceIdMapping == nil {
		return false
	}
	return *t.InterfaceIdMapping
}

// GetLeaseQuery retrieves the value of the leaf LeaseQuery from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseQuery is set, it can
// safely use t.GetLeaseQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetLeaseQuery() bool {
	if t == nil || t.LeaseQuery == nil {
		return false
	}
	return *t.LeaseQuery
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) GetUserIdentification() E_NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoProvisioned == nil {
		var v bool = false
		t.AutoProvisioned = &v
	}
	if t.IgnoreRapidCommit == nil {
		var v bool = false
		t.IgnoreRapidCommit = &v
	}
	if t.InterfaceIdMapping == nil {
		var v bool = false
		t.InterfaceIdMapping = &v
	}
	if t.LeaseQuery == nil {
		var v bool = false
		t.LeaseQuery = &v
	}
	t.Defaults.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	t.ServerId.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults struct {
	Options           *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options `path:"options" module:"nokia-conf"`
	PreferredLifetime *uint32                                                                           `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTime        *uint32                                                                           `path:"rebind-time" module:"nokia-conf"`
	RenewTime         *uint32                                                                           `path:"renew-time" module:"nokia-conf"`
	ValidLifetime     *uint32                                                                           `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) IsYANGGoStruct() {}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/defaults/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) IsYANGGoStruct() {
}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/defaults/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option struct {
	AsciiString  *string                                                                                              `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                              `path:"domain-string" module:"nokia-conf"`
	Duration     *uint32                                                                                              `path:"duration" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                            `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                              `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                             `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                                     `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                                   `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                                   `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                                   `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) AppendPeer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/failover/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/lease-hold YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                                        `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {
}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct {
	DelegatedPrefix       *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix                                                                                                                         `path:"delegated-prefix" module:"nokia-conf"`
	Description           *string                                                                                                                                                                                                       `path:"description" module:"nokia-conf"`
	ExcludePrefix         map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix                                                                                                                `path:"exclude-prefix" module:"nokia-conf"`
	Failover              *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover                                                                                                                                `path:"failover" module:"nokia-conf" yangPresence:"true"`
	Options               *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options                                                                                                                                 `path:"options" module:"nokia-conf"`
	PoolName              *string                                                                                                                                                                                                       `path:"pool-name" module:"nokia-conf"`
	Prefix                map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix                                                                                                                       `path:"prefix" module:"nokia-conf"`
	PrefixLengthThreshold map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) IsYANGGoStruct() {}

// NewExcludePrefix creates a new entry in the ExcludePrefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) NewExcludePrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludePrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludePrefix", key)
	}

	t.ExcludePrefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.ExcludePrefix[key], nil
}

// RenameExcludePrefix renames an entry in the list ExcludePrefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) RenameExcludePrefix(oldK, newK string) error {
	if _, ok := t.ExcludePrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludePrefix", newK)
	}

	e, ok := t.ExcludePrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludePrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.ExcludePrefix[newK] = e
	delete(t.ExcludePrefix, oldK)
	return nil
}

// GetOrCreateExcludePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	key := Ipv6Prefix

	if v, ok := t.ExcludePrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludePrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludePrefix got unexpected error: %v", err))
	}
	return v
}

// GetExcludePrefix retrieves the value with the specified key from
// the ExcludePrefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.ExcludePrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) DeleteExcludePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.ExcludePrefix, key)
}

// AppendExcludePrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct to the
// list ExcludePrefix of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) AppendExcludePrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	if _, ok := t.ExcludePrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludePrefix %v", key)
	}

	t.ExcludePrefix[key] = v
	return nil
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) NewPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold{
		PrefixLength: PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) RenamePrefixLengthThreshold(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) DeletePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) error {
	key := v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateDelegatedPrefix retrieves the value of the DelegatedPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateDelegatedPrefix() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	t.DelegatedPrefix = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix{}
	return t.DelegatedPrefix
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover{}
	return t.Failover
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options{}
	return t.Options
}

// GetDelegatedPrefix returns the value of the DelegatedPrefix struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver or the field DelegatedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetDelegatedPrefix() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t != nil && t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DelegatedPrefix.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.ExcludePrefix {
		e.PopulateDefaults()
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection struct {
	UseLinkAddress    *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress    `path:"use-link-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) IsYANGGoStruct() {
}

// GetOrCreateUseLinkAddress retrieves the value of the UseLinkAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUseLinkAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	t.UseLinkAddress = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress{}
	return t.UseLinkAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseLinkAddress returns the value of the UseLinkAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UseLinkAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetUseLinkAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t != nil && t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseLinkAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool-selection/use-link-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress struct {
	Scope E_NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) IsYANGGoStruct() {
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) GetScope() E_NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/delegated-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix struct {
	Length  *uint32 `path:"length" module:"nokia-conf"`
	Maximum *uint32 `path:"maximum" module:"nokia-conf"`
	Minimum *uint32 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 64
	}
	return *t.Length
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 64
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 48
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Length == nil {
		var v uint32 = 64
		t.Length = &v
	}
	if t.Maximum == nil {
		var v uint32 = 64
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint32 = 48
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/exclude-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) IsYANGGoStruct() {
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                    `path:"admin-state" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                                          `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                                        `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                                        `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                                        `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) IsYANGGoStruct() {
}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) IsYANGGoStruct() {
}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option struct {
	AsciiString  *string                                                                                          `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                          `path:"domain-string" module:"nokia-conf"`
	Duration     *uint32                                                                                          `path:"duration" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                        `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                          `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                         `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct {
	Drain                 *bool                                                                                                                                                                                                                       `path:"drain" module:"nokia-conf"`
	FailoverControlType   E_NokiaTypesDhcp_FailoverControlType                                                                                                                                                                                        `path:"failover-control-type" module:"nokia-conf"`
	Ipv6Prefix            *string                                                                                                                                                                                                                     `path:"ipv6-prefix" module:"nokia-conf"`
	Options               *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options                                                                                                                                        `path:"options" module:"nokia-conf"`
	PreferredLifetime     *uint32                                                                                                                                                                                                                     `path:"preferred-lifetime" module:"nokia-conf"`
	PrefixLengthThreshold map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
	PrefixType            *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType                                                                                                                                     `path:"prefix-type" module:"nokia-conf"`
	RebindTime            *uint32                                                                                                                                                                                                                     `path:"rebind-time" module:"nokia-conf"`
	RenewTime             *uint32                                                                                                                                                                                                                     `path:"renew-time" module:"nokia-conf"`
	ValidLifetime         *uint32                                                                                                                                                                                                                     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) IsYANGGoStruct() {
}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) NewPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold{
		PrefixLength: PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) RenamePrefixLengthThreshold(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) DeletePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) error {
	key := v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options{}
	return t.Options
}

// GetOrCreatePrefixType retrieves the value of the PrefixType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixType() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t.PrefixType != nil {
		return t.PrefixType
	}
	t.PrefixType = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType{}
	return t.PrefixType
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixType returns the value of the PrefixType struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field PrefixType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixType() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t != nil && t.PrefixType != nil {
		return t.PrefixType
	}
	return nil
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixType.PopulateDefaults()
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct {
	EventWhenDepleted  *bool                                                                                                         `path:"event-when-depleted" module:"nokia-conf"`
	MinimumFreePercent *uint32                                                                                                       `path:"minimum-free-percent" module:"nokia-conf"`
	PrefixLength       NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetMinimumFreePercent retrieves the value of the leaf MinimumFreePercent from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumFreePercent is set, it can
// safely use t.GetMinimumFreePercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumFreePercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetMinimumFreePercent() uint32 {
	if t == nil || t.MinimumFreePercent == nil {
		return 0
	}
	return *t.MinimumFreePercent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetPrefixLength() NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union {
	if t == nil || t.PrefixLength == nil {
		return nil
	}
	return t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.MinimumFreePercent == nil {
		var v uint32 = 0
		t.MinimumFreePercent = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prefix-length": t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/prefix/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) IsYANGGoStruct() {
}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/prefix/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct {
	AsciiString  *string                                                                                                 `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                                 `path:"domain-string" module:"nokia-conf"`
	Duration     *uint32                                                                                                 `path:"duration" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                               `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                                 `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                                `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/prefix/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct {
	Absolute          *uint32                                                                                                              `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool                                                                                                                `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32                                                                                                              `path:"percent" module:"nokia-conf"`
	PrefixLength      NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPrefixLength() NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union {
	if t == nil || t.PrefixLength == nil {
		return nil
	}
	return t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prefix-length": t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/pool/prefix/prefix-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType struct {
	Pd      *bool `path:"pd" module:"nokia-conf"`
	WanHost *bool `path:"wan-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) IsYANGGoStruct() {
}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// GetWanHost retrieves the value of the leaf WanHost from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanHost is set, it can
// safely use t.GetWanHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetWanHost() bool {
	if t == nil || t.WanHost == nil {
		return true
	}
	return *t.WanHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
	if t.WanHost == nil {
		var v bool = true
		t.WanHost = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/server-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId struct {
	DuidEnterprise *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise `path:"duid-enterprise" module:"nokia-conf"`
	DuidLinkLocal  YANGEmpty                                                                                `path:"duid-link-local" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) IsYANGGoStruct() {}

// GetOrCreateDuidEnterprise retrieves the value of the DuidEnterprise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetOrCreateDuidEnterprise() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	t.DuidEnterprise = &NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise{}
	return t.DuidEnterprise
}

// GetDuidEnterprise returns the value of the DuidEnterprise struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId. If the receiver or the field DuidEnterprise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetDuidEnterprise() *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t != nil && t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	return nil
}

// GetDuidLinkLocal retrieves the value of the leaf DuidLinkLocal from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLinkLocal is set, it can
// safely use t.GetDuidLinkLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLinkLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetDuidLinkLocal() YANGEmpty {
	if t == nil || t.DuidLinkLocal == false {
		return false
	}
	return t.DuidLinkLocal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DuidEnterprise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise represents the /nokia-conf/configure/groups/group/service/vprn/dhcp-server/dhcpv6/server-id/duid-enterprise YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Dns represents the /nokia-conf/configure/groups/group/service/vprn/dns YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Dns struct {
	AdminState        E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	DefaultDomain     *string                                                                   `path:"default-domain" module:"nokia-conf"`
	Ipv4SourceAddress NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv4SourceAddress_Union `path:"ipv4-source-address" module:"nokia-conf"`
	Ipv6SourceAddress NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv6SourceAddress_Union `path:"ipv6-source-address" module:"nokia-conf"`
	Server            []string                                                                  `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDefaultDomain retrieves the value of the leaf DefaultDomain from the NokiaConf_Configure_Groups_Group_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDomain is set, it can
// safely use t.GetDefaultDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) GetDefaultDomain() string {
	if t == nil || t.DefaultDomain == nil {
		return ""
	}
	return *t.DefaultDomain
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) GetIpv4SourceAddress() NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv4SourceAddress_Union {
	if t == nil || t.Ipv4SourceAddress == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv4SourceAddress_Enum_use_interface_ip
	}
	return t.Ipv4SourceAddress
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) GetIpv6SourceAddress() NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv6SourceAddress_Union {
	if t == nil || t.Ipv6SourceAddress == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv6SourceAddress_Enum_use_interface_ip
	}
	return t.Ipv6SourceAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ipv4SourceAddress == nil {
		t.Ipv4SourceAddress = NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv4SourceAddress_Enum_use_interface_ip
	}
	if t.Ipv6SourceAddress == nil {
		t.Ipv6SourceAddress = NokiaConf_Configure_Groups_Group_Service_Vprn_Dns_Ipv6SourceAddress_Enum_use_interface_ip
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Dns.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm represents the /nokia-conf/configure/groups/group/service/vprn/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall represents the /nokia-conf/configure/groups/group/service/vprn/firewall YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall struct {
	Domain map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) NewDomain(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain{
		Name: &Name,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.Name = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) GetOrCreateDomain(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain {

	key := Name

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) GetDomain(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) DeleteDomain(Name string) {
	key := Name

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain struct to the
// list Domain of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) AppendDomain(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain represents the /nokia-conf/configure/groups/group/service/vprn/firewall/domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain struct {
	AdminState   E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Dhcpv6Server *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server      `path:"dhcpv6-server" module:"nokia-conf"`
	Name         *string                                                                          `path:"name" module:"nokia-conf"`
	NatGroup     *uint32                                                                          `path:"nat-group" module:"nokia-conf"`
	Prefix       map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix `path:"prefix" module:"nokia-conf"`
	WlanGwGroup  *uint32                                                                          `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDhcpv6Server retrieves the value of the Dhcpv6Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetOrCreateDhcpv6Server() *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server {
	if t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	t.Dhcpv6Server = &NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server{}
	return t.Dhcpv6Server
}

// GetDhcpv6Server returns the value of the Dhcpv6Server struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain. If the receiver or the field Dhcpv6Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetDhcpv6Server() *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server {
	if t != nil && t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Dhcpv6Server.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server represents the /nokia-conf/configure/groups/group/service/vprn/firewall/domain/dhcpv6-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Dhcpv6Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/firewall/domain/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix struct {
	Description *string `path:"description" module:"nokia-conf"`
	IpPrefix    *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Firewall_Domain_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec represents the /nokia-conf/configure/groups/group/service/vprn/flowspec YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec struct {
	FilterCamType     E_NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec_FilterCamType `path:"filter-cam-type" module:"nokia-conf"`
	IpFilterMaxSize   *uint32                                                                `path:"ip-filter-max-size" module:"nokia-conf"`
	Ipv6FilterMaxSize *uint32                                                                `path:"ipv6-filter-max-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) IsYANGGoStruct() {}

// GetFilterCamType retrieves the value of the leaf FilterCamType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterCamType is set, it can
// safely use t.GetFilterCamType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterCamType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) GetFilterCamType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec_FilterCamType {
	if t == nil || t.FilterCamType == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec_FilterCamType_normal
	}
	return t.FilterCamType
}

// GetIpFilterMaxSize retrieves the value of the leaf IpFilterMaxSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterMaxSize is set, it can
// safely use t.GetIpFilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) GetIpFilterMaxSize() uint32 {
	if t == nil || t.IpFilterMaxSize == nil {
		return 512
	}
	return *t.IpFilterMaxSize
}

// GetIpv6FilterMaxSize retrieves the value of the leaf Ipv6FilterMaxSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6FilterMaxSize is set, it can
// safely use t.GetIpv6FilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6FilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) GetIpv6FilterMaxSize() uint32 {
	if t == nil || t.Ipv6FilterMaxSize == nil {
		return 512
	}
	return *t.Ipv6FilterMaxSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FilterCamType == 0 {
		t.FilterCamType = NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec_FilterCamType_normal
	}
	if t.IpFilterMaxSize == nil {
		var v uint32 = 512
		t.IpFilterMaxSize = &v
	}
	if t.Ipv6FilterMaxSize == nil {
		var v uint32 = 512
		t.Ipv6FilterMaxSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking represents the /nokia-conf/configure/groups/group/service/vprn/grt-leaking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking struct {
	AllowLocalManagement *bool                                                               `path:"allow-local-management" module:"nokia-conf"`
	ExportGrt            *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt `path:"export-grt" module:"nokia-conf"`
	ExportLimit          *uint32                                                             `path:"export-limit" module:"nokia-conf"`
	ExportV6Limit        *uint32                                                             `path:"export-v6-limit" module:"nokia-conf"`
	GrtLookup            *bool                                                               `path:"grt-lookup" module:"nokia-conf"`
	ImportGrt            *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt `path:"import-grt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) IsYANGGoStruct() {}

// GetOrCreateExportGrt retrieves the value of the ExportGrt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetOrCreateExportGrt() *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt {
	if t.ExportGrt != nil {
		return t.ExportGrt
	}
	t.ExportGrt = &NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt{}
	return t.ExportGrt
}

// GetOrCreateImportGrt retrieves the value of the ImportGrt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetOrCreateImportGrt() *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt {
	if t.ImportGrt != nil {
		return t.ImportGrt
	}
	t.ImportGrt = &NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt{}
	return t.ImportGrt
}

// GetExportGrt returns the value of the ExportGrt struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking. If the receiver or the field ExportGrt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetExportGrt() *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt {
	if t != nil && t.ExportGrt != nil {
		return t.ExportGrt
	}
	return nil
}

// GetImportGrt returns the value of the ImportGrt struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking. If the receiver or the field ImportGrt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetImportGrt() *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt {
	if t != nil && t.ImportGrt != nil {
		return t.ImportGrt
	}
	return nil
}

// GetAllowLocalManagement retrieves the value of the leaf AllowLocalManagement from the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalManagement is set, it can
// safely use t.GetAllowLocalManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalManagement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetAllowLocalManagement() bool {
	if t == nil || t.AllowLocalManagement == nil {
		return false
	}
	return *t.AllowLocalManagement
}

// GetExportLimit retrieves the value of the leaf ExportLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportLimit is set, it can
// safely use t.GetExportLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetExportLimit() uint32 {
	if t == nil || t.ExportLimit == nil {
		return 5
	}
	return *t.ExportLimit
}

// GetExportV6Limit retrieves the value of the leaf ExportV6Limit from the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportV6Limit is set, it can
// safely use t.GetExportV6Limit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportV6Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetExportV6Limit() uint32 {
	if t == nil || t.ExportV6Limit == nil {
		return 5
	}
	return *t.ExportV6Limit
}

// GetGrtLookup retrieves the value of the leaf GrtLookup from the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrtLookup is set, it can
// safely use t.GetGrtLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrtLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) GetGrtLookup() bool {
	if t == nil || t.GrtLookup == nil {
		return false
	}
	return *t.GrtLookup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalManagement == nil {
		var v bool = false
		t.AllowLocalManagement = &v
	}
	if t.ExportLimit == nil {
		var v uint32 = 5
		t.ExportLimit = &v
	}
	if t.ExportV6Limit == nil {
		var v uint32 = 5
		t.ExportV6Limit = &v
	}
	if t.GrtLookup == nil {
		var v bool = false
		t.GrtLookup = &v
	}
	t.ExportGrt.PopulateDefaults()
	t.ImportGrt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt represents the /nokia-conf/configure/groups/group/service/vprn/grt-leaking/export-grt YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt struct {
	PolicyName []string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) GetPolicyName() []string {
	if t == nil || t.PolicyName == nil {
		return nil
	}
	return t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ExportGrt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt represents the /nokia-conf/configure/groups/group/service/vprn/grt-leaking/import-grt YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt struct {
	PolicyName []string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) GetPolicyName() []string {
	if t == nil || t.PolicyName == nil {
		return nil
	}
	return t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_GrtLeaking_ImportGrt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp represents the /nokia-conf/configure/groups/group/service/vprn/gsmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp struct {
	AdminState E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	Group      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) NewGroup(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) GetOrCreateGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) GetGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group represents the /nokia-conf/configure/groups/group/service/vprn/gsmp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group struct {
	AdminState     E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	Ancp           *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp                `path:"ancp" module:"nokia-conf"`
	Description    *string                                                                       `path:"description" module:"nokia-conf"`
	HoldMultiplier *uint32                                                                       `path:"hold-multiplier" module:"nokia-conf"`
	IdleFilter     *bool                                                                         `path:"idle-filter" module:"nokia-conf"`
	Keepalive      *uint32                                                                       `path:"keepalive" module:"nokia-conf"`
	Name           *string                                                                       `path:"name" module:"nokia-conf"`
	Neighbor       map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Persistency    *bool                                                                         `path:"persistency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) NewNeighbor(RemoteAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor{
		RemoteAddress: &RemoteAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.RemoteAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetOrCreateNeighbor(RemoteAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor {

	key := RemoteAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetNeighbor(RemoteAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) DeleteNeighbor(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetOrCreateAncp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp{}
	return t.Ancp
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetAncp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldMultiplier retrieves the value of the leaf HoldMultiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldMultiplier is set, it can
// safely use t.GetHoldMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetHoldMultiplier() uint32 {
	if t == nil || t.HoldMultiplier == nil {
		return 3
	}
	return *t.HoldMultiplier
}

// GetIdleFilter retrieves the value of the leaf IdleFilter from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleFilter is set, it can
// safely use t.GetIdleFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetIdleFilter() bool {
	if t == nil || t.IdleFilter == nil {
		return false
	}
	return *t.IdleFilter
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 10
	}
	return *t.Keepalive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPersistency retrieves the value of the leaf Persistency from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistency is set, it can
// safely use t.GetPersistency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) GetPersistency() bool {
	if t == nil || t.Persistency == nil {
		return false
	}
	return *t.Persistency
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldMultiplier == nil {
		var v uint32 = 3
		t.HoldMultiplier = &v
	}
	if t.IdleFilter == nil {
		var v bool = false
		t.IdleFilter = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 10
		t.Keepalive = &v
	}
	if t.Persistency == nil {
		var v bool = false
		t.Persistency = &v
	}
	t.Ancp.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp represents the /nokia-conf/configure/groups/group/service/vprn/gsmp/group/ancp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp struct {
	DynamicTopologyDiscovery *bool `path:"dynamic-topology-discovery" module:"nokia-conf"`
	Oam                      *bool `path:"oam" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) IsYANGGoStruct() {}

// GetDynamicTopologyDiscovery retrieves the value of the leaf DynamicTopologyDiscovery from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTopologyDiscovery is set, it can
// safely use t.GetDynamicTopologyDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTopologyDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) GetDynamicTopologyDiscovery() bool {
	if t == nil || t.DynamicTopologyDiscovery == nil {
		return true
	}
	return *t.DynamicTopologyDiscovery
}

// GetOam retrieves the value of the leaf Oam from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oam is set, it can
// safely use t.GetOam() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oam == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) GetOam() bool {
	if t == nil || t.Oam == nil {
		return false
	}
	return *t.Oam
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicTopologyDiscovery == nil {
		var v bool = true
		t.DynamicTopologyDiscovery = &v
	}
	if t.Oam == nil {
		var v bool = false
		t.Oam = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor represents the /nokia-conf/configure/groups/group/service/vprn/gsmp/group/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor struct {
	AdminState      E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	Description     *string                                                                            `path:"description" module:"nokia-conf"`
	LocalAddress    *string                                                                            `path:"local-address" module:"nokia-conf"`
	PriorityMarking *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking `path:"priority-marking" module:"nokia-conf"`
	RemoteAddress   *string                                                                            `path:"remote-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) IsYANGGoStruct() {}

// GetOrCreatePriorityMarking retrieves the value of the PriorityMarking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) GetOrCreatePriorityMarking() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking {
	if t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	t.PriorityMarking = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking{}
	return t.PriorityMarking
}

// GetPriorityMarking returns the value of the PriorityMarking struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor. If the receiver or the field PriorityMarking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) GetPriorityMarking() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking {
	if t != nil && t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PriorityMarking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking represents the /nokia-conf/configure/groups/group/service/vprn/gsmp/group/neighbor/priority-marking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) IsYANGGoStruct() {
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp represents the /nokia-conf/configure/groups/group/service/vprn/gtp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp struct {
	S11             *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11             `path:"s11" module:"nokia-conf"`
	UpfDataEndpoint *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint `path:"upf-data-endpoint" module:"nokia-conf" yangPresence:"true"`
	Uplink          *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink          `path:"uplink" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) IsYANGGoStruct() {}

// GetOrCreateS11 retrieves the value of the S11 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) GetOrCreateS11() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 {
	if t.S11 != nil {
		return t.S11
	}
	t.S11 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11{}
	return t.S11
}

// GetOrCreateUpfDataEndpoint retrieves the value of the UpfDataEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) GetOrCreateUpfDataEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint {
	if t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	t.UpfDataEndpoint = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint{}
	return t.UpfDataEndpoint
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) GetOrCreateUplink() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink{}
	return t.Uplink
}

// GetS11 returns the value of the S11 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp. If the receiver or the field S11 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) GetS11() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 {
	if t != nil && t.S11 != nil {
		return t.S11
	}
	return nil
}

// GetUpfDataEndpoint returns the value of the UpfDataEndpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp. If the receiver or the field UpfDataEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) GetUpfDataEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint {
	if t != nil && t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) GetUplink() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.S11.PopulateDefaults()
	t.UpfDataEndpoint.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 represents the /nokia-conf/configure/groups/group/service/vprn/gtp/s11 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 struct {
	Interface      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface `path:"interface" module:"nokia-conf"`
	PeerProfileMap *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap       `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) GetPeerProfileMap() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PeerProfileMap.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface represents the /nokia-conf/configure/groups/group/service/vprn/gtp/s11/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface struct {
	ApnPolicy     *string `path:"apn-policy" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) IsYANGGoStruct() {}

// GetApnPolicy retrieves the value of the leaf ApnPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApnPolicy is set, it can
// safely use t.GetApnPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApnPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) GetApnPolicy() string {
	if t == nil || t.ApnPolicy == nil {
		return ""
	}
	return *t.ApnPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap represents the /nokia-conf/configure/groups/group/service/vprn/gtp/s11/peer-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/gtp/s11/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix struct {
	PeerPrefix  *string `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile *string `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) IsYANGGoStruct() {
}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint represents the /nokia-conf/configure/groups/group/service/vprn/gtp/upf-data-endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint struct {
	Fpe       *uint32 `path:"fpe" module:"nokia-conf"`
	Interface *string `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) IsYANGGoStruct() {}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_UpfDataEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink represents the /nokia-conf/configure/groups/group/service/vprn/gtp/uplink YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink struct {
	Apn            *string                                                                  `path:"apn" module:"nokia-conf"`
	PdnType        E_NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PdnType       `path:"pdn-type" module:"nokia-conf"`
	PeerProfileMap *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) IsYANGGoStruct() {}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) GetPeerProfileMap() *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) GetApn() string {
	if t == nil || t.Apn == nil {
		return ""
	}
	return *t.Apn
}

// GetPdnType retrieves the value of the leaf PdnType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdnType is set, it can
// safely use t.GetPdnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) GetPdnType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PdnType {
	if t == nil || t.PdnType == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PdnType_ipv4
	}
	return t.PdnType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PdnType == 0 {
		t.PdnType = NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PdnType_ipv4
	}
	t.PeerProfileMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap represents the /nokia-conf/configure/groups/group/service/vprn/gtp/uplink/peer-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/gtp/uplink/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix struct {
	PeerPrefix  *string `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile *string `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) IsYANGGoStruct() {
}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp represents the /nokia-conf/configure/groups/group/service/vprn/igmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                                      `path:"admin-state" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                                                          `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface                                                                                    `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface                                                                                         `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                                                          `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                                                          `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                                                          `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                                                          `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate                                                                                                 `path:"ssm-translate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/groups/group/service/vprn/igmp.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) AppendForwardingGroupInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) AppendGroupInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate{}
	return t.SsmTranslate
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking represents the /nokia-conf/configure/groups/group/service/vprn/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ExpiryTime *uint32                     `path:"expiry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 260
	}
	return *t.ExpiryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpiryTime == nil {
		var v uint32 = 260
		t.ExpiryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface represents the /nokia-conf/configure/groups/group/service/vprn/igmp/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ForwardingService         *string                                                                           `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                                           `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                                           `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                           `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                           `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                           `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                           `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                           `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                           `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                                           `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                             `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                             `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                             `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                                      `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) IsYANGGoStruct() {
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/groups/group/service/vprn/igmp/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                                     `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                                     `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {
}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vprn/igmp/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface represents the /nokia-conf/configure/groups/group/service/vprn/igmp/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	GroupInterfaceName        *string                                                                 `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                                 `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                 `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                 `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                 `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                 `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                 `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                 `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                                 `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                   `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                   `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                   `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                            `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac represents the /nokia-conf/configure/groups/group/service/vprn/igmp/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                           `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                           `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vprn/igmp/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ImportPolicy              *string                                                                    `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                                    `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                    `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                    `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                    `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                    `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                    `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                    `path:"query-response-interval" module:"nokia-conf"`
	RedundantMcast            *bool                                                                      `path:"redundant-mcast" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                      `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static       `path:"static" module:"nokia-conf"`
	SubnetCheck               *bool                                                                      `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetStatic() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRedundantMcast retrieves the value of the leaf RedundantMcast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantMcast is set, it can
// safely use t.GetRedundantMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetRedundantMcast() bool {
	if t == nil || t.RedundantMcast == nil {
		return false
	}
	return *t.RedundantMcast
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RedundantMcast == nil {
		var v bool = false
		t.RedundantMcast = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                          `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                                          `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct {
	Level            map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level                     `path:"level" module:"nokia-conf"`
	NumberDown       map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                                                                                                                                              `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) NewLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) error {
	key := v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level struct {
	Bandwidth *uint32                                                                                             `path:"bandwidth" module:"nokia-conf"`
	LevelId   NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) GetLevelId() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown struct {
	Level             *uint32                                                                                                            `path:"level" module:"nokia-conf"`
	NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union {
	if t == nil || t.NumberLagPortDown == nil {
		return nil
	}
	return t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-lag-port-down": t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/service/vprn/igmp/interface/ssm-translate.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct {
	End    *string                                                                                                 `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                                 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group                                                                                  `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/service/vprn/igmp/interface/static.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group struct {
	GroupAddress *string                                                                                      `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                    `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange struct {
	End    *string                                                                                           `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg  YANGEmpty                                                                                         `path:"starg" module:"nokia-conf"`
	Start  *string                                                                                           `path:"start" module:"nokia-conf"`
	Step   *string                                                                                           `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source represents the /nokia-conf/configure/groups/group/service/vprn/igmp/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate represents the /nokia-conf/configure/groups/group/service/vprn/igmp/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/service/vprn/igmp/ssm-translate.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/service/vprn/igmp/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange struct {
	End    *string                                                                                       `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                       `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/service/vprn/igmp/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface represents the /nokia-conf/configure/groups/group/service/vprn/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct {
	AdminState                    E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	CflowdParameters              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters    `path:"cflowd-parameters" module:"nokia-conf"`
	CpuProtection                 *uint32                                                                      `path:"cpu-protection" module:"nokia-conf"`
	Description                   *string                                                                      `path:"description" module:"nokia-conf"`
	DynamicTunnelRedundantNexthop *string                                                                      `path:"dynamic-tunnel-redundant-nexthop" module:"nokia-conf"`
	HoldTime                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime            `path:"hold-time" module:"nokia-conf"`
	IfAttribute                   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute         `path:"if-attribute" module:"nokia-conf"`
	Ingress                       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress             `path:"ingress" module:"nokia-conf"`
	IngressStats                  *bool                                                                        `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName                 *string                                                                      `path:"interface-name" module:"nokia-conf"`
	IpMtu                         *uint32                                                                      `path:"ip-mtu" module:"nokia-conf"`
	Ipv4                          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4                `path:"ipv4" module:"nokia-conf"`
	Ipv6                          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6                `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LoadBalancing                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing       `path:"load-balancing" module:"nokia-conf"`
	Loopback                      *bool                                                                        `path:"loopback" module:"nokia-conf"`
	Mac                           *string                                                                      `path:"mac" module:"nokia-conf"`
	MacAccounting                 *bool                                                                        `path:"mac-accounting" module:"nokia-conf"`
	MonitorOperGroup              *string                                                                      `path:"monitor-oper-group" module:"nokia-conf"`
	PingTemplate                  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate        `path:"ping-template" module:"nokia-conf" yangPresence:"true"`
	PtpHwAssist                   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist         `path:"ptp-hw-assist" module:"nokia-conf" yangPresence:"true"`
	RadiusAuthPolicy              *string                                                                      `path:"radius-auth-policy" module:"nokia-conf"`
	Sap                           map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap      `path:"sap" module:"nokia-conf"`
	ShcvPolicyIpv4                *string                                                                      `path:"shcv-policy-ipv4" module:"nokia-conf"`
	SpokeSdp                      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	StaticTunnelRedundantNexthop  *string                                                                      `path:"static-tunnel-redundant-nexthop" module:"nokia-conf"`
	TosMarkingState               E_NokiaTypesRouter_TosMarkingState                                           `path:"tos-marking-state" module:"nokia-conf"`
	Tunnel                        *bool                                                                        `path:"tunnel" module:"nokia-conf"`
	VasIfType                     E_NokiaTypesRouter_VasIfType                                                 `path:"vas-if-type" module:"nokia-conf"`
	Vpls                          map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls     `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewVpls creates a new entry in the Vpls list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) NewVpls(VplsName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls)
	}

	key := VplsName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vpls", key)
	}

	t.Vpls[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls{
		VplsName: &VplsName,
	}

	return t.Vpls[key], nil
}

// RenameVpls renames an entry in the list Vpls within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) RenameVpls(oldK, newK string) error {
	if _, ok := t.Vpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Vpls", newK)
	}

	e, ok := t.Vpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vpls", oldK)
	}
	e.VplsName = &newK

	t.Vpls[newK] = e
	delete(t.Vpls, oldK)
	return nil
}

// GetOrCreateVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateVpls(VplsName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls {

	key := VplsName

	if v, ok := t.Vpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVpls(VplsName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVpls got unexpected error: %v", err))
	}
	return v
}

// GetVpls retrieves the value with the specified key from
// the Vpls map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetVpls(VplsName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls {

	if t == nil {
		return nil
	}

	key := VplsName

	if lm, ok := t.Vpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) DeleteVpls(VplsName string) {
	key := VplsName

	delete(t.Vpls, key)
}

// AppendVpls appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls struct to the
// list Vpls of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) AppendVpls(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) error {
	if v.VplsName == nil {
		return fmt.Errorf("invalid nil key received for VplsName")
	}

	key := *v.VplsName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls)
	}

	if _, ok := t.Vpls[key]; ok {
		return fmt.Errorf("duplicate key for list Vpls %v", key)
	}

	t.Vpls[key] = v
	return nil
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateIfAttribute() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreatePingTemplate retrieves the value of the PingTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreatePingTemplate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate {
	if t.PingTemplate != nil {
		return t.PingTemplate
	}
	t.PingTemplate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate{}
	return t.PingTemplate
}

// GetOrCreatePtpHwAssist retrieves the value of the PtpHwAssist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetOrCreatePtpHwAssist() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist {
	if t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	t.PtpHwAssist = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist{}
	return t.PtpHwAssist
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetCflowdParameters() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetHoldTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetIfAttribute() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetPingTemplate returns the value of the PingTemplate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field PingTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetPingTemplate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate {
	if t != nil && t.PingTemplate != nil {
		return t.PingTemplate
	}
	return nil
}

// GetPtpHwAssist returns the value of the PtpHwAssist struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface. If the receiver or the field PtpHwAssist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetPtpHwAssist() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist {
	if t != nil && t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicTunnelRedundantNexthop retrieves the value of the leaf DynamicTunnelRedundantNexthop from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTunnelRedundantNexthop is set, it can
// safely use t.GetDynamicTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetDynamicTunnelRedundantNexthop() string {
	if t == nil || t.DynamicTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.DynamicTunnelRedundantNexthop
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetLoopback() bool {
	if t == nil || t.Loopback == nil {
		return false
	}
	return *t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacAccounting retrieves the value of the leaf MacAccounting from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAccounting is set, it can
// safely use t.GetMacAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetMacAccounting() bool {
	if t == nil || t.MacAccounting == nil {
		return false
	}
	return *t.MacAccounting
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetStaticTunnelRedundantNexthop retrieves the value of the leaf StaticTunnelRedundantNexthop from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticTunnelRedundantNexthop is set, it can
// safely use t.GetStaticTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetStaticTunnelRedundantNexthop() string {
	if t == nil || t.StaticTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.StaticTunnelRedundantNexthop
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_trusted
	}
	return t.TosMarkingState
}

// GetTunnel retrieves the value of the leaf Tunnel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunnel is set, it can
// safely use t.GetTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetTunnel() bool {
	if t == nil || t.Tunnel == nil {
		return false
	}
	return *t.Tunnel
}

// GetVasIfType retrieves the value of the leaf VasIfType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasIfType is set, it can
// safely use t.GetVasIfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasIfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) GetVasIfType() E_NokiaTypesRouter_VasIfType {
	if t == nil || t.VasIfType == 0 {
		return 0
	}
	return t.VasIfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.Loopback == nil {
		var v bool = false
		t.Loopback = &v
	}
	if t.MacAccounting == nil {
		var v bool = false
		t.MacAccounting = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_trusted
	}
	if t.Tunnel == nil {
		var v bool = false
		t.Tunnel = &v
	}
	t.CflowdParameters.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.PingTemplate.PopulateDefaults()
	t.PtpHwAssist.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Vpls {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters represents the /nokia-conf/configure/groups/group/service/vprn/interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters struct {
	Sampling map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) NewSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) RenameSampling(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) GetOrCreateSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) GetSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) DeleteSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling represents the /nokia-conf/configure/groups/group/service/vprn/interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling struct {
	Direction     E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType  NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union  `path:"sampling-type" module:"nokia-conf"`
	Type          E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) GetSamplingType() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_SamplingType_Union {
	if t == nil || t.SamplingType == nil {
		return nil
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/groups/group/service/vprn/interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute represents the /nokia-conf/configure/groups/group/service/vprn/interface/if-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute struct {
	AdminGroup []string                                                                                  `path:"admin-group" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) IsYANGGoStruct() {}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup represents the /nokia-conf/configure/groups/group/service/vprn/interface/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/interface/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress struct {
	DestinationClassLookup *bool   `path:"destination-class-lookup" module:"nokia-conf"`
	PolicyAccounting       *string `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) IsYANGGoStruct() {}

// GetDestinationClassLookup retrieves the value of the leaf DestinationClassLookup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClassLookup is set, it can
// safely use t.GetDestinationClassLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClassLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) GetDestinationClassLookup() bool {
	if t == nil || t.DestinationClassLookup == nil {
		return false
	}
	return *t.DestinationClassLookup
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationClassLookup == nil {
		var v bool = false
		t.DestinationClassLookup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 struct {
	Addresses               *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses                                                                                        `path:"addresses" module:"nokia-conf"`
	AllowDirectedBroadcasts *bool                                                                                                                                                          `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd                                                                                              `path:"bfd" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp                                                                                             `path:"dhcp" module:"nokia-conf" yangPresence:"true"`
	Icmp                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp                                                                                             `path:"icmp" module:"nokia-conf"`
	IpHelperAddress         *string                                                                                                                                                        `path:"ip-helper-address" module:"nokia-conf"`
	LocalDhcpServer         *string                                                                                                                                                        `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery                                                                                `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary                                                                                          `path:"primary" module:"nokia-conf" yangPresence:"true"`
	QosRouteLookup          E_NokiaTypesRouter_QosRouteLookup                                                                                                                              `path:"qos-route-lookup" module:"nokia-conf"`
	Secondary               map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary                                                                             `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                                                                                                                        `path:"tcp-mss" module:"nokia-conf"`
	Unnumbered              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered                                                                                       `path:"unnumbered" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck                                                                                        `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                    map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) NewVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp{
		VirtualRouterId: VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) RenameVrrp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) DeleteVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) AppendVrrp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) error {
	key := v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateAddresses retrieves the value of the Addresses field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateAddresses() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses {
	if t.Addresses != nil {
		return t.Addresses
	}
	t.Addresses = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses{}
	return t.Addresses
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetAddresses returns the value of the Addresses struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field Addresses is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetAddresses() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses {
	if t != nil && t.Addresses != nil {
		return t.Addresses
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetDhcp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetIcmp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetIpHelperAddress retrieves the value of the leaf IpHelperAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpHelperAddress is set, it can
// safely use t.GetIpHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpHelperAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetIpHelperAddress() string {
	if t == nil || t.IpHelperAddress == nil {
		return ""
	}
	return *t.IpHelperAddress
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Addresses.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/addresses YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses struct {
	Address map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) GetAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) AppendAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/addresses/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address struct {
	Ipv4Address  *string `path:"ipv4-address" module:"nokia-conf"`
	PrefixLength *uint32 `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                                 `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                                 `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                                 `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                                 `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Description             *string                                                                          `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                                          `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82     `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer   `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                                          `path:"python-policy" module:"nokia-conf"`
	RelayPlainBootp         *bool                                                                            `path:"relay-plain-bootp" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy    `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                                            `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                                         `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr    `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                                            `path:"trusted" module:"nokia-conf"`
	UseArp                  *bool                                                                            `path:"use-arp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRelayPlainBootp retrieves the value of the leaf RelayPlainBootp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayPlainBootp is set, it can
// safely use t.GetRelayPlainBootp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayPlainBootp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetRelayPlainBootp() bool {
	if t == nil || t.RelayPlainBootp == nil {
		return false
	}
	return *t.RelayPlainBootp
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// GetUseArp retrieves the value of the leaf UseArp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseArp is set, it can
// safely use t.GetUseArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) GetUseArp() bool {
	if t == nil || t.UseArp == nil {
		return false
	}
	return *t.UseArp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RelayPlainBootp == nil {
		var v bool = false
		t.RelayPlainBootp = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	if t.UseArp == nil {
		var v bool = false
		t.UseArp = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {
}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {
}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	SapId          YANGEmpty `path:"sap-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	PoolName         *bool   `path:"pool-name" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetPoolName() bool {
	if t == nil || t.PoolName == nil {
		return false
	}
	return *t.PoolName
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.PoolName == nil {
		var v bool = false
		t.PoolName = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                                  `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) IsYANGGoStruct() {
}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {
}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/dhcp/relay-proxy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy struct {
	ReleaseUpdateSrcIp *bool   `path:"release-update-src-ip" module:"nokia-conf"`
	SiaddrOverride     *string `path:"siaddr-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) IsYANGGoStruct() {
}

// GetReleaseUpdateSrcIp retrieves the value of the leaf ReleaseUpdateSrcIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseUpdateSrcIp is set, it can
// safely use t.GetReleaseUpdateSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseUpdateSrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) GetReleaseUpdateSrcIp() bool {
	if t == nil || t.ReleaseUpdateSrcIp == nil {
		return false
	}
	return *t.ReleaseUpdateSrcIp
}

// GetSiaddrOverride retrieves the value of the leaf SiaddrOverride from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiaddrOverride is set, it can
// safely use t.GetSiaddrOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiaddrOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) GetSiaddrOverride() string {
	if t == nil || t.SiaddrOverride == nil {
		return ""
	}
	return *t.SiaddrOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseUpdateSrcIp == nil {
		var v bool = false
		t.ReleaseUpdateSrcIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp struct {
	MaskReply    *bool                                                                           `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) IsYANGGoStruct() {}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery struct {
	HostRoute                *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute                 `path:"host-route" module:"nokia-conf"`
	LearnUnsolicited         *bool                                                                                                     `path:"learn-unsolicited" module:"nokia-conf"`
	Limit                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyArp            *bool                                                                                                     `path:"local-proxy-arp" module:"nokia-conf"`
	Populate                 *bool                                                                                                     `path:"populate" module:"nokia-conf"`
	PopulateHost             *bool                                                                                                     `path:"populate-host" module:"nokia-conf"`
	ProactiveRefresh         *bool                                                                                                     `path:"proactive-refresh" module:"nokia-conf"`
	ProxyArpPolicy           []string                                                                                                  `path:"proxy-arp-policy" module:"nokia-conf"`
	RemoteProxyArp           *bool                                                                                                     `path:"remote-proxy-arp" module:"nokia-conf"`
	RetryTimer               *uint32                                                                                                   `path:"retry-timer" module:"nokia-conf"`
	RouteTag                 *uint32                                                                                                   `path:"route-tag" module:"nokia-conf"`
	StaticNeighbor           map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	StaticNeighborUnnumbered *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered  `path:"static-neighbor-unnumbered" module:"nokia-conf" yangPresence:"true"`
	Timeout                  *uint32                                                                                                   `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {
}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateHostRoute() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateStaticNeighborUnnumbered retrieves the value of the StaticNeighborUnnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighborUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	t.StaticNeighborUnnumbered = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered{}
	return t.StaticNeighborUnnumbered
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetHostRoute() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetStaticNeighborUnnumbered returns the value of the StaticNeighborUnnumbered struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver or the field StaticNeighborUnnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetStaticNeighborUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t != nil && t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetLearnUnsolicited() bool {
	if t == nil || t.LearnUnsolicited == nil {
		return false
	}
	return *t.LearnUnsolicited
}

// GetLocalProxyArp retrieves the value of the leaf LocalProxyArp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyArp is set, it can
// safely use t.GetLocalProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetLocalProxyArp() bool {
	if t == nil || t.LocalProxyArp == nil {
		return false
	}
	return *t.LocalProxyArp
}

// GetPopulate retrieves the value of the leaf Populate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Populate is set, it can
// safely use t.GetPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Populate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetPopulate() bool {
	if t == nil || t.Populate == nil {
		return false
	}
	return *t.Populate
}

// GetPopulateHost retrieves the value of the leaf PopulateHost from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHost is set, it can
// safely use t.GetPopulateHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetPopulateHost() bool {
	if t == nil || t.PopulateHost == nil {
		return false
	}
	return *t.PopulateHost
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetProactiveRefresh() bool {
	if t == nil || t.ProactiveRefresh == nil {
		return false
	}
	return *t.ProactiveRefresh
}

// GetProxyArpPolicy retrieves the value of the leaf ProxyArpPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyArpPolicy is set, it can
// safely use t.GetProxyArpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyArpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetProxyArpPolicy() []string {
	if t == nil || t.ProxyArpPolicy == nil {
		return nil
	}
	return t.ProxyArpPolicy
}

// GetRemoteProxyArp retrieves the value of the leaf RemoteProxyArp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteProxyArp is set, it can
// safely use t.GetRemoteProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetRemoteProxyArp() bool {
	if t == nil || t.RemoteProxyArp == nil {
		return false
	}
	return *t.RemoteProxyArp
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 50
	}
	return *t.RetryTimer
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnUnsolicited == nil {
		var v bool = false
		t.LearnUnsolicited = &v
	}
	if t.Populate == nil {
		var v bool = false
		t.Populate = &v
	}
	if t.PopulateHost == nil {
		var v bool = false
		t.PopulateHost = &v
	}
	if t.ProactiveRefresh == nil {
		var v bool = false
		t.ProactiveRefresh = &v
	}
	if t.RemoteProxyArp == nil {
		var v bool = false
		t.RemoteProxyArp = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 50
		t.RetryTimer = &v
	}
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	t.HostRoute.PopulateDefaults()
	t.Limit.PopulateDefaults()
	t.StaticNeighborUnnumbered.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/neighbor-discovery/host-route YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute struct {
	Populate map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) IsYANGGoStruct() {
}

// NewPopulate creates a new entry in the Populate list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) NewPopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) RenamePopulate(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) GetOrCreatePopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate {

	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) GetPopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) DeletePopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) AppendPopulate(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/neighbor-discovery/host-route/populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct {
	RouteTag  *uint32                                                                                                           `path:"route-tag" module:"nokia-conf"`
	RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetRouteType() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType_Union {
	if t == nil || t.RouteType == nil {
		return nil
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) IsYANGGoStruct() {
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	Ipv4Address *string `path:"ipv4-address" module:"nokia-conf"`
	MacAddress  *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/neighbor-discovery/static-neighbor-unnumbered YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered struct {
	MacAddress *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) IsYANGGoStruct() {
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary struct {
	Address      *string                                     `path:"address" module:"nokia-conf"`
	Broadcast    E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	PrefixLength *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp    *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/secondary YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary struct {
	Address      *string                                     `path:"address" module:"nokia-conf"`
	Broadcast    E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	IgpInhibit   *bool                                       `path:"igp-inhibit" module:"nokia-conf"`
	PrefixLength *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp    *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetIgpInhibit retrieves the value of the leaf IgpInhibit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpInhibit is set, it can
// safely use t.GetIgpInhibit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpInhibit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) GetIgpInhibit() bool {
	if t == nil || t.IgpInhibit == nil {
		return false
	}
	return *t.IgpInhibit
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	if t.IgpInhibit == nil {
		var v bool = false
		t.IgpInhibit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/unnumbered YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	IpIntName *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/vrrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp struct {
	AdminState        E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey *string                                                                                 `path:"authentication-key" module:"nokia-conf"`
	Backup            []string                                                                                `path:"backup" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness          `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay         *uint32                                                                                 `path:"init-delay" module:"nokia-conf"`
	Mac               *string                                                                                 `path:"mac" module:"nokia-conf"`
	MasterIntInherit  *bool                                                                                   `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval   *uint32                                                                                 `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup  *string                                                                                 `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply          *bool                                                                                   `path:"ntp-reply" module:"nokia-conf"`
	OperGroup         *string                                                                                 `path:"oper-group" module:"nokia-conf"`
	Owner             *bool                                                                                   `path:"owner" module:"nokia-conf"`
	Passive           *bool                                                                                   `path:"passive" module:"nokia-conf"`
	PingReply         *bool                                                                                   `path:"ping-reply" module:"nokia-conf"`
	Policy            *uint32                                                                                 `path:"policy" module:"nokia-conf"`
	Preempt           *bool                                                                                   `path:"preempt" module:"nokia-conf"`
	Priority          *uint32                                                                                 `path:"priority" module:"nokia-conf"`
	SshReply          *bool                                                                                   `path:"ssh-reply" module:"nokia-conf"`
	StandbyForwarding *bool                                                                                   `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply       *bool                                                                                   `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply   *bool                                                                                   `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId   NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 10
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetSshReply retrieves the value of the leaf SshReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshReply is set, it can
// safely use t.GetSshReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetSshReply() bool {
	if t == nil || t.SshReply == nil {
		return false
	}
	return *t.SshReply
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) GetVirtualRouterId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_VirtualRouterId_Union {
	if t == nil || t.VirtualRouterId == nil {
		return nil
	}
	return t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 10
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.SshReply == nil {
		var v bool = false
		t.SshReply = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"virtual-router-id": t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv4/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness struct {
	DestIp        *string `path:"dest-ip" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) IsYANGGoStruct() {
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 struct {
	Address                   map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address                                                                               `path:"address" module:"nokia-conf"`
	Bfd                       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd                                                                                              `path:"bfd" module:"nokia-conf"`
	Dhcp6                     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6                                                                                            `path:"dhcp6" module:"nokia-conf" yangPresence:"true"`
	DuplicateAddressDetection *bool                                                                                                                                                          `path:"duplicate-address-detection" module:"nokia-conf"`
	ForwardIpv4Packets        *bool                                                                                                                                                          `path:"forward-ipv4-packets" module:"nokia-conf"`
	Icmp6                     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6                                                                                            `path:"icmp6" module:"nokia-conf"`
	LinkLocalAddress          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress                                                                                 `path:"link-local-address" module:"nokia-conf"`
	LocalDhcpServer           *string                                                                                                                                                        `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery         *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery                                                                                `path:"neighbor-discovery" module:"nokia-conf"`
	QosRouteLookup            E_NokiaTypesRouter_QosRouteLookup                                                                                                                              `path:"qos-route-lookup" module:"nokia-conf"`
	TcpMss                    *uint32                                                                                                                                                        `path:"tcp-mss" module:"nokia-conf"`
	UrpfCheck                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck                                                                                        `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                      map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) AppendAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) NewVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp{
		VirtualRouterId: VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) RenameVrrp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) DeleteVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) AppendVrrp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) error {
	key := v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateIcmp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6{}
	return t.Icmp6
}

// GetOrCreateLinkLocalAddress retrieves the value of the LinkLocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateLinkLocalAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress {
	if t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	t.LinkLocalAddress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress{}
	return t.LinkLocalAddress
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetIcmp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetLinkLocalAddress returns the value of the LinkLocalAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver or the field LinkLocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetLinkLocalAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress {
	if t != nil && t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetForwardIpv4Packets retrieves the value of the leaf ForwardIpv4Packets from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardIpv4Packets is set, it can
// safely use t.GetForwardIpv4Packets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardIpv4Packets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetForwardIpv4Packets() bool {
	if t == nil || t.ForwardIpv4Packets == nil {
		return false
	}
	return *t.ForwardIpv4Packets
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.ForwardIpv4Packets == nil {
		var v bool = false
		t.ForwardIpv4Packets = &v
	}
	t.Bfd.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.LinkLocalAddress.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address struct {
	DuplicateAddressDetection *bool   `path:"duplicate-address-detection" module:"nokia-conf"`
	Eui_64                    *bool   `path:"eui-64" module:"nokia-conf"`
	Ipv6Address               *string `path:"ipv6-address" module:"nokia-conf"`
	PrefixLength              *uint32 `path:"prefix-length" module:"nokia-conf"`
	PrimaryPreference         *uint32 `path:"primary-preference" module:"nokia-conf"`
	TrackSrrp                 *uint32 `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) IsYANGGoStruct() {}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetEui_64 retrieves the value of the leaf Eui_64 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eui_64 is set, it can
// safely use t.GetEui_64() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eui_64 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) GetEui_64() bool {
	if t == nil || t.Eui_64 == nil {
		return false
	}
	return *t.Eui_64
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetPrimaryPreference retrieves the value of the leaf PrimaryPreference from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryPreference is set, it can
// safely use t.GetPrimaryPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) GetPrimaryPreference() uint32 {
	if t == nil || t.PrimaryPreference == nil {
		return 0
	}
	return *t.PrimaryPreference
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.Eui_64 == nil {
		var v bool = false
		t.Eui_64 = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                                 `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                                 `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                                 `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                                 `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6 represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6 struct {
	Relay  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay  `path:"relay" module:"nokia-conf" yangPresence:"true"`
	Server *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server `path:"server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) IsYANGGoStruct() {}

// GetOrCreateRelay retrieves the value of the Relay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) GetOrCreateRelay() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay {
	if t.Relay != nil {
		return t.Relay
	}
	t.Relay = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay{}
	return t.Relay
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server{}
	return t.Server
}

// GetRelay returns the value of the Relay struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6. If the receiver or the field Relay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) GetRelay() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay {
	if t != nil && t.Relay != nil {
		return t.Relay
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) GetServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Relay.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/relay YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay struct {
	AdminState         E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	Description        *string                                                                                 `path:"description" module:"nokia-conf"`
	LeasePopulate      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	LinkAddress        *string                                                                                 `path:"link-address" module:"nokia-conf"`
	NeighborResolution *bool                                                                                   `path:"neighbor-resolution" module:"nokia-conf"`
	Option             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option        `path:"option" module:"nokia-conf" yangPresence:"true"`
	PythonPolicy       *string                                                                                 `path:"python-policy" module:"nokia-conf"`
	Server             []string                                                                                `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                                 `path:"source-address" module:"nokia-conf"`
	UserDb             *string                                                                                 `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetOrCreateLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetOrCreateOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option{}
	return t.Option
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetNeighborResolution retrieves the value of the leaf NeighborResolution from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborResolution is set, it can
// safely use t.GetNeighborResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborResolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetNeighborResolution() bool {
	if t == nil || t.NeighborResolution == nil {
		return false
	}
	return *t.NeighborResolution
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NeighborResolution == nil {
		var v bool = false
		t.NeighborResolution = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/relay/lease-populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate struct {
	MaxNbrOfLeases *int32                                                                                                `path:"max-nbr-of-leases" module:"nokia-conf"`
	RoutePopulate  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate `path:"route-populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) IsYANGGoStruct() {
}

// GetOrCreateRoutePopulate retrieves the value of the RoutePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetOrCreateRoutePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate {
	if t.RoutePopulate != nil {
		return t.RoutePopulate
	}
	t.RoutePopulate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate{}
	return t.RoutePopulate
}

// GetRoutePopulate returns the value of the RoutePopulate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate. If the receiver or the field RoutePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetRoutePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate {
	if t != nil && t.RoutePopulate != nil {
		return t.RoutePopulate
	}
	return nil
}

// GetMaxNbrOfLeases retrieves the value of the leaf MaxNbrOfLeases from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxNbrOfLeases is set, it can
// safely use t.GetMaxNbrOfLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxNbrOfLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetMaxNbrOfLeases() int32 {
	if t == nil || t.MaxNbrOfLeases == nil {
		return 0
	}
	return *t.MaxNbrOfLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxNbrOfLeases == nil {
		var v int32 = 0
		t.MaxNbrOfLeases = &v
	}
	t.RoutePopulate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/relay/lease-populate/route-populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate struct {
	Na *bool                                                                                                    `path:"na" module:"nokia-conf"`
	Pd *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd `path:"pd" module:"nokia-conf" yangPresence:"true"`
	Ta *bool                                                                                                    `path:"ta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) IsYANGGoStruct() {
}

// GetOrCreatePd retrieves the value of the Pd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetOrCreatePd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd {
	if t.Pd != nil {
		return t.Pd
	}
	t.Pd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd{}
	return t.Pd
}

// GetPd returns the value of the Pd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate. If the receiver or the field Pd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetPd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd {
	if t != nil && t.Pd != nil {
		return t.Pd
	}
	return nil
}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetNa() bool {
	if t == nil || t.Na == nil {
		return false
	}
	return *t.Na
}

// GetTa retrieves the value of the leaf Ta from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ta is set, it can
// safely use t.GetTa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetTa() bool {
	if t == nil || t.Ta == nil {
		return false
	}
	return *t.Ta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = false
		t.Na = &v
	}
	if t.Ta == nil {
		var v bool = false
		t.Ta = &v
	}
	t.Pd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/relay/lease-populate/route-populate/pd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd struct {
	Exclude *bool `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) IsYANGGoStruct() {
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/relay/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option struct {
	InterfaceId *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId `path:"interface-id" module:"nokia-conf"`
	RemoteId    *bool                                                                                        `path:"remote-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) IsYANGGoStruct() {
}

// GetOrCreateInterfaceId retrieves the value of the InterfaceId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetOrCreateInterfaceId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId {
	if t.InterfaceId != nil {
		return t.InterfaceId
	}
	t.InterfaceId = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId{}
	return t.InterfaceId
}

// GetInterfaceId returns the value of the InterfaceId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option. If the receiver or the field InterfaceId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetInterfaceId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId {
	if t != nil && t.InterfaceId != nil {
		return t.InterfaceId
	}
	return nil
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	t.InterfaceId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/relay/option/interface-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId struct {
	AsciiTuple YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	IfIndex    YANGEmpty `path:"if-index" module:"nokia-conf"`
	SapId      YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String     *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfIndex retrieves the value of the leaf IfIndex from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IfIndex is set, it can
// safely use t.GetIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetIfIndex() YANGEmpty {
	if t == nil || t.IfIndex == false {
		return false
	}
	return t.IfIndex
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server struct {
	MaxNbrOfLeases   *int32                                                                                      `path:"max-nbr-of-leases" module:"nokia-conf"`
	PrefixDelegation *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation `path:"prefix-delegation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) IsYANGGoStruct() {}

// GetOrCreatePrefixDelegation retrieves the value of the PrefixDelegation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetOrCreatePrefixDelegation() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation {
	if t.PrefixDelegation != nil {
		return t.PrefixDelegation
	}
	t.PrefixDelegation = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation{}
	return t.PrefixDelegation
}

// GetPrefixDelegation returns the value of the PrefixDelegation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server. If the receiver or the field PrefixDelegation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetPrefixDelegation() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation {
	if t != nil && t.PrefixDelegation != nil {
		return t.PrefixDelegation
	}
	return nil
}

// GetMaxNbrOfLeases retrieves the value of the leaf MaxNbrOfLeases from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxNbrOfLeases is set, it can
// safely use t.GetMaxNbrOfLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxNbrOfLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetMaxNbrOfLeases() int32 {
	if t == nil || t.MaxNbrOfLeases == nil {
		return 8000
	}
	return *t.MaxNbrOfLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxNbrOfLeases == nil {
		var v int32 = 8000
		t.MaxNbrOfLeases = &v
	}
	t.PrefixDelegation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/server/prefix-delegation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                   `path:"admin-state" module:"nokia-conf"`
	Prefix     map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) IsYANGGoStruct() {
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/server/prefix-delegation/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct {
	ClientId          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId               `path:"client-id" module:"nokia-conf"`
	Ipv6Prefix        *string                                                                                                                   `path:"ipv6-prefix" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) IsYANGGoStruct() {
}

// GetOrCreateClientId retrieves the value of the ClientId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetOrCreateClientId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId {
	if t.ClientId != nil {
		return t.ClientId
	}
	t.ClientId = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId{}
	return t.ClientId
}

// GetClientId returns the value of the ClientId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix. If the receiver or the field ClientId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetClientId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId {
	if t != nil && t.ClientId != nil {
		return t.ClientId
	}
	return nil
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetValidLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
	t.ClientId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/dhcp6/server/prefix-delegation/prefix/client-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId struct {
	Duid *string `path:"duid" module:"nokia-conf"`
	Iaid *uint32 `path:"iaid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) IsYANGGoStruct() {
}

// GetDuid retrieves the value of the leaf Duid from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duid is set, it can
// safely use t.GetDuid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) GetDuid() string {
	if t == nil || t.Duid == nil {
		return ""
	}
	return *t.Duid
}

// GetIaid retrieves the value of the leaf Iaid from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iaid is set, it can
// safely use t.GetIaid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iaid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) GetIaid() uint32 {
	if t == nil || t.Iaid == nil {
		return 0
	}
	return *t.Iaid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6 represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/icmp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6 struct {
	PacketTooBig *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects    `path:"redirects" module:"nokia-conf"`
	TimeExceeded *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded `path:"time-exceeded" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreatePacketTooBig() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig{}
	return t.PacketTooBig
}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateParamProblem() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateRedirects() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects{}
	return t.Redirects
}

// GetOrCreateTimeExceeded retrieves the value of the TimeExceeded field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateTimeExceeded() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded {
	if t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	t.TimeExceeded = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded{}
	return t.TimeExceeded
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateUnreachables() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables{}
	return t.Unreachables
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetPacketTooBig() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetParamProblem() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetRedirects() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTimeExceeded returns the value of the TimeExceeded struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field TimeExceeded is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetTimeExceeded() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded {
	if t != nil && t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) GetUnreachables() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TimeExceeded.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/icmp6/packet-too-big YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/icmp6/param-problem YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/icmp6/redirects YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/icmp6/time-exceeded YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/icmp6/unreachables YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/link-local-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress struct {
	Address                   *string `path:"address" module:"nokia-conf"`
	DuplicateAddressDetection *bool   `path:"duplicate-address-detection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_LinkLocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery struct {
	HostRoute        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute                 `path:"host-route" module:"nokia-conf"`
	LearnUnsolicited E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                               `path:"learn-unsolicited" module:"nokia-conf"`
	Limit            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyNd     *bool                                                                                                     `path:"local-proxy-nd" module:"nokia-conf"`
	PopulateHost     *bool                                                                                                     `path:"populate-host" module:"nokia-conf"`
	ProactiveRefresh E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                               `path:"proactive-refresh" module:"nokia-conf"`
	ProxyNdPolicy    []string                                                                                                  `path:"proxy-nd-policy" module:"nokia-conf"`
	ReachableTime    *uint32                                                                                                   `path:"reachable-time" module:"nokia-conf"`
	RouteTag         *uint32                                                                                                   `path:"route-tag" module:"nokia-conf"`
	SecureNd         *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd                  `path:"secure-nd" module:"nokia-conf"`
	StaleTime        *uint32                                                                                                   `path:"stale-time" module:"nokia-conf"`
	StaticNeighbor   map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {
}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) NewStaticNeighbor(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	key := Ipv6Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) DeleteStaticNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateHostRoute() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateSecureNd retrieves the value of the SecureNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateSecureNd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t.SecureNd != nil {
		return t.SecureNd
	}
	t.SecureNd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd{}
	return t.SecureNd
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetHostRoute() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetSecureNd returns the value of the SecureNd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver or the field SecureNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetSecureNd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t != nil && t.SecureNd != nil {
		return t.SecureNd
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetLearnUnsolicited() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.LearnUnsolicited == 0 {
		return 0
	}
	return t.LearnUnsolicited
}

// GetLocalProxyNd retrieves the value of the leaf LocalProxyNd from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyNd is set, it can
// safely use t.GetLocalProxyNd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyNd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetLocalProxyNd() bool {
	if t == nil || t.LocalProxyNd == nil {
		return false
	}
	return *t.LocalProxyNd
}

// GetPopulateHost retrieves the value of the leaf PopulateHost from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHost is set, it can
// safely use t.GetPopulateHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetPopulateHost() bool {
	if t == nil || t.PopulateHost == nil {
		return false
	}
	return *t.PopulateHost
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetProactiveRefresh() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.ProactiveRefresh == 0 {
		return 0
	}
	return t.ProactiveRefresh
}

// GetProxyNdPolicy retrieves the value of the leaf ProxyNdPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyNdPolicy is set, it can
// safely use t.GetProxyNdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyNdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetProxyNdPolicy() []string {
	if t == nil || t.ProxyNdPolicy == nil {
		return nil
	}
	return t.ProxyNdPolicy
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 0
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LocalProxyNd == nil {
		var v bool = false
		t.LocalProxyNd = &v
	}
	if t.PopulateHost == nil {
		var v bool = false
		t.PopulateHost = &v
	}
	t.HostRoute.PopulateDefaults()
	t.Limit.PopulateDefaults()
	t.SecureNd.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/neighbor-discovery/host-route YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute struct {
	Populate map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) IsYANGGoStruct() {
}

// NewPopulate creates a new entry in the Populate list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) NewPopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) RenamePopulate(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) GetOrCreatePopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate {

	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) GetPopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) DeletePopulate(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) AppendPopulate(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/neighbor-discovery/host-route/populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct {
	RouteTag  *uint32                                                                                                           `path:"route-tag" module:"nokia-conf"`
	RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteType() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType_Union {
	if t == nil || t.RouteType == nil {
		return nil
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) IsYANGGoStruct() {
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/neighbor-discovery/secure-nd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AllowUnsecuredMsgs *bool                       `path:"allow-unsecured-msgs" module:"nokia-conf"`
	PublicKeyMinBits   *uint32                     `path:"public-key-min-bits" module:"nokia-conf"`
	SecurityParameter  *uint32                     `path:"security-parameter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecuredMsgs retrieves the value of the leaf AllowUnsecuredMsgs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecuredMsgs is set, it can
// safely use t.GetAllowUnsecuredMsgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecuredMsgs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAllowUnsecuredMsgs() bool {
	if t == nil || t.AllowUnsecuredMsgs == nil {
		return true
	}
	return *t.AllowUnsecuredMsgs
}

// GetPublicKeyMinBits retrieves the value of the leaf PublicKeyMinBits from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicKeyMinBits is set, it can
// safely use t.GetPublicKeyMinBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicKeyMinBits == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetPublicKeyMinBits() uint32 {
	if t == nil || t.PublicKeyMinBits == nil {
		return 1024
	}
	return *t.PublicKeyMinBits
}

// GetSecurityParameter retrieves the value of the leaf SecurityParameter from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityParameter is set, it can
// safely use t.GetSecurityParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetSecurityParameter() uint32 {
	if t == nil || t.SecurityParameter == nil {
		return 1
	}
	return *t.SecurityParameter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowUnsecuredMsgs == nil {
		var v bool = true
		t.AllowUnsecuredMsgs = &v
	}
	if t.PublicKeyMinBits == nil {
		var v uint32 = 1024
		t.PublicKeyMinBits = &v
	}
	if t.SecurityParameter == nil {
		var v uint32 = 1
		t.SecurityParameter = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct {
	Ipv6Address *string `path:"ipv6-address" module:"nokia-conf"`
	MacAddress  *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/urpf-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/vrrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp struct {
	AdminState        E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	Backup            []string                                                                                `path:"backup" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness          `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay         *uint32                                                                                 `path:"init-delay" module:"nokia-conf"`
	Mac               *string                                                                                 `path:"mac" module:"nokia-conf"`
	MasterIntInherit  *bool                                                                                   `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval   *uint32                                                                                 `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup  *string                                                                                 `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply          *bool                                                                                   `path:"ntp-reply" module:"nokia-conf"`
	OperGroup         *string                                                                                 `path:"oper-group" module:"nokia-conf"`
	Owner             *bool                                                                                   `path:"owner" module:"nokia-conf"`
	Passive           *bool                                                                                   `path:"passive" module:"nokia-conf"`
	PingReply         *bool                                                                                   `path:"ping-reply" module:"nokia-conf"`
	Policy            *uint32                                                                                 `path:"policy" module:"nokia-conf"`
	Preempt           *bool                                                                                   `path:"preempt" module:"nokia-conf"`
	Priority          *uint32                                                                                 `path:"priority" module:"nokia-conf"`
	StandbyForwarding *bool                                                                                   `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply       *bool                                                                                   `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply   *bool                                                                                   `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId   NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 100
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) GetVirtualRouterId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_VirtualRouterId_Union {
	if t == nil || t.VirtualRouterId == nil {
		return nil
	}
	return t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 100
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"virtual-router-id": t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/interface/ipv6/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness struct {
	DestIp        *string `path:"dest-ip" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) IsYANGGoStruct() {
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing represents the /nokia-conf/configure/groups/group/service/vprn/interface/load-balancing YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing struct {
	FlowLabelLoadBalancing *bool                              `path:"flow-label-load-balancing" module:"nokia-conf"`
	IpLoadBalancing        E_NokiaTypesRouter_IpLoadBalancing `path:"ip-load-balancing" module:"nokia-conf"`
	SpiLoadBalancing       *bool                              `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing      *bool                              `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) IsYANGGoStruct() {}

// GetFlowLabelLoadBalancing retrieves the value of the leaf FlowLabelLoadBalancing from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabelLoadBalancing is set, it can
// safely use t.GetFlowLabelLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabelLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) GetFlowLabelLoadBalancing() bool {
	if t == nil || t.FlowLabelLoadBalancing == nil {
		return false
	}
	return *t.FlowLabelLoadBalancing
}

// GetIpLoadBalancing retrieves the value of the leaf IpLoadBalancing from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpLoadBalancing is set, it can
// safely use t.GetIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) GetIpLoadBalancing() E_NokiaTypesRouter_IpLoadBalancing {
	if t == nil || t.IpLoadBalancing == 0 {
		return NokiaTypesRouter_IpLoadBalancing_both
	}
	return t.IpLoadBalancing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowLabelLoadBalancing == nil {
		var v bool = false
		t.FlowLabelLoadBalancing = &v
	}
	if t.IpLoadBalancing == 0 {
		t.IpLoadBalancing = NokiaTypesRouter_IpLoadBalancing_both
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate represents the /nokia-conf/configure/groups/group/service/vprn/interface/ping-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	DestinationAddress *string                     `path:"destination-address" module:"nokia-conf"`
	Name               *string                     `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PingTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist represents the /nokia-conf/configure/groups/group/service/vprn/interface/ptp-hw-assist YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_PtpHwAssist) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct {
	Aarp              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp                    `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy  *uint32                                                                              `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	AntiSpoof         E_NokiaTypesServices_AntiSpoofOption                                                 `path:"anti-spoof" module:"nokia-conf"`
	AppProfile        *string                                                                              `path:"app-profile" module:"nokia-conf"`
	Bandwidth         *uint64                                                                              `path:"bandwidth" module:"nokia-conf"`
	CallingStationId  *string                                                                              `path:"calling-station-id" module:"nokia-conf"`
	CollectStats      *bool                                                                                `path:"collect-stats" module:"nokia-conf"`
	CpuProtection     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection           `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                                              `path:"description" module:"nokia-conf"`
	DistCpuProtection *string                                                                              `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress                  `path:"egress" module:"nokia-conf"`
	EthCfm            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm                  `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	FwdWholesale      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale            `path:"fwd-wholesale" module:"nokia-conf"`
	HostAdminState    E_NokiaTypesSros_AdminState                                                          `path:"host-admin-state" module:"nokia-conf"`
	HostLockoutPolicy *string                                                                              `path:"host-lockout-policy" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress                 `path:"ingress" module:"nokia-conf"`
	IpTunnel          map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel     `path:"ip-tunnel" module:"nokia-conf"`
	IpsecGateway      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway `path:"ipsec-gateway" module:"nokia-conf"`
	IpsecTunnel       map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel  `path:"ipsec-tunnel" module:"nokia-conf"`
	Lag               *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag                     `path:"lag" module:"nokia-conf"`
	MultiServiceSite  *string                                                                              `path:"multi-service-site" module:"nokia-conf"`
	SapId             *string                                                                              `path:"sap-id" module:"nokia-conf"`
	StaticHost        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost              `path:"static-host" module:"nokia-conf"`
	TransitPolicy     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy           `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) IsYANGGoStruct() {}

// NewIpTunnel creates a new entry in the IpTunnel list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) NewIpTunnel(TunnelName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpTunnel == nil {
		t.IpTunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpTunnel", key)
	}

	t.IpTunnel[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel{
		TunnelName: &TunnelName,
	}

	return t.IpTunnel[key], nil
}

// RenameIpTunnel renames an entry in the list IpTunnel within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) RenameIpTunnel(oldK, newK string) error {
	if _, ok := t.IpTunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in IpTunnel", newK)
	}

	e, ok := t.IpTunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpTunnel", oldK)
	}
	e.TunnelName = &newK

	t.IpTunnel[newK] = e
	delete(t.IpTunnel, oldK)
	return nil
}

// GetOrCreateIpTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateIpTunnel(TunnelName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel {

	key := TunnelName

	if v, ok := t.IpTunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpTunnel(TunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpTunnel got unexpected error: %v", err))
	}
	return v
}

// GetIpTunnel retrieves the value with the specified key from
// the IpTunnel map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetIpTunnel(TunnelName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel {

	if t == nil {
		return nil
	}

	key := TunnelName

	if lm, ok := t.IpTunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) DeleteIpTunnel(TunnelName string) {
	key := TunnelName

	delete(t.IpTunnel, key)
}

// AppendIpTunnel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel struct to the
// list IpTunnel of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) AppendIpTunnel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) error {
	if v.TunnelName == nil {
		return fmt.Errorf("invalid nil key received for TunnelName")
	}

	key := *v.TunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpTunnel == nil {
		t.IpTunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel)
	}

	if _, ok := t.IpTunnel[key]; ok {
		return fmt.Errorf("duplicate key for list IpTunnel %v", key)
	}

	t.IpTunnel[key] = v
	return nil
}

// NewIpsecGateway creates a new entry in the IpsecGateway list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) NewIpsecGateway(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecGateway == nil {
		t.IpsecGateway = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecGateway[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecGateway", key)
	}

	t.IpsecGateway[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway{
		Name: &Name,
	}

	return t.IpsecGateway[key], nil
}

// RenameIpsecGateway renames an entry in the list IpsecGateway within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) RenameIpsecGateway(oldK, newK string) error {
	if _, ok := t.IpsecGateway[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecGateway", newK)
	}

	e, ok := t.IpsecGateway[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecGateway", oldK)
	}
	e.Name = &newK

	t.IpsecGateway[newK] = e
	delete(t.IpsecGateway, oldK)
	return nil
}

// GetOrCreateIpsecGateway retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateIpsecGateway(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway {

	key := Name

	if v, ok := t.IpsecGateway[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecGateway(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecGateway got unexpected error: %v", err))
	}
	return v
}

// GetIpsecGateway retrieves the value with the specified key from
// the IpsecGateway map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetIpsecGateway(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpsecGateway[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecGateway deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) DeleteIpsecGateway(Name string) {
	key := Name

	delete(t.IpsecGateway, key)
}

// AppendIpsecGateway appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway struct to the
// list IpsecGateway of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) AppendIpsecGateway(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecGateway == nil {
		t.IpsecGateway = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway)
	}

	if _, ok := t.IpsecGateway[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecGateway %v", key)
	}

	t.IpsecGateway[key] = v
	return nil
}

// NewIpsecTunnel creates a new entry in the IpsecTunnel list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) NewIpsecTunnel(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTunnel == nil {
		t.IpsecTunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecTunnel", key)
	}

	t.IpsecTunnel[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel{
		Name: &Name,
	}

	return t.IpsecTunnel[key], nil
}

// RenameIpsecTunnel renames an entry in the list IpsecTunnel within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) RenameIpsecTunnel(oldK, newK string) error {
	if _, ok := t.IpsecTunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecTunnel", newK)
	}

	e, ok := t.IpsecTunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecTunnel", oldK)
	}
	e.Name = &newK

	t.IpsecTunnel[newK] = e
	delete(t.IpsecTunnel, oldK)
	return nil
}

// GetOrCreateIpsecTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateIpsecTunnel(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel {

	key := Name

	if v, ok := t.IpsecTunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecTunnel(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecTunnel got unexpected error: %v", err))
	}
	return v
}

// GetIpsecTunnel retrieves the value with the specified key from
// the IpsecTunnel map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetIpsecTunnel(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpsecTunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) DeleteIpsecTunnel(Name string) {
	key := Name

	delete(t.IpsecTunnel, key)
}

// AppendIpsecTunnel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel struct to the
// list IpsecTunnel of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) AppendIpsecTunnel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTunnel == nil {
		t.IpsecTunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel)
	}

	if _, ok := t.IpsecTunnel[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecTunnel %v", key)
	}

	t.IpsecTunnel[key] = v
	return nil
}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateAarp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp{}
	return t.Aarp
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateLag() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag{}
	return t.Lag
}

// GetOrCreateStaticHost retrieves the value of the StaticHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateStaticHost() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost {
	if t.StaticHost != nil {
		return t.StaticHost
	}
	t.StaticHost = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost{}
	return t.StaticHost
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetAarp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetFwdWholesale() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetLag() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetStaticHost returns the value of the StaticHost struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field StaticHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetStaticHost() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost {
	if t != nil && t.StaticHost != nil {
		return t.StaticHost
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetAntiSpoof() E_NokiaTypesServices_AntiSpoofOption {
	if t == nil || t.AntiSpoof == 0 {
		return 0
	}
	return t.AntiSpoof
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetCallingStationId() string {
	if t == nil || t.CallingStationId == nil {
		return ""
	}
	return *t.CallingStationId
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHostAdminState retrieves the value of the leaf HostAdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostAdminState is set, it can
// safely use t.GetHostAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetHostAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.HostAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.HostAdminState
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HostAdminState == 0 {
		t.HostAdminState = NokiaTypesSros_AdminState_enable
	}
	t.Aarp.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.StaticHost.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
	for _, e := range t.IpTunnel {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecGateway {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecTunnel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                                   `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                                   `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                                     `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress struct {
	AggRate                *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter  `path:"filter" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
	QueueGroupRedirectList *string                                                                     `path:"queue-group-redirect-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetAggRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetQueueGroupRedirectList retrieves the value of the leaf QueueGroupRedirectList from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupRedirectList is set, it can
// safely use t.GetQueueGroupRedirectList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupRedirectList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) GetQueueGroupRedirectList() string {
	if t == nil || t.QueueGroupRedirectList == nil {
		return ""
	}
	return *t.QueueGroupRedirectList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate struct {
	Cir                       NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth      *bool                                                                                `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                                `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64                                                                               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos struct {
	EgressRemarkPolicy   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy   `path:"egress-remark-policy" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                                        `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
	VlanQosPolicy        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy        `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.EgressRemarkPolicy.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                                `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                                   `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                                             `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                                                                                                                                                        `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues                                                                                                                        `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue           `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	GroupId       NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union `path:"group-id" module:"nokia-conf"`
	HsClassWeight *int32                                                                                                              `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate   *float64                                                                                                            `path:"percent-rate" module:"nokia-conf"`
	Rate          NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                                                                                                                                                                       `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                                                                                                                                                                      `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                                                                                                      `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	Mbs         NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union     `path:"mbs" module:"nokia-conf"`
	QueueId     NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union    `path:"rate" module:"nokia-conf"`
	SlopePolicy *string                                                                                                                    `path:"slope-policy" module:"nokia-conf"`
	WrrWeight   *int32                                                                                                                     `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                             `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_EgressPolicerStatMode                                                                              `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AvgFrameOverhead  *float64                                                                                                            `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit        NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight     *int32                                                                                                              `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight       *int32                                                                                                              `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                               `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                            `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm struct {
	CollectLmmFcStats    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats                                                                  `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                                                  `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                                               `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key struct {
	MdAdminName string                                                                             `path:"md-admin-name"`
	MaAdminName string                                                                             `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                                     `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                                     `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                                    `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                                   `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                                   `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                                   `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                                    `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                                   `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                                   `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                                   `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                                     `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {
}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                                `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {
}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {
}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) IsYANGGoStruct() {}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress struct {
	AggregatePolicer       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer `path:"aggregate-policer" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter           `path:"filter" module:"nokia-conf"`
	IpFilterPair           *bool                                                                                 `path:"ip-filter-pair" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos              `path:"qos" module:"nokia-conf"`
	QueueGroupRedirectList *string                                                                               `path:"queue-group-redirect-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateAggregatePolicer retrieves the value of the AggregatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetOrCreateAggregatePolicer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer {
	if t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	t.AggregatePolicer = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer{}
	return t.AggregatePolicer
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetAggregatePolicer returns the value of the AggregatePolicer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress. If the receiver or the field AggregatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetAggregatePolicer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer {
	if t != nil && t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// GetQueueGroupRedirectList retrieves the value of the leaf QueueGroupRedirectList from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupRedirectList is set, it can
// safely use t.GetQueueGroupRedirectList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupRedirectList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) GetQueueGroupRedirectList() string {
	if t == nil || t.QueueGroupRedirectList == nil {
		return ""
	}
	return *t.QueueGroupRedirectList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.AggregatePolicer.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/aggregate-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer struct {
	Burst NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Burst_Union `path:"burst" module:"nokia-conf"`
	Cbs   NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cbs_Union   `path:"cbs" module:"nokia-conf"`
	Cir   NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cir_Union   `path:"cir" module:"nokia-conf"`
	Rate  NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Rate_Union  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) IsYANGGoStruct() {
}

// GetBurst retrieves the value of the leaf Burst from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Burst is set, it can
// safely use t.GetBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Burst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetBurst() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Burst_Union {
	if t == nil || t.Burst == nil {
		return NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	return t.Burst
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetRate() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_AggrPolicerRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Burst == nil {
		t.Burst = NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_AggrPolicerRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                                 `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                                    `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                                             `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                                         `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {
}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria                                                                                                                       `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria                                                                                                                     `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                               `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                               `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                                 `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                             `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	BackupRemoteIpAddress     *string                                                                                       `path:"backup-remote-ip-address" module:"nokia-conf"`
	ClearDfBit                *bool                                                                                         `path:"clear-df-bit" module:"nokia-conf"`
	DeliveryService           *string                                                                                       `path:"delivery-service" module:"nokia-conf"`
	Description               *string                                                                                       `path:"description" module:"nokia-conf"`
	DestIp                    map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp       `path:"dest-ip" module:"nokia-conf"`
	Dscp                      E_NokiaTypesQos_DscpName                                                                      `path:"dscp" module:"nokia-conf"`
	EncapsulatedIpMtu         *uint32                                                                                       `path:"encapsulated-ip-mtu" module:"nokia-conf"`
	GreHeader                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader               `path:"gre-header" module:"nokia-conf"`
	IcmpGeneration            *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration          `path:"icmp-generation" module:"nokia-conf"`
	Icmp6Generation           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation         `path:"icmp6-generation" module:"nokia-conf"`
	IpMtu                     *uint32                                                                                       `path:"ip-mtu" module:"nokia-conf"`
	IpsecTransportModeProfile *string                                                                                       `path:"ipsec-transport-mode-profile" module:"nokia-conf"`
	LocalIpAddress            *string                                                                                       `path:"local-ip-address" module:"nokia-conf"`
	PmtuDiscoveryAging        *uint32                                                                                       `path:"pmtu-discovery-aging" module:"nokia-conf"`
	PrivateTcpMssAdjust       *int32                                                                                        `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PropagatePmtuV4           *bool                                                                                         `path:"propagate-pmtu-v4" module:"nokia-conf"`
	PropagatePmtuV6           *bool                                                                                         `path:"propagate-pmtu-v6" module:"nokia-conf"`
	PublicTcpMssAdjust        NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_PublicTcpMssAdjust_Union `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	Reassembly                NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Reassembly_Union         `path:"reassembly" module:"nokia-conf"`
	RemoteIpAddress           *string                                                                                       `path:"remote-ip-address" module:"nokia-conf"`
	TunnelName                *string                                                                                       `path:"tunnel-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) IsYANGGoStruct() {}

// NewDestIp creates a new entry in the DestIp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) NewDestIp(DestIpAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp)
	}

	key := DestIpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestIp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestIp", key)
	}

	t.DestIp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp{
		DestIpAddress: &DestIpAddress,
	}

	return t.DestIp[key], nil
}

// RenameDestIp renames an entry in the list DestIp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) RenameDestIp(oldK, newK string) error {
	if _, ok := t.DestIp[newK]; ok {
		return fmt.Errorf("key %v already exists in DestIp", newK)
	}

	e, ok := t.DestIp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestIp", oldK)
	}
	e.DestIpAddress = &newK

	t.DestIp[newK] = e
	delete(t.DestIp, oldK)
	return nil
}

// GetOrCreateDestIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateDestIp(DestIpAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp {

	key := DestIpAddress

	if v, ok := t.DestIp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestIp(DestIpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestIp got unexpected error: %v", err))
	}
	return v
}

// GetDestIp retrieves the value with the specified key from
// the DestIp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetDestIp(DestIpAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp {

	if t == nil {
		return nil
	}

	key := DestIpAddress

	if lm, ok := t.DestIp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) DeleteDestIp(DestIpAddress string) {
	key := DestIpAddress

	delete(t.DestIp, key)
}

// AppendDestIp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp struct to the
// list DestIp of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) AppendDestIp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) error {
	if v.DestIpAddress == nil {
		return fmt.Errorf("invalid nil key received for DestIpAddress")
	}

	key := *v.DestIpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp)
	}

	if _, ok := t.DestIp[key]; ok {
		return fmt.Errorf("duplicate key for list DestIp %v", key)
	}

	t.DestIp[key] = v
	return nil
}

// GetOrCreateGreHeader retrieves the value of the GreHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateGreHeader() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader {
	if t.GreHeader != nil {
		return t.GreHeader
	}
	t.GreHeader = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader{}
	return t.GreHeader
}

// GetOrCreateIcmpGeneration retrieves the value of the IcmpGeneration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateIcmpGeneration() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration {
	if t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	t.IcmpGeneration = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration{}
	return t.IcmpGeneration
}

// GetOrCreateIcmp6Generation retrieves the value of the Icmp6Generation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateIcmp6Generation() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation {
	if t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	t.Icmp6Generation = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation{}
	return t.Icmp6Generation
}

// GetGreHeader returns the value of the GreHeader struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If the receiver or the field GreHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetGreHeader() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader {
	if t != nil && t.GreHeader != nil {
		return t.GreHeader
	}
	return nil
}

// GetIcmpGeneration returns the value of the IcmpGeneration struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If the receiver or the field IcmpGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetIcmpGeneration() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration {
	if t != nil && t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	return nil
}

// GetIcmp6Generation returns the value of the Icmp6Generation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel. If the receiver or the field Icmp6Generation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetIcmp6Generation() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation {
	if t != nil && t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBackupRemoteIpAddress retrieves the value of the leaf BackupRemoteIpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupRemoteIpAddress is set, it can
// safely use t.GetBackupRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupRemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetBackupRemoteIpAddress() string {
	if t == nil || t.BackupRemoteIpAddress == nil {
		return ""
	}
	return *t.BackupRemoteIpAddress
}

// GetClearDfBit retrieves the value of the leaf ClearDfBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearDfBit is set, it can
// safely use t.GetClearDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetClearDfBit() bool {
	if t == nil || t.ClearDfBit == nil {
		return false
	}
	return *t.ClearDfBit
}

// GetDeliveryService retrieves the value of the leaf DeliveryService from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryService is set, it can
// safely use t.GetDeliveryService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetDeliveryService() string {
	if t == nil || t.DeliveryService == nil {
		return ""
	}
	return *t.DeliveryService
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetEncapsulatedIpMtu retrieves the value of the leaf EncapsulatedIpMtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulatedIpMtu is set, it can
// safely use t.GetEncapsulatedIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulatedIpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetEncapsulatedIpMtu() uint32 {
	if t == nil || t.EncapsulatedIpMtu == nil {
		return 0
	}
	return *t.EncapsulatedIpMtu
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetIpsecTransportModeProfile retrieves the value of the leaf IpsecTransportModeProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransportModeProfile is set, it can
// safely use t.GetIpsecTransportModeProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransportModeProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetIpsecTransportModeProfile() string {
	if t == nil || t.IpsecTransportModeProfile == nil {
		return ""
	}
	return *t.IpsecTransportModeProfile
}

// GetLocalIpAddress retrieves the value of the leaf LocalIpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpAddress is set, it can
// safely use t.GetLocalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetLocalIpAddress() string {
	if t == nil || t.LocalIpAddress == nil {
		return ""
	}
	return *t.LocalIpAddress
}

// GetPmtuDiscoveryAging retrieves the value of the leaf PmtuDiscoveryAging from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtuDiscoveryAging is set, it can
// safely use t.GetPmtuDiscoveryAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtuDiscoveryAging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetPmtuDiscoveryAging() uint32 {
	if t == nil || t.PmtuDiscoveryAging == nil {
		return 900
	}
	return *t.PmtuDiscoveryAging
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPropagatePmtuV4 retrieves the value of the leaf PropagatePmtuV4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV4 is set, it can
// safely use t.GetPropagatePmtuV4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetPropagatePmtuV4() bool {
	if t == nil || t.PropagatePmtuV4 == nil {
		return false
	}
	return *t.PropagatePmtuV4
}

// GetPropagatePmtuV6 retrieves the value of the leaf PropagatePmtuV6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV6 is set, it can
// safely use t.GetPropagatePmtuV6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetPropagatePmtuV6() bool {
	if t == nil || t.PropagatePmtuV6 == nil {
		return false
	}
	return *t.PropagatePmtuV6
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetPublicTcpMssAdjust() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetReassembly retrieves the value of the leaf Reassembly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassembly is set, it can
// safely use t.GetReassembly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassembly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetReassembly() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Reassembly_Union {
	if t == nil || t.Reassembly == nil {
		return nil
	}
	return t.Reassembly
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// GetTunnelName retrieves the value of the leaf TunnelName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelName is set, it can
// safely use t.GetTunnelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) GetTunnelName() string {
	if t == nil || t.TunnelName == nil {
		return ""
	}
	return *t.TunnelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClearDfBit == nil {
		var v bool = false
		t.ClearDfBit = &v
	}
	if t.PmtuDiscoveryAging == nil {
		var v uint32 = 900
		t.PmtuDiscoveryAging = &v
	}
	t.GreHeader.PopulateDefaults()
	t.IcmpGeneration.PopulateDefaults()
	t.Icmp6Generation.PopulateDefaults()
	for _, e := range t.DestIp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/dest-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp struct {
	DestIpAddress *string `path:"dest-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) IsYANGGoStruct() {
}

// GetDestIpAddress retrieves the value of the leaf DestIpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIpAddress is set, it can
// safely use t.GetDestIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) GetDestIpAddress() string {
	if t == nil || t.DestIpAddress == nil {
		return ""
	}
	return *t.DestIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestIpAddress == nil {
		return nil, fmt.Errorf("nil value for key DestIpAddress")
	}

	return map[string]interface{}{
		"dest-ip-address": *t.DestIpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/gre-header YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader struct {
	AdminState E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	Key        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) IsYANGGoStruct() {
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) GetOrCreateKey() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key{}
	return t.Key
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) GetKey() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/gre-header/key YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Receive    *uint32                     `path:"receive" module:"nokia-conf"`
	Send       *uint32                     `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 0
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) GetSend() uint32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Receive == nil {
		var v uint32 = 0
		t.Receive = &v
	}
	if t.Send == nil {
		var v uint32 = 0
		t.Send = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/icmp6-generation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation struct {
	PacketTooBig *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) IsYANGGoStruct() {
}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) GetOrCreatePacketTooBig() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig{}
	return t.PacketTooBig
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) GetPacketTooBig() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/icmp6-generation/packet-too-big YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/icmp-generation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration struct {
	FragRequired *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired `path:"frag-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) IsYANGGoStruct() {
}

// GetOrCreateFragRequired retrieves the value of the FragRequired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) GetOrCreateFragRequired() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired {
	if t.FragRequired != nil {
		return t.FragRequired
	}
	t.FragRequired = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired{}
	return t.FragRequired
}

// GetFragRequired returns the value of the FragRequired struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration. If the receiver or the field FragRequired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) GetFragRequired() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired {
	if t != nil && t.FragRequired != nil {
		return t.FragRequired
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FragRequired.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ip-tunnel/icmp-generation/frag-required YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	Cert                  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert                  `path:"cert" module:"nokia-conf"`
	ClientDb              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb              `path:"client-db" module:"nokia-conf" yangPresence:"true"`
	DefaultSecureService  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService  `path:"default-secure-service" module:"nokia-conf" yangPresence:"true"`
	DefaultTunnelTemplate *uint32                                                                                         `path:"default-tunnel-template" module:"nokia-conf"`
	DhcpAddressAssignment *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment `path:"dhcp-address-assignment" module:"nokia-conf"`
	IkePolicy             *uint32                                                                                         `path:"ike-policy" module:"nokia-conf"`
	Local                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local                 `path:"local" module:"nokia-conf"`
	MaxHistoryKeyRecords  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords  `path:"max-history-key-records" module:"nokia-conf"`
	Name                  *string                                                                                         `path:"name" module:"nokia-conf"`
	PreSharedKey          *string                                                                                         `path:"pre-shared-key" module:"nokia-conf"`
	Radius                *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius                `path:"radius" module:"nokia-conf"`
	TsList                *string                                                                                         `path:"ts-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) IsYANGGoStruct() {}

// GetOrCreateCert retrieves the value of the Cert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateCert() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert {
	if t.Cert != nil {
		return t.Cert
	}
	t.Cert = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert{}
	return t.Cert
}

// GetOrCreateClientDb retrieves the value of the ClientDb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateClientDb() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb {
	if t.ClientDb != nil {
		return t.ClientDb
	}
	t.ClientDb = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb{}
	return t.ClientDb
}

// GetOrCreateDefaultSecureService retrieves the value of the DefaultSecureService field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateDefaultSecureService() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService {
	if t.DefaultSecureService != nil {
		return t.DefaultSecureService
	}
	t.DefaultSecureService = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService{}
	return t.DefaultSecureService
}

// GetOrCreateDhcpAddressAssignment retrieves the value of the DhcpAddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateDhcpAddressAssignment() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment {
	if t.DhcpAddressAssignment != nil {
		return t.DhcpAddressAssignment
	}
	t.DhcpAddressAssignment = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment{}
	return t.DhcpAddressAssignment
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateLocal() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local{}
	return t.Local
}

// GetOrCreateMaxHistoryKeyRecords retrieves the value of the MaxHistoryKeyRecords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateMaxHistoryKeyRecords() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords {
	if t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	t.MaxHistoryKeyRecords = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords{}
	return t.MaxHistoryKeyRecords
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateRadius() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius{}
	return t.Radius
}

// GetCert returns the value of the Cert struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field Cert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetCert() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert {
	if t != nil && t.Cert != nil {
		return t.Cert
	}
	return nil
}

// GetClientDb returns the value of the ClientDb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field ClientDb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetClientDb() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb {
	if t != nil && t.ClientDb != nil {
		return t.ClientDb
	}
	return nil
}

// GetDefaultSecureService returns the value of the DefaultSecureService struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field DefaultSecureService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetDefaultSecureService() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService {
	if t != nil && t.DefaultSecureService != nil {
		return t.DefaultSecureService
	}
	return nil
}

// GetDhcpAddressAssignment returns the value of the DhcpAddressAssignment struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field DhcpAddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetDhcpAddressAssignment() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment {
	if t != nil && t.DhcpAddressAssignment != nil {
		return t.DhcpAddressAssignment
	}
	return nil
}

// GetLocal returns the value of the Local struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetLocal() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetMaxHistoryKeyRecords returns the value of the MaxHistoryKeyRecords struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field MaxHistoryKeyRecords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetMaxHistoryKeyRecords() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords {
	if t != nil && t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetRadius() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDefaultTunnelTemplate retrieves the value of the leaf DefaultTunnelTemplate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTunnelTemplate is set, it can
// safely use t.GetDefaultTunnelTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTunnelTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetDefaultTunnelTemplate() uint32 {
	if t == nil || t.DefaultTunnelTemplate == nil {
		return 0
	}
	return *t.DefaultTunnelTemplate
}

// GetIkePolicy retrieves the value of the leaf IkePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePolicy is set, it can
// safely use t.GetIkePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetIkePolicy() uint32 {
	if t == nil || t.IkePolicy == nil {
		return 0
	}
	return *t.IkePolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// GetTsList retrieves the value of the leaf TsList from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsList is set, it can
// safely use t.GetTsList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) GetTsList() string {
	if t == nil || t.TsList == nil {
		return ""
	}
	return *t.TsList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Cert.PopulateDefaults()
	t.ClientDb.PopulateDefaults()
	t.DefaultSecureService.PopulateDefaults()
	t.DhcpAddressAssignment.PopulateDefaults()
	t.Local.PopulateDefaults()
	t.MaxHistoryKeyRecords.PopulateDefaults()
	t.Radius.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/cert YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert struct {
	CertProfile        *string                                                                                     `path:"cert-profile" module:"nokia-conf"`
	StatusVerify       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify `path:"status-verify" module:"nokia-conf"`
	TrustAnchorProfile *string                                                                                     `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) IsYANGGoStruct() {
}

// GetOrCreateStatusVerify retrieves the value of the StatusVerify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetOrCreateStatusVerify() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify {
	if t.StatusVerify != nil {
		return t.StatusVerify
	}
	t.StatusVerify = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify{}
	return t.StatusVerify
}

// GetStatusVerify returns the value of the StatusVerify struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert. If the receiver or the field StatusVerify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetStatusVerify() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify {
	if t != nil && t.StatusVerify != nil {
		return t.StatusVerify
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.StatusVerify.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/cert/status-verify YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify struct {
	DefaultResult E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult `path:"default-result" module:"nokia-conf"`
	Primary       E_NokiaTypesIpsec_CertRevocationStatus                                                                     `path:"primary" module:"nokia-conf"`
	Secondary     E_NokiaTypesIpsec_CertRevocationStatusWithNone                                                             `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) IsYANGGoStruct() {
}

// GetDefaultResult retrieves the value of the leaf DefaultResult from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultResult is set, it can
// safely use t.GetDefaultResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultResult == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetDefaultResult() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult {
	if t == nil || t.DefaultResult == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult_revoked
	}
	return t.DefaultResult
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetPrimary() E_NokiaTypesIpsec_CertRevocationStatus {
	if t == nil || t.Primary == 0 {
		return NokiaTypesIpsec_CertRevocationStatus_crl
	}
	return t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetSecondary() E_NokiaTypesIpsec_CertRevocationStatusWithNone {
	if t == nil || t.Secondary == 0 {
		return NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
	return t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultResult == 0 {
		t.DefaultResult = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult_revoked
	}
	if t.Primary == 0 {
		t.Primary = NokiaTypesIpsec_CertRevocationStatus_crl
	}
	if t.Secondary == 0 {
		t.Secondary = NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/client-db YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb struct {
	Fallback *bool   `path:"fallback" module:"nokia-conf"`
	Name     *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) IsYANGGoStruct() {
}

// GetFallback retrieves the value of the leaf Fallback from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fallback is set, it can
// safely use t.GetFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) GetFallback() bool {
	if t == nil || t.Fallback == nil {
		return true
	}
	return *t.Fallback
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fallback == nil {
		var v bool = true
		t.Fallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/default-secure-service YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment struct {
	Dhcpv4 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 `path:"dhcpv4" module:"nokia-conf" yangPresence:"true"`
	Dhcpv6 *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 `path:"dhcpv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateDhcpv4 retrieves the value of the Dhcpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetOrCreateDhcpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 {
	if t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	t.Dhcpv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4{}
	return t.Dhcpv4
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetOrCreateDhcpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcpv4 returns the value of the Dhcpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment. If the receiver or the field Dhcpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetDhcpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 {
	if t != nil && t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetDhcpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcpv4.PopulateDefaults()
	t.Dhcpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 struct {
	AdminState  E_NokiaTypesSros_AdminState                                                                                   `path:"admin-state" module:"nokia-conf"`
	GiAddress   *string                                                                                                       `path:"gi-address" module:"nokia-conf"`
	SendRelease *bool                                                                                                         `path:"send-release" module:"nokia-conf"`
	Server      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) IsYANGGoStruct() {
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetSendRelease retrieves the value of the leaf SendRelease from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRelease is set, it can
// safely use t.GetSendRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetSendRelease() bool {
	if t == nil || t.SendRelease == nil {
		return true
	}
	return *t.SendRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendRelease == nil {
		var v bool = true
		t.SendRelease = &v
	}
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv4/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server struct {
	Address        []string `path:"address" module:"nokia-conf"`
	RouterInstance *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 struct {
	AdminState  E_NokiaTypesSros_AdminState                                                                                   `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                                                                                                       `path:"link-address" module:"nokia-conf"`
	SendRelease *bool                                                                                                         `path:"send-release" module:"nokia-conf"`
	Server      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) IsYANGGoStruct() {
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetSendRelease retrieves the value of the leaf SendRelease from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRelease is set, it can
// safely use t.GetSendRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetSendRelease() bool {
	if t == nil || t.SendRelease == nil {
		return true
	}
	return *t.SendRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendRelease == nil {
		var v bool = true
		t.SendRelease = &v
	}
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv6/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server struct {
	Address        []string `path:"address" module:"nokia-conf"`
	RouterInstance *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/local YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local struct {
	AddressAssignment *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment `path:"address-assignment" module:"nokia-conf" yangPresence:"true"`
	GatewayAddress    *string                                                                                           `path:"gateway-address" module:"nokia-conf"`
	Id                *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id                `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) IsYANGGoStruct() {
}

// GetOrCreateAddressAssignment retrieves the value of the AddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetOrCreateAddressAssignment() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment {
	if t.AddressAssignment != nil {
		return t.AddressAssignment
	}
	t.AddressAssignment = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment{}
	return t.AddressAssignment
}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetOrCreateId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id{}
	return t.Id
}

// GetAddressAssignment returns the value of the AddressAssignment struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local. If the receiver or the field AddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetAddressAssignment() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment {
	if t != nil && t.AddressAssignment != nil {
		return t.AddressAssignment
	}
	return nil
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetGatewayAddress retrieves the value of the leaf GatewayAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayAddress is set, it can
// safely use t.GetGatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetGatewayAddress() string {
	if t == nil || t.GatewayAddress == nil {
		return ""
	}
	return *t.GatewayAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddressAssignment.PopulateDefaults()
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/local/address-assignment YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment struct {
	AdminState E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	Ipv4       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/local/address-assignment/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 struct {
	DhcpServer     *string `path:"dhcp-server" module:"nokia-conf"`
	Pool           *string `path:"pool" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	SecondaryPool  *string `path:"secondary-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) IsYANGGoStruct() {
}

// GetDhcpServer retrieves the value of the leaf DhcpServer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpServer is set, it can
// safely use t.GetDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetDhcpServer() string {
	if t == nil || t.DhcpServer == nil {
		return ""
	}
	return *t.DhcpServer
}

// GetPool retrieves the value of the leaf Pool from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pool is set, it can
// safely use t.GetPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetPool() string {
	if t == nil || t.Pool == nil {
		return ""
	}
	return *t.Pool
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSecondaryPool retrieves the value of the leaf SecondaryPool from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryPool is set, it can
// safely use t.GetSecondaryPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetSecondaryPool() string {
	if t == nil || t.SecondaryPool == nil {
		return ""
	}
	return *t.SecondaryPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/local/address-assignment/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 struct {
	DhcpServer     *string `path:"dhcp-server" module:"nokia-conf"`
	Pool           *string `path:"pool" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) IsYANGGoStruct() {
}

// GetDhcpServer retrieves the value of the leaf DhcpServer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpServer is set, it can
// safely use t.GetDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetDhcpServer() string {
	if t == nil || t.DhcpServer == nil {
		return ""
	}
	return *t.DhcpServer
}

// GetPool retrieves the value of the leaf Pool from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pool is set, it can
// safely use t.GetPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetPool() string {
	if t == nil || t.Pool == nil {
		return ""
	}
	return *t.Pool
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/local/id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id struct {
	Auto YANGEmpty `path:"auto" module:"nokia-conf"`
	Fqdn *string   `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string   `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) IsYANGGoStruct() {
}

// GetAuto retrieves the value of the leaf Auto from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Auto is set, it can
// safely use t.GetAuto() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Auto == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetAuto() YANGEmpty {
	if t == nil || t.Auto == false {
		return false
	}
	return t.Auto
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/max-history-key-records YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords struct {
	Esp *uint32 `path:"esp" module:"nokia-conf"`
	Ike *uint32 `path:"ike" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) IsYANGGoStruct() {
}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) GetEsp() uint32 {
	if t == nil || t.Esp == nil {
		return 0
	}
	return *t.Esp
}

// GetIke retrieves the value of the leaf Ike from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ike is set, it can
// safely use t.GetIke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ike == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) GetIke() uint32 {
	if t == nil || t.Ike == nil {
		return 0
	}
	return *t.Ike
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-gateway/radius YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius struct {
	AccountingPolicy     *string `path:"accounting-policy" module:"nokia-conf"`
	AuthenticationPolicy *string `path:"authentication-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) GetAccountingPolicy() string {
	if t == nil || t.AccountingPolicy == nil {
		return ""
	}
	return *t.AccountingPolicy
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecGateway_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel struct {
	AdminState                        E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	Bfd                               *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd                     `path:"bfd" module:"nokia-conf"`
	ClearDfBit                        *bool                                                                                            `path:"clear-df-bit" module:"nokia-conf"`
	CopyTrafficClassUponDecapsulation *bool                                                                                            `path:"copy-traffic-class-upon-decapsulation" module:"nokia-conf"`
	Description                       *string                                                                                          `path:"description" module:"nokia-conf"`
	DestIp                            map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp       `path:"dest-ip" module:"nokia-conf"`
	EncapsulatedIpMtu                 *uint32                                                                                          `path:"encapsulated-ip-mtu" module:"nokia-conf"`
	IcmpGeneration                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration          `path:"icmp-generation" module:"nokia-conf"`
	Icmp6Generation                   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation         `path:"icmp6-generation" module:"nokia-conf"`
	IpMtu                             *uint32                                                                                          `path:"ip-mtu" module:"nokia-conf"`
	KeyExchange                       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange             `path:"key-exchange" module:"nokia-conf"`
	MaxHistoryKeyRecords              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords    `path:"max-history-key-records" module:"nokia-conf"`
	Name                              *string                                                                                          `path:"name" module:"nokia-conf"`
	PmtuDiscoveryAging                *uint32                                                                                          `path:"pmtu-discovery-aging" module:"nokia-conf"`
	PrivateTcpMssAdjust               *int32                                                                                           `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PropagatePmtuV4                   *bool                                                                                            `path:"propagate-pmtu-v4" module:"nokia-conf"`
	PropagatePmtuV6                   *bool                                                                                            `path:"propagate-pmtu-v6" module:"nokia-conf"`
	PublicTcpMssAdjust                NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_PublicTcpMssAdjust_Union `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	ReplayWindow                      *uint32                                                                                          `path:"replay-window" module:"nokia-conf"`
	SecurityPolicy                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy          `path:"security-policy" module:"nokia-conf"`
	TunnelEndpoint                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint          `path:"tunnel-endpoint" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) IsYANGGoStruct() {}

// NewDestIp creates a new entry in the DestIp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) NewDestIp(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestIp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestIp", key)
	}

	t.DestIp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp{
		Address: &Address,
	}

	return t.DestIp[key], nil
}

// RenameDestIp renames an entry in the list DestIp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) RenameDestIp(oldK, newK string) error {
	if _, ok := t.DestIp[newK]; ok {
		return fmt.Errorf("key %v already exists in DestIp", newK)
	}

	e, ok := t.DestIp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestIp", oldK)
	}
	e.Address = &newK

	t.DestIp[newK] = e
	delete(t.DestIp, oldK)
	return nil
}

// GetOrCreateDestIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateDestIp(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp {

	key := Address

	if v, ok := t.DestIp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestIp(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestIp got unexpected error: %v", err))
	}
	return v
}

// GetDestIp retrieves the value with the specified key from
// the DestIp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetDestIp(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.DestIp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) DeleteDestIp(Address string) {
	key := Address

	delete(t.DestIp, key)
}

// AppendDestIp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp struct to the
// list DestIp of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) AppendDestIp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp)
	}

	if _, ok := t.DestIp[key]; ok {
		return fmt.Errorf("duplicate key for list DestIp %v", key)
	}

	t.DestIp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd{}
	return t.Bfd
}

// GetOrCreateIcmpGeneration retrieves the value of the IcmpGeneration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateIcmpGeneration() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration {
	if t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	t.IcmpGeneration = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration{}
	return t.IcmpGeneration
}

// GetOrCreateIcmp6Generation retrieves the value of the Icmp6Generation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateIcmp6Generation() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation {
	if t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	t.Icmp6Generation = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation{}
	return t.Icmp6Generation
}

// GetOrCreateKeyExchange retrieves the value of the KeyExchange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateKeyExchange() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange {
	if t.KeyExchange != nil {
		return t.KeyExchange
	}
	t.KeyExchange = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange{}
	return t.KeyExchange
}

// GetOrCreateMaxHistoryKeyRecords retrieves the value of the MaxHistoryKeyRecords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateMaxHistoryKeyRecords() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords {
	if t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	t.MaxHistoryKeyRecords = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords{}
	return t.MaxHistoryKeyRecords
}

// GetOrCreateSecurityPolicy retrieves the value of the SecurityPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateSecurityPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy {
	if t.SecurityPolicy != nil {
		return t.SecurityPolicy
	}
	t.SecurityPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy{}
	return t.SecurityPolicy
}

// GetOrCreateTunnelEndpoint retrieves the value of the TunnelEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateTunnelEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint {
	if t.TunnelEndpoint != nil {
		return t.TunnelEndpoint
	}
	t.TunnelEndpoint = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint{}
	return t.TunnelEndpoint
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetIcmpGeneration returns the value of the IcmpGeneration struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field IcmpGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetIcmpGeneration() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration {
	if t != nil && t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	return nil
}

// GetIcmp6Generation returns the value of the Icmp6Generation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field Icmp6Generation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetIcmp6Generation() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation {
	if t != nil && t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	return nil
}

// GetKeyExchange returns the value of the KeyExchange struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field KeyExchange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetKeyExchange() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange {
	if t != nil && t.KeyExchange != nil {
		return t.KeyExchange
	}
	return nil
}

// GetMaxHistoryKeyRecords returns the value of the MaxHistoryKeyRecords struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field MaxHistoryKeyRecords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetMaxHistoryKeyRecords() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords {
	if t != nil && t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	return nil
}

// GetSecurityPolicy returns the value of the SecurityPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field SecurityPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetSecurityPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy {
	if t != nil && t.SecurityPolicy != nil {
		return t.SecurityPolicy
	}
	return nil
}

// GetTunnelEndpoint returns the value of the TunnelEndpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field TunnelEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetTunnelEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint {
	if t != nil && t.TunnelEndpoint != nil {
		return t.TunnelEndpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClearDfBit retrieves the value of the leaf ClearDfBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearDfBit is set, it can
// safely use t.GetClearDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetClearDfBit() bool {
	if t == nil || t.ClearDfBit == nil {
		return false
	}
	return *t.ClearDfBit
}

// GetCopyTrafficClassUponDecapsulation retrieves the value of the leaf CopyTrafficClassUponDecapsulation from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CopyTrafficClassUponDecapsulation is set, it can
// safely use t.GetCopyTrafficClassUponDecapsulation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CopyTrafficClassUponDecapsulation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetCopyTrafficClassUponDecapsulation() bool {
	if t == nil || t.CopyTrafficClassUponDecapsulation == nil {
		return false
	}
	return *t.CopyTrafficClassUponDecapsulation
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEncapsulatedIpMtu retrieves the value of the leaf EncapsulatedIpMtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulatedIpMtu is set, it can
// safely use t.GetEncapsulatedIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulatedIpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetEncapsulatedIpMtu() uint32 {
	if t == nil || t.EncapsulatedIpMtu == nil {
		return 0
	}
	return *t.EncapsulatedIpMtu
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPmtuDiscoveryAging retrieves the value of the leaf PmtuDiscoveryAging from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtuDiscoveryAging is set, it can
// safely use t.GetPmtuDiscoveryAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtuDiscoveryAging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetPmtuDiscoveryAging() uint32 {
	if t == nil || t.PmtuDiscoveryAging == nil {
		return 900
	}
	return *t.PmtuDiscoveryAging
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPropagatePmtuV4 retrieves the value of the leaf PropagatePmtuV4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV4 is set, it can
// safely use t.GetPropagatePmtuV4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetPropagatePmtuV4() bool {
	if t == nil || t.PropagatePmtuV4 == nil {
		return true
	}
	return *t.PropagatePmtuV4
}

// GetPropagatePmtuV6 retrieves the value of the leaf PropagatePmtuV6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV6 is set, it can
// safely use t.GetPropagatePmtuV6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetPropagatePmtuV6() bool {
	if t == nil || t.PropagatePmtuV6 == nil {
		return true
	}
	return *t.PropagatePmtuV6
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetPublicTcpMssAdjust() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetReplayWindow retrieves the value of the leaf ReplayWindow from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayWindow is set, it can
// safely use t.GetReplayWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) GetReplayWindow() uint32 {
	if t == nil || t.ReplayWindow == nil {
		return 0
	}
	return *t.ReplayWindow
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClearDfBit == nil {
		var v bool = false
		t.ClearDfBit = &v
	}
	if t.CopyTrafficClassUponDecapsulation == nil {
		var v bool = false
		t.CopyTrafficClassUponDecapsulation = &v
	}
	if t.PmtuDiscoveryAging == nil {
		var v uint32 = 900
		t.PmtuDiscoveryAging = &v
	}
	if t.PropagatePmtuV4 == nil {
		var v bool = true
		t.PropagatePmtuV4 = &v
	}
	if t.PropagatePmtuV6 == nil {
		var v bool = true
		t.PropagatePmtuV6 = &v
	}
	t.Bfd.PopulateDefaults()
	t.IcmpGeneration.PopulateDefaults()
	t.Icmp6Generation.PopulateDefaults()
	t.KeyExchange.PopulateDefaults()
	t.MaxHistoryKeyRecords.PopulateDefaults()
	t.SecurityPolicy.PopulateDefaults()
	t.TunnelEndpoint.PopulateDefaults()
	for _, e := range t.DestIp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd struct {
	BfdDesignate *bool                                                                                    `path:"bfd-designate" module:"nokia-conf"`
	BfdLiveness  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) IsYANGGoStruct() {
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdDesignate retrieves the value of the leaf BfdDesignate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdDesignate is set, it can
// safely use t.GetBfdDesignate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdDesignate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) GetBfdDesignate() bool {
	if t == nil || t.BfdDesignate == nil {
		return false
	}
	return *t.BfdDesignate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdDesignate == nil {
		var v bool = false
		t.BfdDesignate = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness struct {
	DestIp      *string `path:"dest-ip" module:"nokia-conf"`
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) IsYANGGoStruct() {
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/dest-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/icmp6-generation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation struct {
	PacketTooBig *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) IsYANGGoStruct() {
}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) GetOrCreatePacketTooBig() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig{}
	return t.PacketTooBig
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) GetPacketTooBig() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/icmp6-generation/packet-too-big YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/icmp-generation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration struct {
	FragRequired *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired `path:"frag-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) IsYANGGoStruct() {
}

// GetOrCreateFragRequired retrieves the value of the FragRequired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) GetOrCreateFragRequired() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired {
	if t.FragRequired != nil {
		return t.FragRequired
	}
	t.FragRequired = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired{}
	return t.FragRequired
}

// GetFragRequired returns the value of the FragRequired struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration. If the receiver or the field FragRequired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) GetFragRequired() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired {
	if t != nil && t.FragRequired != nil {
		return t.FragRequired
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FragRequired.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/icmp-generation/frag-required YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange struct {
	Dynamic *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic `path:"dynamic" module:"nokia-conf" yangPresence:"true"`
	Manual  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual  `path:"manual" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) IsYANGGoStruct() {
}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetOrCreateDynamic() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic{}
	return t.Dynamic
}

// GetOrCreateManual retrieves the value of the Manual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetOrCreateManual() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual {
	if t.Manual != nil {
		return t.Manual
	}
	t.Manual = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual{}
	return t.Manual
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetDynamic() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetManual returns the value of the Manual struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange. If the receiver or the field Manual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetManual() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual {
	if t != nil && t.Manual != nil {
		return t.Manual
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dynamic.PopulateDefaults()
	t.Manual.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic struct {
	AutoEstablish  *bool                                                                                             `path:"auto-establish" module:"nokia-conf"`
	Cert           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert `path:"cert" module:"nokia-conf"`
	Id             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id   `path:"id" module:"nokia-conf"`
	IkePolicy      *uint32                                                                                           `path:"ike-policy" module:"nokia-conf"`
	IpsecTransform []uint32                                                                                          `path:"ipsec-transform" module:"nokia-conf"`
	PreSharedKey   *string                                                                                           `path:"pre-shared-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) IsYANGGoStruct() {
}

// GetOrCreateCert retrieves the value of the Cert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetOrCreateCert() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert {
	if t.Cert != nil {
		return t.Cert
	}
	t.Cert = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert{}
	return t.Cert
}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetOrCreateId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id{}
	return t.Id
}

// GetCert returns the value of the Cert struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic. If the receiver or the field Cert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetCert() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert {
	if t != nil && t.Cert != nil {
		return t.Cert
	}
	return nil
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetAutoEstablish retrieves the value of the leaf AutoEstablish from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEstablish is set, it can
// safely use t.GetAutoEstablish() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEstablish == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetAutoEstablish() bool {
	if t == nil || t.AutoEstablish == nil {
		return false
	}
	return *t.AutoEstablish
}

// GetIkePolicy retrieves the value of the leaf IkePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePolicy is set, it can
// safely use t.GetIkePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetIkePolicy() uint32 {
	if t == nil || t.IkePolicy == nil {
		return 0
	}
	return *t.IkePolicy
}

// GetIpsecTransform retrieves the value of the leaf IpsecTransform from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransform is set, it can
// safely use t.GetIpsecTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetIpsecTransform() []uint32 {
	if t == nil || t.IpsecTransform == nil {
		return nil
	}
	return t.IpsecTransform
}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEstablish == nil {
		var v bool = false
		t.AutoEstablish = &v
	}
	t.Cert.PopulateDefaults()
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic/cert YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert struct {
	CertProfile        *string                                                                                                        `path:"cert-profile" module:"nokia-conf"`
	StatusVerify       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify `path:"status-verify" module:"nokia-conf"`
	TrustAnchorProfile *string                                                                                                        `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) IsYANGGoStruct() {
}

// GetOrCreateStatusVerify retrieves the value of the StatusVerify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetOrCreateStatusVerify() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify {
	if t.StatusVerify != nil {
		return t.StatusVerify
	}
	t.StatusVerify = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify{}
	return t.StatusVerify
}

// GetStatusVerify returns the value of the StatusVerify struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert. If the receiver or the field StatusVerify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetStatusVerify() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify {
	if t != nil && t.StatusVerify != nil {
		return t.StatusVerify
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.StatusVerify.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic/cert/status-verify YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify struct {
	DefaultResult E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult `path:"default-result" module:"nokia-conf"`
	Primary       E_NokiaTypesIpsec_CertRevocationStatus                                                                                        `path:"primary" module:"nokia-conf"`
	Secondary     E_NokiaTypesIpsec_CertRevocationStatusWithNone                                                                                `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) IsYANGGoStruct() {
}

// GetDefaultResult retrieves the value of the leaf DefaultResult from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultResult is set, it can
// safely use t.GetDefaultResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultResult == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) GetDefaultResult() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult {
	if t == nil || t.DefaultResult == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult_revoked
	}
	return t.DefaultResult
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) GetPrimary() E_NokiaTypesIpsec_CertRevocationStatus {
	if t == nil || t.Primary == 0 {
		return NokiaTypesIpsec_CertRevocationStatus_crl
	}
	return t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) GetSecondary() E_NokiaTypesIpsec_CertRevocationStatusWithNone {
	if t == nil || t.Secondary == 0 {
		return NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
	return t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultResult == 0 {
		t.DefaultResult = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult_revoked
	}
	if t.Primary == 0 {
		t.Primary = NokiaTypesIpsec_CertRevocationStatus_crl
	}
	if t.Secondary == 0 {
		t.Secondary = NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic/id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id struct {
	Fqdn *string `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) IsYANGGoStruct() {
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/manual YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual struct {
	Keys map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys `path:"keys" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key represents the key for list Keys of element /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/manual.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key struct {
	SecurityAssociation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union `path:"security-association"`
	Direction           NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union           `path:"direction"`
}

// NewKeys creates a new entry in the Keys list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) NewKeys(SecurityAssociation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union, Direction NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keys == nil {
		t.Keys = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keys[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keys", key)
	}

	t.Keys[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	return t.Keys[key], nil
}

// RenameKeys renames an entry in the list Keys within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) RenameKeys(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key) error {
	if _, ok := t.Keys[newK]; ok {
		return fmt.Errorf("key %v already exists in Keys", newK)
	}

	e, ok := t.Keys[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keys", oldK)
	}
	e.SecurityAssociation = newK.SecurityAssociation
	e.Direction = newK.Direction

	t.Keys[newK] = e
	delete(t.Keys, oldK)
	return nil
}

// GetOrCreateKeys retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) GetOrCreateKeys(SecurityAssociation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union, Direction NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	if v, ok := t.Keys[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeys(SecurityAssociation, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeys got unexpected error: %v", err))
	}
	return v
}

// GetKeys retrieves the value with the specified key from
// the Keys map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) GetKeys(SecurityAssociation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union, Direction NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	if lm, ok := t.Keys[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeys deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) DeleteKeys(SecurityAssociation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union, Direction NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	delete(t.Keys, key)
}

// AppendKeys appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys struct to the
// list Keys of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) AppendKeys(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) error {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: v.SecurityAssociation,
		Direction:           v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keys == nil {
		t.Keys = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys)
	}

	if _, ok := t.Keys[key]; ok {
		return fmt.Errorf("duplicate key for list Keys %v", key)
	}

	t.Keys[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Keys {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/key-exchange/manual/keys YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys struct {
	AuthenticationKey   *string                                                                                                                   `path:"authentication-key" module:"nokia-conf"`
	Direction           NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union           `path:"direction" module:"nokia-conf"`
	EncryptionKey       *string                                                                                                                   `path:"encryption-key" module:"nokia-conf"`
	IpsecTransform      *uint32                                                                                                                   `path:"ipsec-transform" module:"nokia-conf"`
	SecurityAssociation NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union `path:"security-association" module:"nokia-conf"`
	Spi                 *uint32                                                                                                                   `path:"spi" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) IsYANGGoStruct() {
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetDirection() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetEncryptionKey retrieves the value of the leaf EncryptionKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKey is set, it can
// safely use t.GetEncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetEncryptionKey() string {
	if t == nil || t.EncryptionKey == nil {
		return ""
	}
	return *t.EncryptionKey
}

// GetIpsecTransform retrieves the value of the leaf IpsecTransform from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransform is set, it can
// safely use t.GetIpsecTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetIpsecTransform() uint32 {
	if t == nil || t.IpsecTransform == nil {
		return 0
	}
	return *t.IpsecTransform
}

// GetSecurityAssociation retrieves the value of the leaf SecurityAssociation from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityAssociation is set, it can
// safely use t.GetSecurityAssociation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityAssociation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetSecurityAssociation() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_SecurityAssociation_Union {
	if t == nil || t.SecurityAssociation == nil {
		return nil
	}
	return t.SecurityAssociation
}

// GetSpi retrieves the value of the leaf Spi from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Spi is set, it can
// safely use t.GetSpi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Spi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetSpi() uint32 {
	if t == nil || t.Spi == nil {
		return 0
	}
	return *t.Spi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":            t.Direction,
		"security-association": t.SecurityAssociation,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/max-history-key-records YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords struct {
	Esp *uint32 `path:"esp" module:"nokia-conf"`
	Ike *uint32 `path:"ike" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) IsYANGGoStruct() {
}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) GetEsp() uint32 {
	if t == nil || t.Esp == nil {
		return 0
	}
	return *t.Esp
}

// GetIke retrieves the value of the leaf Ike from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ike is set, it can
// safely use t.GetIke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ike == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) GetIke() uint32 {
	if t == nil || t.Ike == nil {
		return 0
	}
	return *t.Ike
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/security-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy struct {
	Id          *uint32 `path:"id" module:"nokia-conf"`
	StrictMatch *bool   `path:"strict-match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetStrictMatch retrieves the value of the leaf StrictMatch from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictMatch is set, it can
// safely use t.GetStrictMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) GetStrictMatch() bool {
	if t == nil || t.StrictMatch == nil {
		return false
	}
	return *t.StrictMatch
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StrictMatch == nil {
		var v bool = false
		t.StrictMatch = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/ipsec-tunnel/tunnel-endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint struct {
	DeliveryService     *string `path:"delivery-service" module:"nokia-conf"`
	LocalGatewayAddress *string `path:"local-gateway-address" module:"nokia-conf"`
	RemoteIpAddress     *string `path:"remote-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) IsYANGGoStruct() {
}

// GetDeliveryService retrieves the value of the leaf DeliveryService from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryService is set, it can
// safely use t.GetDeliveryService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) GetDeliveryService() string {
	if t == nil || t.DeliveryService == nil {
		return ""
	}
	return *t.DeliveryService
}

// GetLocalGatewayAddress retrieves the value of the leaf LocalGatewayAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalGatewayAddress is set, it can
// safely use t.GetLocalGatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalGatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) GetLocalGatewayAddress() string {
	if t == nil || t.LocalGatewayAddress == nil {
		return ""
	}
	return *t.LocalGatewayAddress
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag struct {
	LinkMapProfile *int32                                                                       `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) IsYANGGoStruct() {
}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/static-host YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost struct {
	Ipv4 map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key represents the key for list Ipv4 of element /nokia-conf/configure/groups/group/service/vprn/interface/sap/static-host.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key struct {
	Ip  string `path:"ip"`
	Mac string `path:"mac"`
}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) NewIpv4(Ip string, Mac string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4{
		Ip:  &Ip,
		Mac: &Mac,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) RenameIpv4(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Ip = &newK.Ip
	e.Mac = &newK.Mac

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) GetOrCreateIpv4(Ip string, Mac string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Ip, Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) GetIpv4(Ip string, Mac string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) DeleteIpv4(Ip string, Mac string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) AppendIpv4(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key for Ip")
	}

	if v.Mac == nil {
		return fmt.Errorf("invalid nil key for Mac")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  *v.Ip,
		Mac: *v.Mac,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/static-host/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 struct {
	AdminState   E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	AncpString   *string                                                                                   `path:"ancp-string" module:"nokia-conf"`
	AppProfile   *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile   `path:"app-profile" module:"nokia-conf"`
	IntDestId    *string                                                                                   `path:"int-dest-id" module:"nokia-conf"`
	Ip           *string                                                                                   `path:"ip" module:"nokia-conf"`
	Mac          *string                                                                                   `path:"mac" module:"nokia-conf"`
	SlaProfile   *string                                                                                   `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string                                                                                   `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateAppProfile retrieves the value of the AppProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetOrCreateAppProfile() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile {
	if t.AppProfile != nil {
		return t.AppProfile
	}
	t.AppProfile = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile{}
	return t.AppProfile
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetOrCreateSubscriberId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId{}
	return t.SubscriberId
}

// GetAppProfile returns the value of the AppProfile struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4. If the receiver or the field AppProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetAppProfile() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile {
	if t != nil && t.AppProfile != nil {
		return t.AppProfile
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetSubscriberId() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AppProfile.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"ip":  *t.Ip,
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/static-host/ipv4/app-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile struct {
	Profile *string `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) IsYANGGoStruct() {
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/static-host/ipv4/subscriber-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId struct {
	String   *string   `path:"string" module:"nokia-conf"`
	UseSapId YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) IsYANGGoStruct() {
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp struct {
	Aarp             *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp          `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy *uint32                                                                         `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	AppProfile       *string                                                                         `path:"app-profile" module:"nokia-conf"`
	Bfd              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd           `path:"bfd" module:"nokia-conf"`
	BfdLiveness      *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness   `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate      *string                                                                         `path:"bfd-template" module:"nokia-conf"`
	CollectStats     *bool                                                                           `path:"collect-stats" module:"nokia-conf"`
	ControlWord      *bool                                                                           `path:"control-word" module:"nokia-conf"`
	CpuProtection    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description      *string                                                                         `path:"description" module:"nokia-conf"`
	Egress           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress        `path:"egress" module:"nokia-conf"`
	EntropyLabel     YANGEmpty                                                                       `path:"entropy-label" module:"nokia-conf"`
	EthCfm           *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm        `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	HashLabel        *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel     `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress          *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress       `path:"ingress" module:"nokia-conf"`
	SdpBindId        *string                                                                         `path:"sdp-bind-id" module:"nokia-conf"`
	TransitPolicy    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	VcType           E_NokiaTypesServices_IesSdpBindVcType                                           `path:"vc-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetAarp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) GetVcType() E_NokiaTypesServices_IesSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_IesSdpBindVcType_ether
	}
	return t.VcType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_IesSdpBindVcType_ether
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd struct {
	BfdLiveness    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate    *string                                                                           `path:"bfd-template" module:"nokia-conf"`
	FailureAction  E_NokiaTypesServices_SbindBfdFailAction                                           `path:"failure-action" module:"nokia-conf"`
	WaitForUpTimer *uint32                                                                           `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) GetFailureAction() E_NokiaTypesServices_SbindBfdFailAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaTypesServices_SbindBfdFailAction_none
	}
	return t.FailureAction
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureAction == 0 {
		t.FailureAction = NokiaTypesServices_SbindBfdFailAction_none
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) IsYANGGoStruct() {
}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {
}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                                        `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                                        `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                                          `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) IsYANGGoStruct() {
}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                                         `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) IsYANGGoStruct() {
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                                `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm struct {
	CollectLmmFcStats    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats                                                                       `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                                                            `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                                                         `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key struct {
	MdAdminName string                                                                                  `path:"md-admin-name"`
	MaAdminName string                                                                                  `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                    `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                                          `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                                          `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                                         `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                                        `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                                        `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                                        `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                                         `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                                        `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                                        `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                                        `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) IsYANGGoStruct() {
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                                          `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {
}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                                     `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {
}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {
}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                                          `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {
}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/groups/group/service/vprn/interface/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls struct {
	Egress     *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress     `path:"egress" module:"nokia-conf"`
	Evpn       *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn       `path:"evpn" module:"nokia-conf"`
	EvpnTunnel *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel `path:"evpn-tunnel" module:"nokia-conf" yangPresence:"true"`
	Ingress    *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress    `path:"ingress" module:"nokia-conf"`
	VplsName   *string                                                                  `path:"vpls-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress{}
	return t.Egress
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetOrCreateEvpn() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn{}
	return t.Evpn
}

// GetOrCreateEvpnTunnel retrieves the value of the EvpnTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetOrCreateEvpnTunnel() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel {
	if t.EvpnTunnel != nil {
		return t.EvpnTunnel
	}
	t.EvpnTunnel = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel{}
	return t.EvpnTunnel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetEvpn() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetEvpnTunnel returns the value of the EvpnTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls. If the receiver or the field EvpnTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetEvpnTunnel() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel {
	if t != nil && t.EvpnTunnel != nil {
		return t.EvpnTunnel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetVplsName retrieves the value of the leaf VplsName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VplsName is set, it can
// safely use t.GetVplsName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VplsName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) GetVplsName() string {
	if t == nil || t.VplsName == nil {
		return ""
	}
	return *t.VplsName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.EvpnTunnel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VplsName == nil {
		return nil, fmt.Errorf("nil value for key VplsName")
	}

	return map[string]interface{}{
		"vpls-name": *t.VplsName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress struct {
	ReclassifyUsingQos   *string                                                                                   `path:"reclassify-using-qos" module:"nokia-conf"`
	RoutedOverrideFilter *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter `path:"routed-override-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) IsYANGGoStruct() {}

// GetOrCreateRoutedOverrideFilter retrieves the value of the RoutedOverrideFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) GetOrCreateRoutedOverrideFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter {
	if t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	t.RoutedOverrideFilter = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter{}
	return t.RoutedOverrideFilter
}

// GetRoutedOverrideFilter returns the value of the RoutedOverrideFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress. If the receiver or the field RoutedOverrideFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) GetRoutedOverrideFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter {
	if t != nil && t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	return nil
}

// GetReclassifyUsingQos retrieves the value of the leaf ReclassifyUsingQos from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReclassifyUsingQos is set, it can
// safely use t.GetReclassifyUsingQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReclassifyUsingQos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) GetReclassifyUsingQos() string {
	if t == nil || t.ReclassifyUsingQos == nil {
		return ""
	}
	return *t.ReclassifyUsingQos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RoutedOverrideFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/egress/routed-override-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn struct {
	Arp *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp `path:"arp" module:"nokia-conf"`
	Nd  *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd  `path:"nd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) IsYANGGoStruct() {}

// GetOrCreateArp retrieves the value of the Arp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) GetOrCreateArp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp {
	if t.Arp != nil {
		return t.Arp
	}
	t.Arp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp{}
	return t.Arp
}

// GetOrCreateNd retrieves the value of the Nd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) GetOrCreateNd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd {
	if t.Nd != nil {
		return t.Nd
	}
	t.Nd = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd{}
	return t.Nd
}

// GetArp returns the value of the Arp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn. If the receiver or the field Arp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) GetArp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp {
	if t != nil && t.Arp != nil {
		return t.Arp
	}
	return nil
}

// GetNd returns the value of the Nd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn. If the receiver or the field Nd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) GetNd() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd {
	if t != nil && t.Nd != nil {
		return t.Nd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Arp.PopulateDefaults()
	t.Nd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/evpn-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel struct {
	Ipv6GatewayAddress           E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress `path:"ipv6-gateway-address" module:"nokia-conf"`
	SupplementaryBroadcastDomain *bool                                                                                        `path:"supplementary-broadcast-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) IsYANGGoStruct() {}

// GetIpv6GatewayAddress retrieves the value of the leaf Ipv6GatewayAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6GatewayAddress is set, it can
// safely use t.GetIpv6GatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6GatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) GetIpv6GatewayAddress() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress {
	if t == nil || t.Ipv6GatewayAddress == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress_ip
	}
	return t.Ipv6GatewayAddress
}

// GetSupplementaryBroadcastDomain retrieves the value of the leaf SupplementaryBroadcastDomain from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplementaryBroadcastDomain is set, it can
// safely use t.GetSupplementaryBroadcastDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplementaryBroadcastDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) GetSupplementaryBroadcastDomain() bool {
	if t == nil || t.SupplementaryBroadcastDomain == nil {
		return false
	}
	return *t.SupplementaryBroadcastDomain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv6GatewayAddress == 0 {
		t.Ipv6GatewayAddress = NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress_ip
	}
	if t.SupplementaryBroadcastDomain == nil {
		var v bool = false
		t.SupplementaryBroadcastDomain = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_EvpnTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/evpn/arp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp struct {
	Advertise              map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise `path:"advertise" module:"nokia-conf"`
	FloodGarpAndUnknownReq *bool                                                                                                                                                                                `path:"flood-garp-and-unknown-req" module:"nokia-conf"`
	LearnDynamic           *bool                                                                                                                                                                                `path:"learn-dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) NewAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) RenameAdvertise(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) GetOrCreateAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise {

	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) GetAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) DeleteAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise struct to the
// list Advertise of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) AppendAdvertise(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// GetFloodGarpAndUnknownReq retrieves the value of the leaf FloodGarpAndUnknownReq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FloodGarpAndUnknownReq is set, it can
// safely use t.GetFloodGarpAndUnknownReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FloodGarpAndUnknownReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) GetFloodGarpAndUnknownReq() bool {
	if t == nil || t.FloodGarpAndUnknownReq == nil {
		return true
	}
	return *t.FloodGarpAndUnknownReq
}

// GetLearnDynamic retrieves the value of the leaf LearnDynamic from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnDynamic is set, it can
// safely use t.GetLearnDynamic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnDynamic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) GetLearnDynamic() bool {
	if t == nil || t.LearnDynamic == nil {
		return true
	}
	return *t.LearnDynamic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FloodGarpAndUnknownReq == nil {
		var v bool = true
		t.FloodGarpAndUnknownReq = &v
	}
	if t.LearnDynamic == nil {
		var v bool = true
		t.LearnDynamic = &v
	}
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/evpn/arp/advertise YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise struct {
	RouteTag  *uint32                                                                                         `path:"route-tag" module:"nokia-conf"`
	RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) IsYANGGoStruct() {
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) GetRouteType() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType_Union {
	if t == nil || t.RouteType == nil {
		return nil
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/evpn/nd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd struct {
	Advertise    map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise `path:"advertise" module:"nokia-conf"`
	LearnDynamic *bool                                                                                                                                                                              `path:"learn-dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) NewAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) RenameAdvertise(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) GetOrCreateAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise {

	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) GetAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) DeleteAdvertise(RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise struct to the
// list Advertise of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) AppendAdvertise(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// GetLearnDynamic retrieves the value of the leaf LearnDynamic from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnDynamic is set, it can
// safely use t.GetLearnDynamic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnDynamic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) GetLearnDynamic() bool {
	if t == nil || t.LearnDynamic == nil {
		return true
	}
	return *t.LearnDynamic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnDynamic == nil {
		var v bool = true
		t.LearnDynamic = &v
	}
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/evpn/nd/advertise YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise struct {
	RouteTag  *uint32                                                                                        `path:"route-tag" module:"nokia-conf"`
	RouteType NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) IsYANGGoStruct() {
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) GetRouteType() NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType_Union {
	if t == nil || t.RouteType == nil {
		return nil
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress struct {
	RoutedOverrideFilter *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter `path:"routed-override-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) IsYANGGoStruct() {}

// GetOrCreateRoutedOverrideFilter retrieves the value of the RoutedOverrideFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) GetOrCreateRoutedOverrideFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter {
	if t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	t.RoutedOverrideFilter = &NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter{}
	return t.RoutedOverrideFilter
}

// GetRoutedOverrideFilter returns the value of the RoutedOverrideFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress. If the receiver or the field RoutedOverrideFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) GetRoutedOverrideFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter {
	if t != nil && t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RoutedOverrideFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter represents the /nokia-conf/configure/groups/group/service/vprn/interface/vpls/ingress/routed-override-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface represents the /nokia-conf/configure/groups/group/service/vprn/ip-mirror-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface struct {
	AdminState    E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                                              `path:"description" module:"nokia-conf"`
	InterfaceName *string                                                                              `path:"interface-name" module:"nokia-conf"`
	SpokeSdp      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp represents the /nokia-conf/configure/groups/group/service/vprn/ip-mirror-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp struct {
	AdminState  E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                           `path:"description" module:"nokia-conf"`
	Ingress     *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId   *string                                                                           `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/ip-mirror-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                                  `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) IsYANGGoStruct() {
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/ip-mirror-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec represents the /nokia-conf/configure/groups/group/service/vprn/ipsec YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec struct {
	AllowReverseRouteOverride     *bool                                                                                                                                               `path:"allow-reverse-route-override" module:"nokia-conf"`
	AllowReverseRouteOverrideType E_NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_AllowReverseRouteOverrideType                                                                 `path:"allow-reverse-route-override-type" module:"nokia-conf"`
	SecurityPolicy                map[NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy `path:"security-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) IsYANGGoStruct() {}

// NewSecurityPolicy creates a new entry in the SecurityPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) NewSecurityPolicy(Id NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityPolicy == nil {
		t.SecurityPolicy = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SecurityPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SecurityPolicy", key)
	}

	t.SecurityPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy{
		Id: Id,
	}

	return t.SecurityPolicy[key], nil
}

// RenameSecurityPolicy renames an entry in the list SecurityPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) RenameSecurityPolicy(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union) error {
	if _, ok := t.SecurityPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SecurityPolicy", newK)
	}

	e, ok := t.SecurityPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SecurityPolicy", oldK)
	}
	e.Id = newK

	t.SecurityPolicy[newK] = e
	delete(t.SecurityPolicy, oldK)
	return nil
}

// GetOrCreateSecurityPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) GetOrCreateSecurityPolicy(Id NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy {

	key := Id

	if v, ok := t.SecurityPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecurityPolicy(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecurityPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSecurityPolicy retrieves the value with the specified key from
// the SecurityPolicy map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) GetSecurityPolicy(Id NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SecurityPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecurityPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) DeleteSecurityPolicy(Id NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union) {
	key := Id

	delete(t.SecurityPolicy, key)
}

// AppendSecurityPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy struct to the
// list SecurityPolicy of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) AppendSecurityPolicy(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityPolicy == nil {
		t.SecurityPolicy = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy)
	}

	if _, ok := t.SecurityPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SecurityPolicy %v", key)
	}

	t.SecurityPolicy[key] = v
	return nil
}

// GetAllowReverseRouteOverride retrieves the value of the leaf AllowReverseRouteOverride from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowReverseRouteOverride is set, it can
// safely use t.GetAllowReverseRouteOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowReverseRouteOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) GetAllowReverseRouteOverride() bool {
	if t == nil || t.AllowReverseRouteOverride == nil {
		return false
	}
	return *t.AllowReverseRouteOverride
}

// GetAllowReverseRouteOverrideType retrieves the value of the leaf AllowReverseRouteOverrideType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowReverseRouteOverrideType is set, it can
// safely use t.GetAllowReverseRouteOverrideType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowReverseRouteOverrideType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) GetAllowReverseRouteOverrideType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_AllowReverseRouteOverrideType {
	if t == nil || t.AllowReverseRouteOverrideType == 0 {
		return 0
	}
	return t.AllowReverseRouteOverrideType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowReverseRouteOverride == nil {
		var v bool = false
		t.AllowReverseRouteOverride = &v
	}
	for _, e := range t.SecurityPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy represents the /nokia-conf/configure/groups/group/service/vprn/ipsec/security-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy struct {
	Entry map[NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry `path:"entry" module:"nokia-conf"`
	Id    NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union                                                                                          `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) AppendEntry(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) GetId() NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry represents the /nokia-conf/configure/groups/group/service/vprn/ipsec/security-policy/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry struct {
	EntryId    NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	LocalIp    *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp      `path:"local-ip" module:"nokia-conf"`
	LocalIpv6  *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6    `path:"local-ipv6" module:"nokia-conf"`
	RemoteIp   *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp     `path:"remote-ip" module:"nokia-conf"`
	RemoteIpv6 *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6   `path:"remote-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) IsYANGGoStruct() {}

// GetOrCreateLocalIp retrieves the value of the LocalIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateLocalIp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp {
	if t.LocalIp != nil {
		return t.LocalIp
	}
	t.LocalIp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp{}
	return t.LocalIp
}

// GetOrCreateLocalIpv6 retrieves the value of the LocalIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateLocalIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 {
	if t.LocalIpv6 != nil {
		return t.LocalIpv6
	}
	t.LocalIpv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6{}
	return t.LocalIpv6
}

// GetOrCreateRemoteIp retrieves the value of the RemoteIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateRemoteIp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp {
	if t.RemoteIp != nil {
		return t.RemoteIp
	}
	t.RemoteIp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp{}
	return t.RemoteIp
}

// GetOrCreateRemoteIpv6 retrieves the value of the RemoteIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateRemoteIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 {
	if t.RemoteIpv6 != nil {
		return t.RemoteIpv6
	}
	t.RemoteIpv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6{}
	return t.RemoteIpv6
}

// GetLocalIp returns the value of the LocalIp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field LocalIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetLocalIp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp {
	if t != nil && t.LocalIp != nil {
		return t.LocalIp
	}
	return nil
}

// GetLocalIpv6 returns the value of the LocalIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field LocalIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetLocalIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 {
	if t != nil && t.LocalIpv6 != nil {
		return t.LocalIpv6
	}
	return nil
}

// GetRemoteIp returns the value of the RemoteIp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field RemoteIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetRemoteIp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp {
	if t != nil && t.RemoteIp != nil {
		return t.RemoteIp
	}
	return nil
}

// GetRemoteIpv6 returns the value of the RemoteIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field RemoteIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetRemoteIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 {
	if t != nil && t.RemoteIpv6 != nil {
		return t.RemoteIpv6
	}
	return nil
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocalIp.PopulateDefaults()
	t.LocalIpv6.PopulateDefaults()
	t.RemoteIp.PopulateDefaults()
	t.RemoteIpv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp represents the /nokia-conf/configure/groups/group/service/vprn/ipsec/security-policy/entry/local-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 represents the /nokia-conf/configure/groups/group/service/vprn/ipsec/security-policy/entry/local-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp represents the /nokia-conf/configure/groups/group/service/vprn/ipsec/security-policy/entry/remote-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 represents the /nokia-conf/configure/groups/group/service/vprn/ipsec/security-policy/entry/remote-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6 struct {
	NeighborDiscovery   *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery   `path:"neighbor-discovery" module:"nokia-conf"`
	RouterAdvertisement *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) IsYANGGoStruct() {}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) GetOrCreateRouterAdvertisement() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) GetRouterAdvertisement() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NeighborDiscovery.PopulateDefaults()
	t.RouterAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/groups/group/service/vprn/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery struct {
	ReachableTime *uint32 `path:"reachable-time" module:"nokia-conf"`
	StaleTime     *uint32 `path:"stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 30
	}
	return *t.ReachableTime
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 14400
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReachableTime == nil {
		var v uint32 = 30
		t.ReachableTime = &v
	}
	if t.StaleTime == nil {
		var v uint32 = 14400
		t.StaleTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement represents the /nokia-conf/configure/groups/group/service/vprn/ipv6/router-advertisement YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement struct {
	DnsOptions *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions           `path:"dns-options" module:"nokia-conf" yangPresence:"true"`
	Interface  map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) NewInterface(IpIntName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface)
	}

	key := IpIntName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface{
		IpIntName: &IpIntName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpIntName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) GetOrCreateInterface(IpIntName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface {

	key := IpIntName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpIntName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) GetInterface(IpIntName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface {

	if t == nil {
		return nil
	}

	key := IpIntName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) DeleteInterface(IpIntName string) {
	key := IpIntName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) error {
	if v.IpIntName == nil {
		return fmt.Errorf("invalid nil key received for IpIntName")
	}

	key := *v.IpIntName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateDnsOptions retrieves the value of the DnsOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) GetOrCreateDnsOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions {
	if t.DnsOptions != nil {
		return t.DnsOptions
	}
	t.DnsOptions = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions{}
	return t.DnsOptions
}

// GetDnsOptions returns the value of the DnsOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement. If the receiver or the field DnsOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) GetDnsOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions {
	if t != nil && t.DnsOptions != nil {
		return t.DnsOptions
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnsOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions represents the /nokia-conf/configure/groups/group/service/vprn/ipv6/router-advertisement/dns-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions struct {
	RdnssLifetime NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
	Server        []string                                                                                              `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) IsYANGGoStruct() {
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) GetRdnssLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Enum_infinite
	}
	return t.RdnssLifetime
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Enum_infinite
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface represents the /nokia-conf/configure/groups/group/service/vprn/ipv6/router-advertisement/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct {
	AdminState                 E_NokiaTypesSros_AdminState                                                                         `path:"admin-state" module:"nokia-conf"`
	CurrentHopLimit            *uint16                                                                                             `path:"current-hop-limit" module:"nokia-conf"`
	DnsOptions                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions        `path:"dns-options" module:"nokia-conf" yangPresence:"true"`
	IpIntName                  *string                                                                                             `path:"ip-int-name" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                               `path:"managed-configuration" module:"nokia-conf"`
	MaxAdvertisementInterval   *uint32                                                                                             `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval   *uint32                                                                                             `path:"min-advertisement-interval" module:"nokia-conf"`
	Mtu                        *uint32                                                                                             `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                               `path:"other-stateful-configuration" module:"nokia-conf"`
	Prefix                     map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix `path:"prefix" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                             `path:"reachable-time" module:"nokia-conf"`
	RetransmitTime             *uint32                                                                                             `path:"retransmit-time" module:"nokia-conf"`
	RouterLifetime             *uint32                                                                                             `path:"router-lifetime" module:"nokia-conf"`
	UseVirtualMac              *bool                                                                                               `path:"use-virtual-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) IsYANGGoStruct() {
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDnsOptions retrieves the value of the DnsOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetOrCreateDnsOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions {
	if t.DnsOptions != nil {
		return t.DnsOptions
	}
	t.DnsOptions = &NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions{}
	return t.DnsOptions
}

// GetDnsOptions returns the value of the DnsOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the receiver or the field DnsOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetDnsOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions {
	if t != nil && t.DnsOptions != nil {
		return t.DnsOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetCurrentHopLimit() uint16 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 600
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 200
	}
	return *t.MinAdvertisementInterval
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTime retrieves the value of the leaf RetransmitTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTime is set, it can
// safely use t.GetRetransmitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetRetransmitTime() uint32 {
	if t == nil || t.RetransmitTime == nil {
		return 0
	}
	return *t.RetransmitTime
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetRouterLifetime() uint32 {
	if t == nil || t.RouterLifetime == nil {
		return 1800
	}
	return *t.RouterLifetime
}

// GetUseVirtualMac retrieves the value of the leaf UseVirtualMac from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseVirtualMac is set, it can
// safely use t.GetUseVirtualMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseVirtualMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetUseVirtualMac() bool {
	if t == nil || t.UseVirtualMac == nil {
		return false
	}
	return *t.UseVirtualMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CurrentHopLimit == nil {
		var v uint16 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 600
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 200
		t.MinAdvertisementInterval = &v
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTime == nil {
		var v uint32 = 0
		t.RetransmitTime = &v
	}
	if t.RouterLifetime == nil {
		var v uint32 = 1800
		t.RouterLifetime = &v
	}
	if t.UseVirtualMac == nil {
		var v bool = false
		t.UseVirtualMac = &v
	}
	t.DnsOptions.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpIntName == nil {
		return nil, fmt.Errorf("nil value for key IpIntName")
	}

	return map[string]interface{}{
		"ip-int-name": *t.IpIntName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions represents the /nokia-conf/configure/groups/group/service/vprn/ipv6/router-advertisement/interface/dns-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions struct {
	IncludeRdnss  *bool                                                                                                           `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
	Server        []string                                                                                                        `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) IsYANGGoStruct() {
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return true
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetRdnssLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return nil
	}
	return t.RdnssLifetime
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = true
		t.IncludeRdnss = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/ipv6/router-advertisement/interface/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix struct {
	Autonomous        *bool                                                                                                           `path:"autonomous" module:"nokia-conf"`
	Ipv6Prefix        *string                                                                                                         `path:"ipv6-prefix" module:"nokia-conf"`
	OnLink            *bool                                                                                                           `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) IsYANGGoStruct() {
}

// GetAutonomous retrieves the value of the leaf Autonomous from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonomous is set, it can
// safely use t.GetAutonomous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonomous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetAutonomous() bool {
	if t == nil || t.Autonomous == nil {
		return true
	}
	return *t.Autonomous
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetValidLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Autonomous == nil {
		var v bool = true
		t.Autonomous = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis represents the /nokia-conf/configure/groups/group/service/vprn/isis YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct {
	AdminState                  E_NokiaTypesSros_AdminState                                                                                                              `path:"admin-state" module:"nokia-conf"`
	AdvertisePassiveOnly        *bool                                                                                                                                    `path:"advertise-passive-only" module:"nokia-conf"`
	AdvertiseRouterCapability   E_NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_AdvertiseRouterCapability                                                           `path:"advertise-router-capability" module:"nokia-conf"`
	AllL1Isis                   *string                                                                                                                                  `path:"all-l1isis" module:"nokia-conf"`
	AllL2Isis                   *string                                                                                                                                  `path:"all-l2isis" module:"nokia-conf"`
	AreaAddress                 []string                                                                                                                                 `path:"area-address" module:"nokia-conf"`
	AuthenticationCheck         *bool                                                                                                                                    `path:"authentication-check" module:"nokia-conf"`
	AuthenticationKey           *string                                                                                                                                  `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain      *string                                                                                                                                  `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType          E_NokiaTypesIsis_AuthType                                                                                                                `path:"authentication-type" module:"nokia-conf"`
	CsnpAuthentication          *bool                                                                                                                                    `path:"csnp-authentication" module:"nokia-conf"`
	DefaultRouteTag             *uint32                                                                                                                                  `path:"default-route-tag" module:"nokia-conf"`
	ExportLimit                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit                                                                          `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy                []string                                                                                                                                 `path:"export-policy" module:"nokia-conf"`
	GracefulRestart             *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart                                                                      `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	HelloAuthentication         *bool                                                                                                                                    `path:"hello-authentication" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                                                                        `path:"hello-padding" module:"nokia-conf"`
	IgnoreAttachedBit           *bool                                                                                                                                    `path:"ignore-attached-bit" module:"nokia-conf"`
	IgnoreLspErrors             *bool                                                                                                                                    `path:"ignore-lsp-errors" module:"nokia-conf"`
	IgnoreNarrowMetric          *bool                                                                                                                                    `path:"ignore-narrow-metric" module:"nokia-conf"`
	IidTlv                      *bool                                                                                                                                    `path:"iid-tlv" module:"nokia-conf"`
	ImportPolicy                []string                                                                                                                                 `path:"import-policy" module:"nokia-conf"`
	Interface                   map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface                                                                 `path:"interface" module:"nokia-conf"`
	Ipv4MulticastRouting        E_NokiaTypesIsis_RoutingTopology                                                                                                         `path:"ipv4-multicast-routing" module:"nokia-conf"`
	Ipv4Routing                 *bool                                                                                                                                    `path:"ipv4-routing" module:"nokia-conf"`
	Ipv6Routing                 E_NokiaTypesIsis_RoutingTopology                                                                                                         `path:"ipv6-routing" module:"nokia-conf"`
	IsisInstance                NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_IsisInstance_Union                                                                    `path:"isis-instance" module:"nokia-conf"`
	Level                       map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level `path:"level" module:"nokia-conf"`
	LevelCapability             E_NokiaTypesIsis_Level                                                                                                                   `path:"level-capability" module:"nokia-conf"`
	LinkGroup                   map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup                                                                 `path:"link-group" module:"nokia-conf"`
	LoopfreeAlternate           *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate                                                                    `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	LspLifetime                 *uint32                                                                                                                                  `path:"lsp-lifetime" module:"nokia-conf"`
	LspMinimumRemainingLifetime *uint32                                                                                                                                  `path:"lsp-minimum-remaining-lifetime" module:"nokia-conf"`
	LspMtuSize                  *int32                                                                                                                                   `path:"lsp-mtu-size" module:"nokia-conf"`
	LspRefresh                  *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh                                                                           `path:"lsp-refresh" module:"nokia-conf"`
	MruMismatchDetection        *bool                                                                                                                                    `path:"mru-mismatch-detection" module:"nokia-conf"`
	MultiTopology               *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology                                                                        `path:"multi-topology" module:"nokia-conf" yangPresence:"true"`
	MulticastImport             *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport                                                                      `path:"multicast-import" module:"nokia-conf"`
	Overload                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload                                                                             `path:"overload" module:"nokia-conf" yangPresence:"true"`
	OverloadExportExternal      *bool                                                                                                                                    `path:"overload-export-external" module:"nokia-conf"`
	OverloadExportInterlevel    *bool                                                                                                                                    `path:"overload-export-interlevel" module:"nokia-conf"`
	OverloadOnBoot              *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot                                                                       `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	PoiTlv                      *bool                                                                                                                                    `path:"poi-tlv" module:"nokia-conf"`
	PrefixAttributesTlv         *bool                                                                                                                                    `path:"prefix-attributes-tlv" module:"nokia-conf"`
	PrefixLimit                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit                                                                          `path:"prefix-limit" module:"nokia-conf" yangPresence:"true"`
	PsnpAuthentication          *bool                                                                                                                                    `path:"psnp-authentication" module:"nokia-conf"`
	ReferenceBandwidth          *uint64                                                                                                                                  `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority                                                                          `path:"rib-priority" module:"nokia-conf"`
	RouterId                    *string                                                                                                                                  `path:"router-id" module:"nokia-conf"`
	StandardMultiInstance       *bool                                                                                                                                    `path:"standard-multi-instance" module:"nokia-conf"`
	StrictAdjacencyCheck        *bool                                                                                                                                    `path:"strict-adjacency-check" module:"nokia-conf"`
	SummaryAddress              map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress                                                            `path:"summary-address" module:"nokia-conf"`
	SuppressAttachedBit         *bool                                                                                                                                    `path:"suppress-attached-bit" module:"nokia-conf"`
	SystemId                    *string                                                                                                                                  `path:"system-id" module:"nokia-conf"`
	Timers                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers                                                                               `path:"timers" module:"nokia-conf"`
	UnicastImport               *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport                                                                        `path:"unicast-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) AppendLevel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewLinkGroup creates a new entry in the LinkGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) NewLinkGroup(LinkGroupName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkGroup == nil {
		t.LinkGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup)
	}

	key := LinkGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LinkGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LinkGroup", key)
	}

	t.LinkGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup{
		LinkGroupName: &LinkGroupName,
	}

	return t.LinkGroup[key], nil
}

// RenameLinkGroup renames an entry in the list LinkGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) RenameLinkGroup(oldK, newK string) error {
	if _, ok := t.LinkGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in LinkGroup", newK)
	}

	e, ok := t.LinkGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LinkGroup", oldK)
	}
	e.LinkGroupName = &newK

	t.LinkGroup[newK] = e
	delete(t.LinkGroup, oldK)
	return nil
}

// GetOrCreateLinkGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateLinkGroup(LinkGroupName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup {

	key := LinkGroupName

	if v, ok := t.LinkGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLinkGroup(LinkGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLinkGroup got unexpected error: %v", err))
	}
	return v
}

// GetLinkGroup retrieves the value with the specified key from
// the LinkGroup map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLinkGroup(LinkGroupName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup {

	if t == nil {
		return nil
	}

	key := LinkGroupName

	if lm, ok := t.LinkGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteLinkGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) DeleteLinkGroup(LinkGroupName string) {
	key := LinkGroupName

	delete(t.LinkGroup, key)
}

// AppendLinkGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup struct to the
// list LinkGroup of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) AppendLinkGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) error {
	if v.LinkGroupName == nil {
		return fmt.Errorf("invalid nil key received for LinkGroupName")
	}

	key := *v.LinkGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkGroup == nil {
		t.LinkGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup)
	}

	if _, ok := t.LinkGroup[key]; ok {
		return fmt.Errorf("duplicate key for list LinkGroup %v", key)
	}

	t.LinkGroup[key] = v
	return nil
}

// NewSummaryAddress creates a new entry in the SummaryAddress list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) NewSummaryAddress(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryAddress", key)
	}

	t.SummaryAddress[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress{
		IpPrefix: &IpPrefix,
	}

	return t.SummaryAddress[key], nil
}

// RenameSummaryAddress renames an entry in the list SummaryAddress within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) RenameSummaryAddress(oldK, newK string) error {
	if _, ok := t.SummaryAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryAddress", newK)
	}

	e, ok := t.SummaryAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryAddress", oldK)
	}
	e.IpPrefix = &newK

	t.SummaryAddress[newK] = e
	delete(t.SummaryAddress, oldK)
	return nil
}

// GetOrCreateSummaryAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateSummaryAddress(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress {

	key := IpPrefix

	if v, ok := t.SummaryAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryAddress(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryAddress got unexpected error: %v", err))
	}
	return v
}

// GetSummaryAddress retrieves the value with the specified key from
// the SummaryAddress map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetSummaryAddress(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SummaryAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSummaryAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) DeleteSummaryAddress(IpPrefix string) {
	key := IpPrefix

	delete(t.SummaryAddress, key)
}

// AppendSummaryAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress struct to the
// list SummaryAddress of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) AppendSummaryAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress)
	}

	if _, ok := t.SummaryAddress[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryAddress %v", key)
	}

	t.SummaryAddress[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateExportLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateLspRefresh retrieves the value of the LspRefresh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateLspRefresh() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh {
	if t.LspRefresh != nil {
		return t.LspRefresh
	}
	t.LspRefresh = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh{}
	return t.LspRefresh
}

// GetOrCreateMultiTopology retrieves the value of the MultiTopology field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateMultiTopology() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology {
	if t.MultiTopology != nil {
		return t.MultiTopology
	}
	t.MultiTopology = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology{}
	return t.MultiTopology
}

// GetOrCreateMulticastImport retrieves the value of the MulticastImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateMulticastImport() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport {
	if t.MulticastImport != nil {
		return t.MulticastImport
	}
	t.MulticastImport = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport{}
	return t.MulticastImport
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateOverload() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload{}
	return t.Overload
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreatePrefixLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit{}
	return t.PrefixLimit
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateRibPriority() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority{}
	return t.RibPriority
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers{}
	return t.Timers
}

// GetOrCreateUnicastImport retrieves the value of the UnicastImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOrCreateUnicastImport() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport {
	if t.UnicastImport != nil {
		return t.UnicastImport
	}
	t.UnicastImport = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport{}
	return t.UnicastImport
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetExportLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetLspRefresh returns the value of the LspRefresh struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field LspRefresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLspRefresh() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh {
	if t != nil && t.LspRefresh != nil {
		return t.LspRefresh
	}
	return nil
}

// GetMultiTopology returns the value of the MultiTopology struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field MultiTopology is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetMultiTopology() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology {
	if t != nil && t.MultiTopology != nil {
		return t.MultiTopology
	}
	return nil
}

// GetMulticastImport returns the value of the MulticastImport struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field MulticastImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetMulticastImport() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport {
	if t != nil && t.MulticastImport != nil {
		return t.MulticastImport
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOverload() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetPrefixLimit() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetRibPriority() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetTimers() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetUnicastImport returns the value of the UnicastImport struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis. If the receiver or the field UnicastImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetUnicastImport() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport {
	if t != nil && t.UnicastImport != nil {
		return t.UnicastImport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertisePassiveOnly retrieves the value of the leaf AdvertisePassiveOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisePassiveOnly is set, it can
// safely use t.GetAdvertisePassiveOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisePassiveOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAdvertisePassiveOnly() bool {
	if t == nil || t.AdvertisePassiveOnly == nil {
		return false
	}
	return *t.AdvertisePassiveOnly
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAdvertiseRouterCapability() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_AdvertiseRouterCapability {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return 0
	}
	return t.AdvertiseRouterCapability
}

// GetAllL1Isis retrieves the value of the leaf AllL1Isis from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllL1Isis is set, it can
// safely use t.GetAllL1Isis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllL1Isis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAllL1Isis() string {
	if t == nil || t.AllL1Isis == nil {
		return "01:80:C2:00:00:14"
	}
	return *t.AllL1Isis
}

// GetAllL2Isis retrieves the value of the leaf AllL2Isis from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllL2Isis is set, it can
// safely use t.GetAllL2Isis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllL2Isis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAllL2Isis() string {
	if t == nil || t.AllL2Isis == nil {
		return "01:80:C2:00:00:15"
	}
	return *t.AllL2Isis
}

// GetAreaAddress retrieves the value of the leaf AreaAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaAddress is set, it can
// safely use t.GetAreaAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAreaAddress() []string {
	if t == nil || t.AreaAddress == nil {
		return nil
	}
	return t.AreaAddress
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetCsnpAuthentication retrieves the value of the leaf CsnpAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpAuthentication is set, it can
// safely use t.GetCsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetCsnpAuthentication() bool {
	if t == nil || t.CsnpAuthentication == nil {
		return true
	}
	return *t.CsnpAuthentication
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetDefaultRouteTag() uint32 {
	if t == nil || t.DefaultRouteTag == nil {
		return 0
	}
	return *t.DefaultRouteTag
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetIgnoreAttachedBit retrieves the value of the leaf IgnoreAttachedBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreAttachedBit is set, it can
// safely use t.GetIgnoreAttachedBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreAttachedBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIgnoreAttachedBit() bool {
	if t == nil || t.IgnoreAttachedBit == nil {
		return false
	}
	return *t.IgnoreAttachedBit
}

// GetIgnoreLspErrors retrieves the value of the leaf IgnoreLspErrors from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreLspErrors is set, it can
// safely use t.GetIgnoreLspErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreLspErrors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIgnoreLspErrors() bool {
	if t == nil || t.IgnoreLspErrors == nil {
		return false
	}
	return *t.IgnoreLspErrors
}

// GetIgnoreNarrowMetric retrieves the value of the leaf IgnoreNarrowMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNarrowMetric is set, it can
// safely use t.GetIgnoreNarrowMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNarrowMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIgnoreNarrowMetric() bool {
	if t == nil || t.IgnoreNarrowMetric == nil {
		return false
	}
	return *t.IgnoreNarrowMetric
}

// GetIidTlv retrieves the value of the leaf IidTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IidTlv is set, it can
// safely use t.GetIidTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IidTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIidTlv() bool {
	if t == nil || t.IidTlv == nil {
		return false
	}
	return *t.IidTlv
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpv4MulticastRouting retrieves the value of the leaf Ipv4MulticastRouting from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastRouting is set, it can
// safely use t.GetIpv4MulticastRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIpv4MulticastRouting() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv4MulticastRouting == 0 {
		return NokiaTypesIsis_RoutingTopology_native
	}
	return t.Ipv4MulticastRouting
}

// GetIpv4Routing retrieves the value of the leaf Ipv4Routing from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Routing is set, it can
// safely use t.GetIpv4Routing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Routing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIpv4Routing() bool {
	if t == nil || t.Ipv4Routing == nil {
		return true
	}
	return *t.Ipv4Routing
}

// GetIpv6Routing retrieves the value of the leaf Ipv6Routing from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Routing is set, it can
// safely use t.GetIpv6Routing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Routing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIpv6Routing() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv6Routing == 0 {
		return NokiaTypesIsis_RoutingTopology_false
	}
	return t.Ipv6Routing
}

// GetIsisInstance retrieves the value of the leaf IsisInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsisInstance is set, it can
// safely use t.GetIsisInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsisInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetIsisInstance() NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_IsisInstance_Union {
	if t == nil || t.IsisInstance == nil {
		return nil
	}
	return t.IsisInstance
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLspLifetime retrieves the value of the leaf LspLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetime is set, it can
// safely use t.GetLspLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLspLifetime() uint32 {
	if t == nil || t.LspLifetime == nil {
		return 1200
	}
	return *t.LspLifetime
}

// GetLspMinimumRemainingLifetime retrieves the value of the leaf LspMinimumRemainingLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMinimumRemainingLifetime is set, it can
// safely use t.GetLspMinimumRemainingLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMinimumRemainingLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLspMinimumRemainingLifetime() uint32 {
	if t == nil || t.LspMinimumRemainingLifetime == nil {
		return 0
	}
	return *t.LspMinimumRemainingLifetime
}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetLspMtuSize() int32 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// GetMruMismatchDetection retrieves the value of the leaf MruMismatchDetection from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MruMismatchDetection is set, it can
// safely use t.GetMruMismatchDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MruMismatchDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetMruMismatchDetection() bool {
	if t == nil || t.MruMismatchDetection == nil {
		return false
	}
	return *t.MruMismatchDetection
}

// GetOverloadExportExternal retrieves the value of the leaf OverloadExportExternal from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadExportExternal is set, it can
// safely use t.GetOverloadExportExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadExportExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOverloadExportExternal() bool {
	if t == nil || t.OverloadExportExternal == nil {
		return false
	}
	return *t.OverloadExportExternal
}

// GetOverloadExportInterlevel retrieves the value of the leaf OverloadExportInterlevel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadExportInterlevel is set, it can
// safely use t.GetOverloadExportInterlevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadExportInterlevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetOverloadExportInterlevel() bool {
	if t == nil || t.OverloadExportInterlevel == nil {
		return false
	}
	return *t.OverloadExportInterlevel
}

// GetPoiTlv retrieves the value of the leaf PoiTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoiTlv is set, it can
// safely use t.GetPoiTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoiTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetPoiTlv() bool {
	if t == nil || t.PoiTlv == nil {
		return false
	}
	return *t.PoiTlv
}

// GetPrefixAttributesTlv retrieves the value of the leaf PrefixAttributesTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixAttributesTlv is set, it can
// safely use t.GetPrefixAttributesTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixAttributesTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetPrefixAttributesTlv() bool {
	if t == nil || t.PrefixAttributesTlv == nil {
		return false
	}
	return *t.PrefixAttributesTlv
}

// GetPsnpAuthentication retrieves the value of the leaf PsnpAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsnpAuthentication is set, it can
// safely use t.GetPsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetPsnpAuthentication() bool {
	if t == nil || t.PsnpAuthentication == nil {
		return true
	}
	return *t.PsnpAuthentication
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 0
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetStandardMultiInstance retrieves the value of the leaf StandardMultiInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandardMultiInstance is set, it can
// safely use t.GetStandardMultiInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandardMultiInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetStandardMultiInstance() bool {
	if t == nil || t.StandardMultiInstance == nil {
		return false
	}
	return *t.StandardMultiInstance
}

// GetStrictAdjacencyCheck retrieves the value of the leaf StrictAdjacencyCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictAdjacencyCheck is set, it can
// safely use t.GetStrictAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictAdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetStrictAdjacencyCheck() bool {
	if t == nil || t.StrictAdjacencyCheck == nil {
		return false
	}
	return *t.StrictAdjacencyCheck
}

// GetSuppressAttachedBit retrieves the value of the leaf SuppressAttachedBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressAttachedBit is set, it can
// safely use t.GetSuppressAttachedBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressAttachedBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetSuppressAttachedBit() bool {
	if t == nil || t.SuppressAttachedBit == nil {
		return false
	}
	return *t.SuppressAttachedBit
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return "0000.0000.0000"
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertisePassiveOnly == nil {
		var v bool = false
		t.AdvertisePassiveOnly = &v
	}
	if t.AllL1Isis == nil {
		var v string = "01:80:C2:00:00:14"
		t.AllL1Isis = &v
	}
	if t.AllL2Isis == nil {
		var v string = "01:80:C2:00:00:15"
		t.AllL2Isis = &v
	}
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	if t.CsnpAuthentication == nil {
		var v bool = true
		t.CsnpAuthentication = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.IgnoreAttachedBit == nil {
		var v bool = false
		t.IgnoreAttachedBit = &v
	}
	if t.IgnoreLspErrors == nil {
		var v bool = false
		t.IgnoreLspErrors = &v
	}
	if t.IgnoreNarrowMetric == nil {
		var v bool = false
		t.IgnoreNarrowMetric = &v
	}
	if t.IidTlv == nil {
		var v bool = false
		t.IidTlv = &v
	}
	if t.Ipv4MulticastRouting == 0 {
		t.Ipv4MulticastRouting = NokiaTypesIsis_RoutingTopology_native
	}
	if t.Ipv4Routing == nil {
		var v bool = true
		t.Ipv4Routing = &v
	}
	if t.Ipv6Routing == 0 {
		t.Ipv6Routing = NokiaTypesIsis_RoutingTopology_false
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.LspLifetime == nil {
		var v uint32 = 1200
		t.LspLifetime = &v
	}
	if t.LspMtuSize == nil {
		var v int32 = 1492
		t.LspMtuSize = &v
	}
	if t.MruMismatchDetection == nil {
		var v bool = false
		t.MruMismatchDetection = &v
	}
	if t.OverloadExportExternal == nil {
		var v bool = false
		t.OverloadExportExternal = &v
	}
	if t.OverloadExportInterlevel == nil {
		var v bool = false
		t.OverloadExportInterlevel = &v
	}
	if t.PoiTlv == nil {
		var v bool = false
		t.PoiTlv = &v
	}
	if t.PrefixAttributesTlv == nil {
		var v bool = false
		t.PrefixAttributesTlv = &v
	}
	if t.PsnpAuthentication == nil {
		var v bool = true
		t.PsnpAuthentication = &v
	}
	if t.StandardMultiInstance == nil {
		var v bool = false
		t.StandardMultiInstance = &v
	}
	if t.StrictAdjacencyCheck == nil {
		var v bool = false
		t.StrictAdjacencyCheck = &v
	}
	if t.SuppressAttachedBit == nil {
		var v bool = false
		t.SuppressAttachedBit = &v
	}
	if t.SystemId == nil {
		var v string = "0000.0000.0000"
		t.SystemId = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.LspRefresh.PopulateDefaults()
	t.MultiTopology.PopulateDefaults()
	t.MulticastImport.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.UnicastImport.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.LinkGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SummaryAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"isis-instance": t.IsisInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit represents the /nokia-conf/configure/groups/group/service/vprn/isis/export-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart represents the /nokia-conf/configure/groups/group/service/vprn/isis/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart struct {
	HelperMode *bool `path:"helper-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface struct {
	AdminState                  E_NokiaTypesSros_AdminState                                                                                                                                  `path:"admin-state" module:"nokia-conf"`
	BfdLiveness                 *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness                                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	CsnpInterval                *uint32                                                                                                                                                      `path:"csnp-interval" module:"nokia-conf"`
	DefaultInstance             *bool                                                                                                                                                        `path:"default-instance" module:"nokia-conf"`
	HelloAuthentication         *bool                                                                                                                                                        `path:"hello-authentication" module:"nokia-conf"`
	HelloAuthenticationKey      *string                                                                                                                                                      `path:"hello-authentication-key" module:"nokia-conf"`
	HelloAuthenticationKeychain *string                                                                                                                                                      `path:"hello-authentication-keychain" module:"nokia-conf"`
	HelloAuthenticationType     E_NokiaTypesIsis_AuthType                                                                                                                                    `path:"hello-authentication-type" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                                                                                            `path:"hello-padding" module:"nokia-conf"`
	InterfaceName               *string                                                                                                                                                      `path:"interface-name" module:"nokia-conf"`
	InterfaceType               E_NokiaTypesIsis_InterfaceType                                                                                                                               `path:"interface-type" module:"nokia-conf"`
	Ipv4Multicast               *bool                                                                                                                                                        `path:"ipv4-multicast" module:"nokia-conf"`
	Ipv6Unicast                 *bool                                                                                                                                                        `path:"ipv6-unicast" module:"nokia-conf"`
	Level                       map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level `path:"level" module:"nokia-conf"`
	LevelCapability             E_NokiaTypesIsis_Level                                                                                                                                       `path:"level-capability" module:"nokia-conf"`
	LoadBalancingWeight         *uint32                                                                                                                                                      `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate           *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate                                                                              `path:"loopfree-alternate" module:"nokia-conf"`
	LspPacingInterval           *uint32                                                                                                                                                      `path:"lsp-pacing-interval" module:"nokia-conf"`
	MeshGroup                   *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup                                                                                      `path:"mesh-group" module:"nokia-conf" yangPresence:"true"`
	Passive                     *bool                                                                                                                                                        `path:"passive" module:"nokia-conf"`
	RetransmitInterval          *uint32                                                                                                                                                      `path:"retransmit-interval" module:"nokia-conf"`
	Tag                         *uint32                                                                                                                                                      `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) AppendLevel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateMeshGroup retrieves the value of the MeshGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetOrCreateMeshGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup {
	if t.MeshGroup != nil {
		return t.MeshGroup
	}
	t.MeshGroup = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup{}
	return t.MeshGroup
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetMeshGroup returns the value of the MeshGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface. If the receiver or the field MeshGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetMeshGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup {
	if t != nil && t.MeshGroup != nil {
		return t.MeshGroup
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCsnpInterval retrieves the value of the leaf CsnpInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpInterval is set, it can
// safely use t.GetCsnpInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetCsnpInterval() uint32 {
	if t == nil || t.CsnpInterval == nil {
		return 10
	}
	return *t.CsnpInterval
}

// GetDefaultInstance retrieves the value of the leaf DefaultInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultInstance is set, it can
// safely use t.GetDefaultInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetDefaultInstance() bool {
	if t == nil || t.DefaultInstance == nil {
		return false
	}
	return *t.DefaultInstance
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloAuthenticationKey retrieves the value of the leaf HelloAuthenticationKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKey is set, it can
// safely use t.GetHelloAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetHelloAuthenticationKey() string {
	if t == nil || t.HelloAuthenticationKey == nil {
		return ""
	}
	return *t.HelloAuthenticationKey
}

// GetHelloAuthenticationKeychain retrieves the value of the leaf HelloAuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKeychain is set, it can
// safely use t.GetHelloAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetHelloAuthenticationKeychain() string {
	if t == nil || t.HelloAuthenticationKeychain == nil {
		return ""
	}
	return *t.HelloAuthenticationKeychain
}

// GetHelloAuthenticationType retrieves the value of the leaf HelloAuthenticationType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationType is set, it can
// safely use t.GetHelloAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetHelloAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.HelloAuthenticationType == 0 {
		return 0
	}
	return t.HelloAuthenticationType
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetInterfaceType() E_NokiaTypesIsis_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetIpv4Multicast retrieves the value of the leaf Ipv4Multicast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Multicast is set, it can
// safely use t.GetIpv4Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetIpv4Multicast() bool {
	if t == nil || t.Ipv4Multicast == nil {
		return true
	}
	return *t.Ipv4Multicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return true
	}
	return *t.Ipv6Unicast
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetLspPacingInterval() uint32 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CsnpInterval == nil {
		var v uint32 = 10
		t.CsnpInterval = &v
	}
	if t.DefaultInstance == nil {
		var v bool = false
		t.DefaultInstance = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.Ipv4Multicast == nil {
		var v bool = true
		t.Ipv4Multicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = true
		t.Ipv6Unicast = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.LspPacingInterval == nil {
		var v uint32 = 100
		t.LspPacingInterval = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.MeshGroup.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/bfd-liveness/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 struct {
	IncludeBfdTlv *bool `path:"include-bfd-tlv" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) IsYANGGoStruct() {
}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/bfd-liveness/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 struct {
	IncludeBfdTlv *bool `path:"include-bfd-tlv" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) IsYANGGoStruct() {
}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level struct {
	HelloAuthenticationKey      *string                                                                              `path:"hello-authentication-key" module:"nokia-conf"`
	HelloAuthenticationKeychain *string                                                                              `path:"hello-authentication-keychain" module:"nokia-conf"`
	HelloAuthenticationType     E_NokiaTypesIsis_AuthType                                                            `path:"hello-authentication-type" module:"nokia-conf"`
	HelloInterval               *uint32                                                                              `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier             *int32                                                                               `path:"hello-multiplier" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                    `path:"hello-padding" module:"nokia-conf"`
	Ipv4MulticastMetric         *uint32                                                                              `path:"ipv4-multicast-metric" module:"nokia-conf"`
	Ipv6UnicastMetric           *uint32                                                                              `path:"ipv6-unicast-metric" module:"nokia-conf"`
	LevelNumber                 NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union `path:"level-number" module:"nokia-conf"`
	Metric                      *uint32                                                                              `path:"metric" module:"nokia-conf"`
	Passive                     *bool                                                                                `path:"passive" module:"nokia-conf"`
	Priority                    *uint32                                                                              `path:"priority" module:"nokia-conf"`
	SdOffset                    *uint32                                                                              `path:"sd-offset" module:"nokia-conf"`
	SfOffset                    *uint32                                                                              `path:"sf-offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) IsYANGGoStruct() {}

// GetHelloAuthenticationKey retrieves the value of the leaf HelloAuthenticationKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKey is set, it can
// safely use t.GetHelloAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetHelloAuthenticationKey() string {
	if t == nil || t.HelloAuthenticationKey == nil {
		return ""
	}
	return *t.HelloAuthenticationKey
}

// GetHelloAuthenticationKeychain retrieves the value of the leaf HelloAuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKeychain is set, it can
// safely use t.GetHelloAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetHelloAuthenticationKeychain() string {
	if t == nil || t.HelloAuthenticationKeychain == nil {
		return ""
	}
	return *t.HelloAuthenticationKeychain
}

// GetHelloAuthenticationType retrieves the value of the leaf HelloAuthenticationType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationType is set, it can
// safely use t.GetHelloAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetHelloAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.HelloAuthenticationType == 0 {
		return 0
	}
	return t.HelloAuthenticationType
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetHelloMultiplier() int32 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetIpv4MulticastMetric retrieves the value of the leaf Ipv4MulticastMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastMetric is set, it can
// safely use t.GetIpv4MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetIpv4MulticastMetric() uint32 {
	if t == nil || t.Ipv4MulticastMetric == nil {
		return 0
	}
	return *t.Ipv4MulticastMetric
}

// GetIpv6UnicastMetric retrieves the value of the leaf Ipv6UnicastMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetric is set, it can
// safely use t.GetIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetIpv6UnicastMetric() uint32 {
	if t == nil || t.Ipv6UnicastMetric == nil {
		return 0
	}
	return *t.Ipv6UnicastMetric
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 64
	}
	return *t.Priority
}

// GetSdOffset retrieves the value of the leaf SdOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdOffset is set, it can
// safely use t.GetSdOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetSdOffset() uint32 {
	if t == nil || t.SdOffset == nil {
		return 0
	}
	return *t.SdOffset
}

// GetSfOffset retrieves the value of the leaf SfOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfOffset is set, it can
// safely use t.GetSfOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) GetSfOffset() uint32 {
	if t == nil || t.SfOffset == nil {
		return 0
	}
	return *t.SfOffset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v int32 = 3
		t.HelloMultiplier = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.Priority == nil {
		var v uint32 = 64
		t.Priority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                                     `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) IsYANGGoStruct() {
}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup represents the /nokia-conf/configure/groups/group/service/vprn/isis/interface/mesh-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup struct {
	Blocked YANGEmpty `path:"blocked" module:"nokia-conf"`
	Value   *int32    `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) IsYANGGoStruct() {}

// GetBlocked retrieves the value of the leaf Blocked from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blocked is set, it can
// safely use t.GetBlocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) GetBlocked() YANGEmpty {
	if t == nil || t.Blocked == false {
		return false
	}
	return t.Blocked
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Interface_MeshGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level represents the /nokia-conf/configure/groups/group/service/vprn/isis/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level struct {
	AdvertiseRouterCapability  *bool                                                                      `path:"advertise-router-capability" module:"nokia-conf"`
	AuthenticationKey          *string                                                                    `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain     *string                                                                    `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType         E_NokiaTypesIsis_AuthType                                                  `path:"authentication-type" module:"nokia-conf"`
	CsnpAuthentication         *bool                                                                      `path:"csnp-authentication" module:"nokia-conf"`
	DefaultIpv4MulticastMetric *uint32                                                                    `path:"default-ipv4-multicast-metric" module:"nokia-conf"`
	DefaultIpv6UnicastMetric   *uint32                                                                    `path:"default-ipv6-unicast-metric" module:"nokia-conf"`
	DefaultMetric              *uint32                                                                    `path:"default-metric" module:"nokia-conf"`
	ExternalPreference         *uint32                                                                    `path:"external-preference" module:"nokia-conf"`
	HelloAuthentication        *bool                                                                      `path:"hello-authentication" module:"nokia-conf"`
	HelloPadding               E_NokiaTypesIsis_HelloPaddingType                                          `path:"hello-padding" module:"nokia-conf"`
	LevelNumber                NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union `path:"level-number" module:"nokia-conf"`
	LoopfreeAlternateExclude   *bool                                                                      `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	LspMtuSize                 *int32                                                                     `path:"lsp-mtu-size" module:"nokia-conf"`
	Preference                 *uint32                                                                    `path:"preference" module:"nokia-conf"`
	PsnpAuthentication         *bool                                                                      `path:"psnp-authentication" module:"nokia-conf"`
	WideMetricsOnly            *bool                                                                      `path:"wide-metrics-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) IsYANGGoStruct() {}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetCsnpAuthentication retrieves the value of the leaf CsnpAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpAuthentication is set, it can
// safely use t.GetCsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetCsnpAuthentication() bool {
	if t == nil || t.CsnpAuthentication == nil {
		return true
	}
	return *t.CsnpAuthentication
}

// GetDefaultIpv4MulticastMetric retrieves the value of the leaf DefaultIpv4MulticastMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv4MulticastMetric is set, it can
// safely use t.GetDefaultIpv4MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv4MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetDefaultIpv4MulticastMetric() uint32 {
	if t == nil || t.DefaultIpv4MulticastMetric == nil {
		return 10
	}
	return *t.DefaultIpv4MulticastMetric
}

// GetDefaultIpv6UnicastMetric retrieves the value of the leaf DefaultIpv6UnicastMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv6UnicastMetric is set, it can
// safely use t.GetDefaultIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetDefaultIpv6UnicastMetric() uint32 {
	if t == nil || t.DefaultIpv6UnicastMetric == nil {
		return 10
	}
	return *t.DefaultIpv6UnicastMetric
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 10
	}
	return *t.DefaultMetric
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetExternalPreference() uint32 {
	if t == nil || t.ExternalPreference == nil {
		return 0
	}
	return *t.ExternalPreference
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetLspMtuSize() int32 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetPsnpAuthentication retrieves the value of the leaf PsnpAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsnpAuthentication is set, it can
// safely use t.GetPsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetPsnpAuthentication() bool {
	if t == nil || t.PsnpAuthentication == nil {
		return true
	}
	return *t.PsnpAuthentication
}

// GetWideMetricsOnly retrieves the value of the leaf WideMetricsOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WideMetricsOnly is set, it can
// safely use t.GetWideMetricsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WideMetricsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) GetWideMetricsOnly() bool {
	if t == nil || t.WideMetricsOnly == nil {
		return false
	}
	return *t.WideMetricsOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.CsnpAuthentication == nil {
		var v bool = true
		t.CsnpAuthentication = &v
	}
	if t.DefaultIpv4MulticastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv4MulticastMetric = &v
	}
	if t.DefaultIpv6UnicastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv6UnicastMetric = &v
	}
	if t.DefaultMetric == nil {
		var v uint32 = 10
		t.DefaultMetric = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	if t.LspMtuSize == nil {
		var v int32 = 1492
		t.LspMtuSize = &v
	}
	if t.PsnpAuthentication == nil {
		var v bool = true
		t.PsnpAuthentication = &v
	}
	if t.WideMetricsOnly == nil {
		var v bool = false
		t.WideMetricsOnly = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup represents the /nokia-conf/configure/groups/group/service/vprn/isis/link-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup struct {
	Description   *string                                                                                                                                                      `path:"description" module:"nokia-conf"`
	Level         map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level `path:"level" module:"nokia-conf"`
	LinkGroupName *string                                                                                                                                                      `path:"link-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) AppendLevel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkGroupName retrieves the value of the leaf LinkGroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkGroupName is set, it can
// safely use t.GetLinkGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) GetLinkGroupName() string {
	if t == nil || t.LinkGroupName == nil {
		return ""
	}
	return *t.LinkGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkGroupName == nil {
		return nil, fmt.Errorf("nil value for key LinkGroupName")
	}

	return map[string]interface{}{
		"link-group-name": *t.LinkGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level represents the /nokia-conf/configure/groups/group/service/vprn/isis/link-group/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level struct {
	Ipv4MulticastMetricOffset *uint32                                                                               `path:"ipv4-multicast-metric-offset" module:"nokia-conf"`
	Ipv4UnicastMetricOffset   *uint32                                                                               `path:"ipv4-unicast-metric-offset" module:"nokia-conf"`
	Ipv6UnicastMetricOffset   *uint32                                                                               `path:"ipv6-unicast-metric-offset" module:"nokia-conf"`
	LevelNumber               NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union  `path:"level-number" module:"nokia-conf"`
	Member                    map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member `path:"member" module:"nokia-conf"`
	OperMembers               *uint32                                                                               `path:"oper-members" module:"nokia-conf"`
	RevertMembers             *uint32                                                                               `path:"revert-members" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) NewMember(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member{
		InterfaceName: &InterfaceName,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.InterfaceName = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetOrCreateMember(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member {

	key := InterfaceName

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetMember(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) DeleteMember(InterfaceName string) {
	key := InterfaceName

	delete(t.Member, key)
}

// AppendMember appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member struct to the
// list Member of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) AppendMember(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetIpv4MulticastMetricOffset retrieves the value of the leaf Ipv4MulticastMetricOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastMetricOffset is set, it can
// safely use t.GetIpv4MulticastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetIpv4MulticastMetricOffset() uint32 {
	if t == nil || t.Ipv4MulticastMetricOffset == nil {
		return 0
	}
	return *t.Ipv4MulticastMetricOffset
}

// GetIpv4UnicastMetricOffset retrieves the value of the leaf Ipv4UnicastMetricOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4UnicastMetricOffset is set, it can
// safely use t.GetIpv4UnicastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4UnicastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetIpv4UnicastMetricOffset() uint32 {
	if t == nil || t.Ipv4UnicastMetricOffset == nil {
		return 0
	}
	return *t.Ipv4UnicastMetricOffset
}

// GetIpv6UnicastMetricOffset retrieves the value of the leaf Ipv6UnicastMetricOffset from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetricOffset is set, it can
// safely use t.GetIpv6UnicastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetIpv6UnicastMetricOffset() uint32 {
	if t == nil || t.Ipv6UnicastMetricOffset == nil {
		return 0
	}
	return *t.Ipv6UnicastMetricOffset
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetOperMembers retrieves the value of the leaf OperMembers from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperMembers is set, it can
// safely use t.GetOperMembers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperMembers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetOperMembers() uint32 {
	if t == nil || t.OperMembers == nil {
		return 0
	}
	return *t.OperMembers
}

// GetRevertMembers retrieves the value of the leaf RevertMembers from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertMembers is set, it can
// safely use t.GetRevertMembers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertMembers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) GetRevertMembers() uint32 {
	if t == nil || t.RevertMembers == nil {
		return 0
	}
	return *t.RevertMembers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member represents the /nokia-conf/configure/groups/group/service/vprn/isis/link-group/level/member YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LinkGroup_Level_Member) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/service/vprn/isis/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate struct {
	Exclude *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exclude.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/groups/group/service/vprn/isis/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) IsYANGGoStruct() {
}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh represents the /nokia-conf/configure/groups/group/service/vprn/isis/lsp-refresh YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh struct {
	HalfLifetime *bool   `path:"half-lifetime" module:"nokia-conf"`
	Interval     *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) IsYANGGoStruct() {}

// GetHalfLifetime retrieves the value of the leaf HalfLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLifetime is set, it can
// safely use t.GetHalfLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) GetHalfLifetime() bool {
	if t == nil || t.HalfLifetime == nil {
		return true
	}
	return *t.HalfLifetime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 600
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HalfLifetime == nil {
		var v bool = true
		t.HalfLifetime = &v
	}
	if t.Interval == nil {
		var v uint32 = 600
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_LspRefresh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology represents the /nokia-conf/configure/groups/group/service/vprn/isis/multi-topology YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology struct {
	Ipv4Multicast *bool `path:"ipv4-multicast" module:"nokia-conf"`
	Ipv6Unicast   *bool `path:"ipv6-unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) IsYANGGoStruct() {}

// GetIpv4Multicast retrieves the value of the leaf Ipv4Multicast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Multicast is set, it can
// safely use t.GetIpv4Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) GetIpv4Multicast() bool {
	if t == nil || t.Ipv4Multicast == nil {
		return false
	}
	return *t.Ipv4Multicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Multicast == nil {
		var v bool = false
		t.Ipv4Multicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = false
		t.Ipv6Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MultiTopology) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport represents the /nokia-conf/configure/groups/group/service/vprn/isis/multicast-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_MulticastImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload represents the /nokia-conf/configure/groups/group/service/vprn/isis/overload YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload struct {
	MaxMetric *bool `path:"max-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Overload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot represents the /nokia-conf/configure/groups/group/service/vprn/isis/overload-on-boot YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot struct {
	MaxMetric *bool   `path:"max-metric" module:"nokia-conf"`
	Timeout   *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit represents the /nokia-conf/configure/groups/group/service/vprn/isis/prefix-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit struct {
	Limit            *uint32                                                                              `path:"limit" module:"nokia-conf"`
	LogOnly          *bool                                                                                `path:"log-only" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                              `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) IsYANGGoStruct() {}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) GetOverloadTimeout() NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority represents the /nokia-conf/configure/groups/group/service/vprn/isis/rib-priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority struct {
	High *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) GetHigh() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High represents the /nokia-conf/configure/groups/group/service/vprn/isis/rib-priority/high YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
	Tag        *uint32 `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_RibPriority_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress represents the /nokia-conf/configure/groups/group/service/vprn/isis/summary-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress struct {
	IpPrefix        *string                `path:"ip-prefix" module:"nokia-conf"`
	LevelCapability E_NokiaTypesIsis_Level `path:"level-capability" module:"nokia-conf"`
	RouteTag        *uint32                `path:"route-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_SummaryAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers represents the /nokia-conf/configure/groups/group/service/vprn/isis/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers struct {
	LspWait *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait `path:"lsp-wait" module:"nokia-conf"`
	SpfWait *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) IsYANGGoStruct() {}

// GetOrCreateLspWait retrieves the value of the LspWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) GetOrCreateLspWait() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait {
	if t.LspWait != nil {
		return t.LspWait
	}
	t.LspWait = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait{}
	return t.LspWait
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait{}
	return t.SpfWait
}

// GetLspWait returns the value of the LspWait struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers. If the receiver or the field LspWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) GetLspWait() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait {
	if t != nil && t.LspWait != nil {
		return t.LspWait
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) GetSpfWait() *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LspWait.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait represents the /nokia-conf/configure/groups/group/service/vprn/isis/timers/lsp-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait struct {
	LspInitialWait *uint32 `path:"lsp-initial-wait" module:"nokia-conf"`
	LspMaxWait     *uint32 `path:"lsp-max-wait" module:"nokia-conf"`
	LspSecondWait  *uint32 `path:"lsp-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) IsYANGGoStruct() {}

// GetLspInitialWait retrieves the value of the leaf LspInitialWait from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspInitialWait is set, it can
// safely use t.GetLspInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) GetLspInitialWait() uint32 {
	if t == nil || t.LspInitialWait == nil {
		return 10
	}
	return *t.LspInitialWait
}

// GetLspMaxWait retrieves the value of the leaf LspMaxWait from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMaxWait is set, it can
// safely use t.GetLspMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) GetLspMaxWait() uint32 {
	if t == nil || t.LspMaxWait == nil {
		return 5000
	}
	return *t.LspMaxWait
}

// GetLspSecondWait retrieves the value of the leaf LspSecondWait from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspSecondWait is set, it can
// safely use t.GetLspSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) GetLspSecondWait() uint32 {
	if t == nil || t.LspSecondWait == nil {
		return 1000
	}
	return *t.LspSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspInitialWait == nil {
		var v uint32 = 10
		t.LspInitialWait = &v
	}
	if t.LspMaxWait == nil {
		var v uint32 = 5000
		t.LspMaxWait = &v
	}
	if t.LspSecondWait == nil {
		var v uint32 = 1000
		t.LspSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_LspWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait represents the /nokia-conf/configure/groups/group/service/vprn/isis/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport represents the /nokia-conf/configure/groups/group/service/vprn/isis/unicast-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Isis_UnicastImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp represents the /nokia-conf/configure/groups/group/service/vprn/l2tp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp struct {
	AdminState               E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	AvpHiding                E_NokiaTypesL2Tp_BaseAvpHiding                                               `path:"avp-hiding" module:"nokia-conf"`
	Challenge                *bool                                                                        `path:"challenge" module:"nokia-conf"`
	DestructTimeout          *uint32                                                                      `path:"destruct-timeout" module:"nokia-conf"`
	EthernetTunnel           *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel           `path:"ethernet-tunnel" module:"nokia-conf"`
	ExcludeAvps              *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps              `path:"exclude-avps" module:"nokia-conf"`
	Failover                 *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover                 `path:"failover" module:"nokia-conf"`
	Group                    map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group         `path:"group" module:"nokia-conf"`
	GroupSessionLimit        *int32                                                                       `path:"group-session-limit" module:"nokia-conf"`
	HelloInterval            NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_HelloInterval_Union       `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout              NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IdleTimeout_Union         `path:"idle-timeout" module:"nokia-conf"`
	IgnoreAvps               *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps               `path:"ignore-avps" module:"nokia-conf"`
	L2Tpv3                   *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3                   `path:"l2tpv3" module:"nokia-conf"`
	Lac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac                      `path:"lac" module:"nokia-conf"`
	LocalAddress             *string                                                                      `path:"local-address" module:"nokia-conf"`
	LocalName                *string                                                                      `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab          *int32                                                                       `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab       *int32                                                                       `path:"max-retries-not-estab" module:"nokia-conf"`
	NextAttempt              E_NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_NextAttempt             `path:"next-attempt" module:"nokia-conf"`
	Password                 *string                                                                      `path:"password" module:"nokia-conf"`
	PeerAddressChangePolicy  E_NokiaTypesL2Tp_PeerAddressChangePolicyOption                               `path:"peer-address-change-policy" module:"nokia-conf"`
	RadiusAccountingPolicy   *string                                                                      `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize        *uint32                                                                      `path:"receive-window-size" module:"nokia-conf"`
	ReplaceResultCode        *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode        `path:"replace-result-code" module:"nokia-conf"`
	RtmDebounceTime          NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_RtmDebounceTime_Union     `path:"rtm-debounce-time" module:"nokia-conf"`
	SessionAssignMethod      E_NokiaTypesL2Tp_BaseSessionAssignMethod                                     `path:"session-assign-method" module:"nokia-conf"`
	SessionLimit             *int32                                                                       `path:"session-limit" module:"nokia-conf"`
	TunnelSelectionBlacklist *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist `path:"tunnel-selection-blacklist" module:"nokia-conf"`
	TunnelSessionLimit       *int32                                                                       `path:"tunnel-session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) NewGroup(TunnelGroupName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group)
	}

	key := TunnelGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group{
		TunnelGroupName: &TunnelGroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.TunnelGroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateGroup(TunnelGroupName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group {

	key := TunnelGroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(TunnelGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetGroup(TunnelGroupName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group {

	if t == nil {
		return nil
	}

	key := TunnelGroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) DeleteGroup(TunnelGroupName string) {
	key := TunnelGroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) error {
	if v.TunnelGroupName == nil {
		return fmt.Errorf("invalid nil key received for TunnelGroupName")
	}

	key := *v.TunnelGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateEthernetTunnel retrieves the value of the EthernetTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateEthernetTunnel() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel {
	if t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	t.EthernetTunnel = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel{}
	return t.EthernetTunnel
}

// GetOrCreateExcludeAvps retrieves the value of the ExcludeAvps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateExcludeAvps() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps {
	if t.ExcludeAvps != nil {
		return t.ExcludeAvps
	}
	t.ExcludeAvps = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps{}
	return t.ExcludeAvps
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover{}
	return t.Failover
}

// GetOrCreateIgnoreAvps retrieves the value of the IgnoreAvps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateIgnoreAvps() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps {
	if t.IgnoreAvps != nil {
		return t.IgnoreAvps
	}
	t.IgnoreAvps = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps{}
	return t.IgnoreAvps
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateLac() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac{}
	return t.Lac
}

// GetOrCreateReplaceResultCode retrieves the value of the ReplaceResultCode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateReplaceResultCode() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode {
	if t.ReplaceResultCode != nil {
		return t.ReplaceResultCode
	}
	t.ReplaceResultCode = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode{}
	return t.ReplaceResultCode
}

// GetOrCreateTunnelSelectionBlacklist retrieves the value of the TunnelSelectionBlacklist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetOrCreateTunnelSelectionBlacklist() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist {
	if t.TunnelSelectionBlacklist != nil {
		return t.TunnelSelectionBlacklist
	}
	t.TunnelSelectionBlacklist = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist{}
	return t.TunnelSelectionBlacklist
}

// GetEthernetTunnel returns the value of the EthernetTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field EthernetTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetEthernetTunnel() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel {
	if t != nil && t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	return nil
}

// GetExcludeAvps returns the value of the ExcludeAvps struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field ExcludeAvps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetExcludeAvps() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps {
	if t != nil && t.ExcludeAvps != nil {
		return t.ExcludeAvps
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetIgnoreAvps returns the value of the IgnoreAvps struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field IgnoreAvps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetIgnoreAvps() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps {
	if t != nil && t.IgnoreAvps != nil {
		return t.IgnoreAvps
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetLac() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetReplaceResultCode returns the value of the ReplaceResultCode struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field ReplaceResultCode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetReplaceResultCode() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode {
	if t != nil && t.ReplaceResultCode != nil {
		return t.ReplaceResultCode
	}
	return nil
}

// GetTunnelSelectionBlacklist returns the value of the TunnelSelectionBlacklist struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp. If the receiver or the field TunnelSelectionBlacklist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetTunnelSelectionBlacklist() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist {
	if t != nil && t.TunnelSelectionBlacklist != nil {
		return t.TunnelSelectionBlacklist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetAvpHiding() E_NokiaTypesL2Tp_BaseAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetChallenge() bool {
	if t == nil || t.Challenge == nil {
		return false
	}
	return *t.Challenge
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 60
	}
	return *t.DestructTimeout
}

// GetGroupSessionLimit retrieves the value of the leaf GroupSessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupSessionLimit is set, it can
// safely use t.GetGroupSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetGroupSessionLimit() int32 {
	if t == nil || t.GroupSessionLimit == nil {
		return 0
	}
	return *t.GroupSessionLimit
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetHelloInterval() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return UnionUint32(300)
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetIdleTimeout() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return NokiaTypesL2Tp_BaseIdleTimeout_Enum_infinite
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 5
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 5
	}
	return *t.MaxRetriesNotEstab
}

// GetNextAttempt retrieves the value of the leaf NextAttempt from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextAttempt is set, it can
// safely use t.GetNextAttempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextAttempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetNextAttempt() E_NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_NextAttempt {
	if t == nil || t.NextAttempt == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_NextAttempt_next_preference_level
	}
	return t.NextAttempt
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPeerAddressChangePolicy retrieves the value of the leaf PeerAddressChangePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAddressChangePolicy is set, it can
// safely use t.GetPeerAddressChangePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAddressChangePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetPeerAddressChangePolicy() E_NokiaTypesL2Tp_PeerAddressChangePolicyOption {
	if t == nil || t.PeerAddressChangePolicy == 0 {
		return NokiaTypesL2Tp_PeerAddressChangePolicyOption_reject
	}
	return t.PeerAddressChangePolicy
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 64
	}
	return *t.ReceiveWindowSize
}

// GetRtmDebounceTime retrieves the value of the leaf RtmDebounceTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtmDebounceTime is set, it can
// safely use t.GetRtmDebounceTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtmDebounceTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetRtmDebounceTime() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_RtmDebounceTime_Union {
	if t == nil || t.RtmDebounceTime == nil {
		return NokiaTypesL2Tp_RtmDebounceTime_Enum_infinite
	}
	return t.RtmDebounceTime
}

// GetSessionAssignMethod retrieves the value of the leaf SessionAssignMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionAssignMethod is set, it can
// safely use t.GetSessionAssignMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionAssignMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetSessionAssignMethod() E_NokiaTypesL2Tp_BaseSessionAssignMethod {
	if t == nil || t.SessionAssignMethod == 0 {
		return NokiaTypesL2Tp_BaseSessionAssignMethod_existing_first
	}
	return t.SessionAssignMethod
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetSessionLimit() int32 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTunnelSessionLimit retrieves the value of the leaf TunnelSessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelSessionLimit is set, it can
// safely use t.GetTunnelSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) GetTunnelSessionLimit() int32 {
	if t == nil || t.TunnelSessionLimit == nil {
		return 0
	}
	return *t.TunnelSessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Challenge == nil {
		var v bool = false
		t.Challenge = &v
	}
	if t.DestructTimeout == nil {
		var v uint32 = 60
		t.DestructTimeout = &v
	}
	if t.HelloInterval == nil {
		t.HelloInterval = UnionUint32(300)
	}
	if t.IdleTimeout == nil {
		t.IdleTimeout = NokiaTypesL2Tp_BaseIdleTimeout_Enum_infinite
	}
	if t.MaxRetriesEstab == nil {
		var v int32 = 5
		t.MaxRetriesEstab = &v
	}
	if t.MaxRetriesNotEstab == nil {
		var v int32 = 5
		t.MaxRetriesNotEstab = &v
	}
	if t.NextAttempt == 0 {
		t.NextAttempt = NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_NextAttempt_next_preference_level
	}
	if t.PeerAddressChangePolicy == 0 {
		t.PeerAddressChangePolicy = NokiaTypesL2Tp_PeerAddressChangePolicyOption_reject
	}
	if t.ReceiveWindowSize == nil {
		var v uint32 = 64
		t.ReceiveWindowSize = &v
	}
	if t.RtmDebounceTime == nil {
		t.RtmDebounceTime = NokiaTypesL2Tp_RtmDebounceTime_Enum_infinite
	}
	if t.SessionAssignMethod == 0 {
		t.SessionAssignMethod = NokiaTypesL2Tp_BaseSessionAssignMethod_existing_first
	}
	t.EthernetTunnel.PopulateDefaults()
	t.ExcludeAvps.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.IgnoreAvps.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.ReplaceResultCode.PopulateDefaults()
	t.TunnelSelectionBlacklist.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/ethernet-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel struct {
	ReconnectTimeout NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel_ReconnectTimeout_Union `path:"reconnect-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) IsYANGGoStruct() {}

// GetReconnectTimeout retrieves the value of the leaf ReconnectTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTimeout is set, it can
// safely use t.GetReconnectTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) GetReconnectTimeout() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel_ReconnectTimeout_Union {
	if t == nil || t.ReconnectTimeout == nil {
		return NokiaTypesL2Tp_BaseV3ReconnectTimeout_Enum_infinite
	}
	return t.ReconnectTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReconnectTimeout == nil {
		t.ReconnectTimeout = NokiaTypesL2Tp_BaseV3ReconnectTimeout_Enum_infinite
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_EthernetTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/exclude-avps YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps struct {
	CallingNumber       *bool `path:"calling-number" module:"nokia-conf"`
	InitialRxLcpConfReq *bool `path:"initial-rx-lcp-conf-req" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) IsYANGGoStruct() {}

// GetCallingNumber retrieves the value of the leaf CallingNumber from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingNumber is set, it can
// safely use t.GetCallingNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) GetCallingNumber() bool {
	if t == nil || t.CallingNumber == nil {
		return false
	}
	return *t.CallingNumber
}

// GetInitialRxLcpConfReq retrieves the value of the leaf InitialRxLcpConfReq from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialRxLcpConfReq is set, it can
// safely use t.GetInitialRxLcpConfReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialRxLcpConfReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) GetInitialRxLcpConfReq() bool {
	if t == nil || t.InitialRxLcpConfReq == nil {
		return false
	}
	return *t.InitialRxLcpConfReq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingNumber == nil {
		var v bool = false
		t.CallingNumber = &v
	}
	if t.InitialRxLcpConfReq == nil {
		var v bool = false
		t.InitialRxLcpConfReq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ExcludeAvps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover struct {
	RecoveryMaxSessionLifetime *uint32                                                                                                                                                   `path:"recovery-max-session-lifetime" module:"nokia-conf"`
	RecoveryMethod             E_NokiaTypesL2Tp_BaseFailoverRecoveryMethod                                                                                                               `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime               *int32                                                                                                                                                    `path:"recovery-time" module:"nokia-conf"`
	TrackSrrp                  map[NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) IsYANGGoStruct() {}

// NewTrackSrrp creates a new entry in the TrackSrrp list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) NewTrackSrrp(Id NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrackSrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrackSrrp", key)
	}

	t.TrackSrrp[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp{
		Id: Id,
	}

	return t.TrackSrrp[key], nil
}

// RenameTrackSrrp renames an entry in the list TrackSrrp within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) RenameTrackSrrp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union) error {
	if _, ok := t.TrackSrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in TrackSrrp", newK)
	}

	e, ok := t.TrackSrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrackSrrp", oldK)
	}
	e.Id = newK

	t.TrackSrrp[newK] = e
	delete(t.TrackSrrp, oldK)
	return nil
}

// GetOrCreateTrackSrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) GetOrCreateTrackSrrp(Id NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp {

	key := Id

	if v, ok := t.TrackSrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrackSrrp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrackSrrp got unexpected error: %v", err))
	}
	return v
}

// GetTrackSrrp retrieves the value with the specified key from
// the TrackSrrp map field of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) GetTrackSrrp(Id NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TrackSrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrackSrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) DeleteTrackSrrp(Id NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union) {
	key := Id

	delete(t.TrackSrrp, key)
}

// AppendTrackSrrp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp struct to the
// list TrackSrrp of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) AppendTrackSrrp(v *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp)
	}

	if _, ok := t.TrackSrrp[key]; ok {
		return fmt.Errorf("duplicate key for list TrackSrrp %v", key)
	}

	t.TrackSrrp[key] = v
	return nil
}

// GetRecoveryMaxSessionLifetime retrieves the value of the leaf RecoveryMaxSessionLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMaxSessionLifetime is set, it can
// safely use t.GetRecoveryMaxSessionLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMaxSessionLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) GetRecoveryMaxSessionLifetime() uint32 {
	if t == nil || t.RecoveryMaxSessionLifetime == nil {
		return 2
	}
	return *t.RecoveryMaxSessionLifetime
}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_BaseFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return NokiaTypesL2Tp_BaseFailoverRecoveryMethod_mcs
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RecoveryMaxSessionLifetime == nil {
		var v uint32 = 2
		t.RecoveryMaxSessionLifetime = &v
	}
	if t.RecoveryMethod == 0 {
		t.RecoveryMethod = NokiaTypesL2Tp_BaseFailoverRecoveryMethod_mcs
	}
	if t.RecoveryTime == nil {
		var v int32 = 0
		t.RecoveryTime = &v
	}
	for _, e := range t.TrackSrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/failover/track-srrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp struct {
	Id      NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union `path:"id" module:"nokia-conf"`
	Peer    *string                                                                        `path:"peer" module:"nokia-conf"`
	SyncTag *string                                                                        `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) GetId() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group struct {
	AdminState             E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	AvpHiding              E_NokiaTypesL2Tp_ChildAvpHiding                                              `path:"avp-hiding" module:"nokia-conf"`
	Challenge              E_NokiaTypesSros_BoolWithInherit                                             `path:"challenge" module:"nokia-conf"`
	Description            *string                                                                      `path:"description" module:"nokia-conf"`
	DestructTimeout        *uint32                                                                      `path:"destruct-timeout" module:"nokia-conf"`
	EthernetTunnel         *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel     `path:"ethernet-tunnel" module:"nokia-conf"`
	Failover               *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover           `path:"failover" module:"nokia-conf"`
	HelloInterval          NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_HelloInterval_Union `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout            NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_IdleTimeout_Union   `path:"idle-timeout" module:"nokia-conf"`
	L2Tpv3                 *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3             `path:"l2tpv3" module:"nokia-conf"`
	Lac                    *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac                `path:"lac" module:"nokia-conf"`
	Lns                    *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns                `path:"lns" module:"nokia-conf"`
	LocalAddress           *string                                                                      `path:"local-address" module:"nokia-conf"`
	LocalName              *string                                                                      `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab        *int32                                                                       `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab     *int32                                                                       `path:"max-retries-not-estab" module:"nokia-conf"`
	Password               *string                                                                      `path:"password" module:"nokia-conf"`
	Protocol               E_NokiaTypesL2Tp_ProtocolVersion                                             `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                                      `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize      *uint32                                                                      `path:"receive-window-size" module:"nokia-conf"`
	SessionAssignMethod    E_NokiaTypesL2Tp_ChildSessionAssignMethod                                    `path:"session-assign-method" module:"nokia-conf"`
	SessionLimit           NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_SessionLimit_Union  `path:"session-limit" module:"nokia-conf"`
	Tunnel                 map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel  `path:"tunnel" module:"nokia-conf"`
	TunnelGroupName        *string                                                                      `path:"tunnel-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) NewTunnel(TunnelName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel{
		TunnelName: &TunnelName,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) RenameTunnel(oldK, newK string) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.TunnelName = &newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetOrCreateTunnel(TunnelName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel {

	key := TunnelName

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(TunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetTunnel(TunnelName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel {

	if t == nil {
		return nil
	}

	key := TunnelName

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) DeleteTunnel(TunnelName string) {
	key := TunnelName

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel struct to the
// list Tunnel of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) AppendTunnel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) error {
	if v.TunnelName == nil {
		return fmt.Errorf("invalid nil key received for TunnelName")
	}

	key := *v.TunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// GetOrCreateEthernetTunnel retrieves the value of the EthernetTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetOrCreateEthernetTunnel() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel {
	if t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	t.EthernetTunnel = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel{}
	return t.EthernetTunnel
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover{}
	return t.Failover
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetOrCreateLac() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac{}
	return t.Lac
}

// GetOrCreateLns retrieves the value of the Lns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetOrCreateLns() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns {
	if t.Lns != nil {
		return t.Lns
	}
	t.Lns = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns{}
	return t.Lns
}

// GetEthernetTunnel returns the value of the EthernetTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the receiver or the field EthernetTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetEthernetTunnel() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel {
	if t != nil && t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetLac() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetLns returns the value of the Lns struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group. If the receiver or the field Lns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetLns() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns {
	if t != nil && t.Lns != nil {
		return t.Lns
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetAvpHiding() E_NokiaTypesL2Tp_ChildAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetChallenge() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Challenge == 0 {
		return 0
	}
	return t.Challenge
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 0
	}
	return *t.DestructTimeout
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetHelloInterval() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return nil
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetIdleTimeout() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return nil
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 0
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 0
	}
	return *t.MaxRetriesNotEstab
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetProtocol() E_NokiaTypesL2Tp_ProtocolVersion {
	if t == nil || t.Protocol == 0 {
		return NokiaTypesL2Tp_ProtocolVersion_v2
	}
	return t.Protocol
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 0
	}
	return *t.ReceiveWindowSize
}

// GetSessionAssignMethod retrieves the value of the leaf SessionAssignMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionAssignMethod is set, it can
// safely use t.GetSessionAssignMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionAssignMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetSessionAssignMethod() E_NokiaTypesL2Tp_ChildSessionAssignMethod {
	if t == nil || t.SessionAssignMethod == 0 {
		return 0
	}
	return t.SessionAssignMethod
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetSessionLimit() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_SessionLimit_Union {
	if t == nil || t.SessionLimit == nil {
		return nil
	}
	return t.SessionLimit
}

// GetTunnelGroupName retrieves the value of the leaf TunnelGroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupName is set, it can
// safely use t.GetTunnelGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) GetTunnelGroupName() string {
	if t == nil || t.TunnelGroupName == nil {
		return ""
	}
	return *t.TunnelGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Protocol == 0 {
		t.Protocol = NokiaTypesL2Tp_ProtocolVersion_v2
	}
	t.EthernetTunnel.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.Lns.PopulateDefaults()
	for _, e := range t.Tunnel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelGroupName == nil {
		return nil, fmt.Errorf("nil value for key TunnelGroupName")
	}

	return map[string]interface{}{
		"tunnel-group-name": *t.TunnelGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/ethernet-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel struct {
	ReconnectTimeout NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel_ReconnectTimeout_Union `path:"reconnect-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) IsYANGGoStruct() {}

// GetReconnectTimeout retrieves the value of the leaf ReconnectTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTimeout is set, it can
// safely use t.GetReconnectTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) GetReconnectTimeout() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel_ReconnectTimeout_Union {
	if t == nil || t.ReconnectTimeout == nil {
		return nil
	}
	return t.ReconnectTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_EthernetTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover struct {
	RecoveryMethod E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime   *int32                                       `path:"recovery-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) IsYANGGoStruct() {}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return 0
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3 represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3 struct {
	CookieLength        NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_CookieLength_Union        `path:"cookie-length" module:"nokia-conf"`
	DigestType          E_NokiaTypesL2Tp_ChildV3DigestType                                                        `path:"digest-type" module:"nokia-conf"`
	NonceLength         *int32                                                                                    `path:"nonce-length" module:"nokia-conf"`
	Password            *string                                                                                   `path:"password" module:"nokia-conf"`
	PrivateTcpMssAdjust NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PrivateTcpMssAdjust_Union `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PublicTcpMssAdjust_Union  `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	PwCapList           *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList                `path:"pw-cap-list" module:"nokia-conf"`
	RemRouterId         *string                                                                                   `path:"rem-router-id" module:"nokia-conf"`
	TrackPasswordChange *bool                                                                                     `path:"track-password-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreatePwCapList retrieves the value of the PwCapList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetOrCreatePwCapList() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList {
	if t.PwCapList != nil {
		return t.PwCapList
	}
	t.PwCapList = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList{}
	return t.PwCapList
}

// GetPwCapList returns the value of the PwCapList struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3. If the receiver or the field PwCapList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetPwCapList() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList {
	if t != nil && t.PwCapList != nil {
		return t.PwCapList
	}
	return nil
}

// GetCookieLength retrieves the value of the leaf CookieLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CookieLength is set, it can
// safely use t.GetCookieLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CookieLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetCookieLength() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_CookieLength_Union {
	if t == nil || t.CookieLength == nil {
		return nil
	}
	return t.CookieLength
}

// GetDigestType retrieves the value of the leaf DigestType from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigestType is set, it can
// safely use t.GetDigestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigestType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetDigestType() E_NokiaTypesL2Tp_ChildV3DigestType {
	if t == nil || t.DigestType == 0 {
		return 0
	}
	return t.DigestType
}

// GetNonceLength retrieves the value of the leaf NonceLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonceLength is set, it can
// safely use t.GetNonceLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonceLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetNonceLength() int32 {
	if t == nil || t.NonceLength == nil {
		return 0
	}
	return *t.NonceLength
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetPrivateTcpMssAdjust() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PrivateTcpMssAdjust_Union {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return nil
	}
	return t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetPublicTcpMssAdjust() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetRemRouterId retrieves the value of the leaf RemRouterId from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemRouterId is set, it can
// safely use t.GetRemRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetRemRouterId() string {
	if t == nil || t.RemRouterId == nil {
		return "0.0.0.0"
	}
	return *t.RemRouterId
}

// GetTrackPasswordChange retrieves the value of the leaf TrackPasswordChange from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackPasswordChange is set, it can
// safely use t.GetTrackPasswordChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackPasswordChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) GetTrackPasswordChange() bool {
	if t == nil || t.TrackPasswordChange == nil {
		return false
	}
	return *t.TrackPasswordChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemRouterId == nil {
		var v string = "0.0.0.0"
		t.RemRouterId = &v
	}
	if t.TrackPasswordChange == nil {
		var v bool = false
		t.TrackPasswordChange = &v
	}
	t.PwCapList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/l2tpv3/pw-cap-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList struct {
	Ethernet     *bool `path:"ethernet" module:"nokia-conf"`
	EthernetVlan *bool `path:"ethernet-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) GetEthernet() bool {
	if t == nil || t.Ethernet == nil {
		return false
	}
	return *t.Ethernet
}

// GetEthernetVlan retrieves the value of the leaf EthernetVlan from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetVlan is set, it can
// safely use t.GetEthernetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) GetEthernetVlan() bool {
	if t == nil || t.EthernetVlan == nil {
		return false
	}
	return *t.EthernetVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ethernet == nil {
		var v bool = false
		t.Ethernet = &v
	}
	if t.EthernetVlan == nil {
		var v bool = false
		t.EthernetVlan = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac struct {
	DfBit E_NokiaTypesSros_BoolWithInherit `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) IsYANGGoStruct() {}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) GetDfBit() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.DfBit == 0 {
		return 0
	}
	return t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns struct {
	LnsGroup          *uint32                                                             `path:"lns-group" module:"nokia-conf"`
	LoadBalanceMethod E_NokiaTypesL2Tp_BaseLoadBalanceMethod                              `path:"load-balance-method" module:"nokia-conf"`
	Mlppp             *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp `path:"mlppp" module:"nokia-conf" yangPresence:"true"`
	Ppp               *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp   `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) IsYANGGoStruct() {}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) GetOrCreateMlppp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp{}
	return t.Ppp
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) GetMlppp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) GetPpp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetLnsGroup retrieves the value of the leaf LnsGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LnsGroup is set, it can
// safely use t.GetLnsGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LnsGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) GetLnsGroup() uint32 {
	if t == nil || t.LnsGroup == nil {
		return 0
	}
	return *t.LnsGroup
}

// GetLoadBalanceMethod retrieves the value of the leaf LoadBalanceMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalanceMethod is set, it can
// safely use t.GetLoadBalanceMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalanceMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) GetLoadBalanceMethod() E_NokiaTypesL2Tp_BaseLoadBalanceMethod {
	if t == nil || t.LoadBalanceMethod == 0 {
		return NokiaTypesL2Tp_BaseLoadBalanceMethod_per_session
	}
	return t.LoadBalanceMethod
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoadBalanceMethod == 0 {
		t.LoadBalanceMethod = NokiaTypesL2Tp_BaseLoadBalanceMethod_per_session
	}
	t.Mlppp.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns/mlppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp struct {
	AdminState           E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint              `path:"endpoint" module:"nokia-conf"`
	Interleave           *bool                                                                                     `path:"interleave" module:"nokia-conf"`
	MaxFragmentDelay     NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_MaxFragmentDelay_Union `path:"max-fragment-delay" module:"nokia-conf"`
	MaxLinks             *uint32                                                                                   `path:"max-links" module:"nokia-conf"`
	ReassemblyTimeout    *uint32                                                                                   `path:"reassembly-timeout" module:"nokia-conf"`
	ShortSequenceNumbers *bool                                                                                     `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInterleave retrieves the value of the leaf Interleave from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interleave is set, it can
// safely use t.GetInterleave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interleave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetInterleave() bool {
	if t == nil || t.Interleave == nil {
		return false
	}
	return *t.Interleave
}

// GetMaxFragmentDelay retrieves the value of the leaf MaxFragmentDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFragmentDelay is set, it can
// safely use t.GetMaxFragmentDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFragmentDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetMaxFragmentDelay() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_MaxFragmentDelay_Union {
	if t == nil || t.MaxFragmentDelay == nil {
		return NokiaTypesL2Tp_BaseMlpppMaxFragDelay_Enum_no_fragmentation
	}
	return t.MaxFragmentDelay
}

// GetMaxLinks retrieves the value of the leaf MaxLinks from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinks is set, it can
// safely use t.GetMaxLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetMaxLinks() uint32 {
	if t == nil || t.MaxLinks == nil {
		return 1
	}
	return *t.MaxLinks
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 1000
	}
	return *t.ReassemblyTimeout
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetShortSequenceNumbers() bool {
	if t == nil || t.ShortSequenceNumbers == nil {
		return false
	}
	return *t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interleave == nil {
		var v bool = false
		t.Interleave = &v
	}
	if t.MaxFragmentDelay == nil {
		t.MaxFragmentDelay = NokiaTypesL2Tp_BaseMlpppMaxFragDelay_Enum_no_fragmentation
	}
	if t.MaxLinks == nil {
		var v uint32 = 1
		t.MaxLinks = &v
	}
	if t.ReassemblyTimeout == nil {
		var v uint32 = 1000
		t.ReassemblyTimeout = &v
	}
	if t.ShortSequenceNumbers == nil {
		var v bool = false
		t.ShortSequenceNumbers = &v
	}
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp struct {
	Authentication        E_NokiaTypesL2Tp_BasePppAuthProtocol                                                    `path:"authentication" module:"nokia-conf"`
	AuthenticationPolicy  *string                                                                                 `path:"authentication-policy" module:"nokia-conf"`
	ChapChallengeLength   *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength   `path:"chap-challenge-length" module:"nokia-conf"`
	DefaultGroupInterface *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface `path:"default-group-interface" module:"nokia-conf"`
	IpcpSubnetNegotiation *bool                                                                                   `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive             *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive             `path:"keepalive" module:"nokia-conf"`
	LcpForceAckAccm       *bool                                                                                   `path:"lcp-force-ack-accm" module:"nokia-conf"`
	LcpIgnoreMagicNumbers *bool                                                                                   `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	Mtu                   *uint32                                                                                 `path:"mtu" module:"nokia-conf"`
	ProxyAuthentication   *bool                                                                                   `path:"proxy-authentication" module:"nokia-conf"`
	ProxyLcp              *bool                                                                                   `path:"proxy-lcp" module:"nokia-conf"`
	RejectDisabledNcp     *bool                                                                                   `path:"reject-disabled-ncp" module:"nokia-conf"`
	UserDb                *string                                                                                 `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) IsYANGGoStruct() {}

// GetOrCreateChapChallengeLength retrieves the value of the ChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetOrCreateChapChallengeLength() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength {
	if t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	t.ChapChallengeLength = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength{}
	return t.ChapChallengeLength
}

// GetOrCreateDefaultGroupInterface retrieves the value of the DefaultGroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetOrCreateDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface {
	if t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	t.DefaultGroupInterface = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface{}
	return t.DefaultGroupInterface
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive{}
	return t.Keepalive
}

// GetChapChallengeLength returns the value of the ChapChallengeLength struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp. If the receiver or the field ChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetChapChallengeLength() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength {
	if t != nil && t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	return nil
}

// GetDefaultGroupInterface returns the value of the DefaultGroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp. If the receiver or the field DefaultGroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface {
	if t != nil && t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetAuthentication retrieves the value of the leaf Authentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authentication is set, it can
// safely use t.GetAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetAuthentication() E_NokiaTypesL2Tp_BasePppAuthProtocol {
	if t == nil || t.Authentication == 0 {
		return NokiaTypesL2Tp_BasePppAuthProtocol_pref_chap
	}
	return t.Authentication
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetIpcpSubnetNegotiation() bool {
	if t == nil || t.IpcpSubnetNegotiation == nil {
		return false
	}
	return *t.IpcpSubnetNegotiation
}

// GetLcpForceAckAccm retrieves the value of the leaf LcpForceAckAccm from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpForceAckAccm is set, it can
// safely use t.GetLcpForceAckAccm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpForceAckAccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetLcpForceAckAccm() bool {
	if t == nil || t.LcpForceAckAccm == nil {
		return false
	}
	return *t.LcpForceAckAccm
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetLcpIgnoreMagicNumbers() bool {
	if t == nil || t.LcpIgnoreMagicNumbers == nil {
		return false
	}
	return *t.LcpIgnoreMagicNumbers
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetProxyAuthentication retrieves the value of the leaf ProxyAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyAuthentication is set, it can
// safely use t.GetProxyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetProxyAuthentication() bool {
	if t == nil || t.ProxyAuthentication == nil {
		return false
	}
	return *t.ProxyAuthentication
}

// GetProxyLcp retrieves the value of the leaf ProxyLcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyLcp is set, it can
// safely use t.GetProxyLcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyLcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetProxyLcp() bool {
	if t == nil || t.ProxyLcp == nil {
		return false
	}
	return *t.ProxyLcp
}

// GetRejectDisabledNcp retrieves the value of the leaf RejectDisabledNcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectDisabledNcp is set, it can
// safely use t.GetRejectDisabledNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectDisabledNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetRejectDisabledNcp() bool {
	if t == nil || t.RejectDisabledNcp == nil {
		return false
	}
	return *t.RejectDisabledNcp
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authentication == 0 {
		t.Authentication = NokiaTypesL2Tp_BasePppAuthProtocol_pref_chap
	}
	if t.IpcpSubnetNegotiation == nil {
		var v bool = false
		t.IpcpSubnetNegotiation = &v
	}
	if t.LcpForceAckAccm == nil {
		var v bool = false
		t.LcpForceAckAccm = &v
	}
	if t.LcpIgnoreMagicNumbers == nil {
		var v bool = false
		t.LcpIgnoreMagicNumbers = &v
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.ProxyAuthentication == nil {
		var v bool = false
		t.ProxyAuthentication = &v
	}
	if t.ProxyLcp == nil {
		var v bool = false
		t.ProxyLcp = &v
	}
	if t.RejectDisabledNcp == nil {
		var v bool = false
		t.RejectDisabledNcp = &v
	}
	t.ChapChallengeLength.PopulateDefaults()
	t.DefaultGroupInterface.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns/ppp/chap-challenge-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 64
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 32
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 64
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 32
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns/ppp/default-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/lns/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel struct {
	AdminState             E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	AutoEstablish          *bool                                                                               `path:"auto-establish" module:"nokia-conf"`
	AvpHiding              E_NokiaTypesL2Tp_ChildAvpHiding                                                     `path:"avp-hiding" module:"nokia-conf"`
	Challenge              E_NokiaTypesSros_BoolWithInherit                                                    `path:"challenge" module:"nokia-conf"`
	Description            *string                                                                             `path:"description" module:"nokia-conf"`
	DestructTimeout        *uint32                                                                             `path:"destruct-timeout" module:"nokia-conf"`
	Failover               *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover           `path:"failover" module:"nokia-conf"`
	HelloInterval          NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_HelloInterval_Union `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout            NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_IdleTimeout_Union   `path:"idle-timeout" module:"nokia-conf"`
	L2Tpv3                 *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3             `path:"l2tpv3" module:"nokia-conf"`
	Lac                    *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac                `path:"lac" module:"nokia-conf"`
	Lns                    *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns                `path:"lns" module:"nokia-conf"`
	LocalAddress           *string                                                                             `path:"local-address" module:"nokia-conf"`
	LocalName              *string                                                                             `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab        *int32                                                                              `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab     *int32                                                                              `path:"max-retries-not-estab" module:"nokia-conf"`
	Password               *string                                                                             `path:"password" module:"nokia-conf"`
	Peer                   *string                                                                             `path:"peer" module:"nokia-conf"`
	Preference             *uint32                                                                             `path:"preference" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                                             `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize      *uint32                                                                             `path:"receive-window-size" module:"nokia-conf"`
	RemoteName             *string                                                                             `path:"remote-name" module:"nokia-conf"`
	SessionLimit           NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_SessionLimit_Union  `path:"session-limit" module:"nokia-conf"`
	TunnelName             *string                                                                             `path:"tunnel-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) IsYANGGoStruct() {}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover{}
	return t.Failover
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateLac() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac{}
	return t.Lac
}

// GetOrCreateLns retrieves the value of the Lns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateLns() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns {
	if t.Lns != nil {
		return t.Lns
	}
	t.Lns = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns{}
	return t.Lns
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetFailover() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetLac() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetLns returns the value of the Lns struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field Lns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetLns() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns {
	if t != nil && t.Lns != nil {
		return t.Lns
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAutoEstablish retrieves the value of the leaf AutoEstablish from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEstablish is set, it can
// safely use t.GetAutoEstablish() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEstablish == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetAutoEstablish() bool {
	if t == nil || t.AutoEstablish == nil {
		return false
	}
	return *t.AutoEstablish
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetAvpHiding() E_NokiaTypesL2Tp_ChildAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetChallenge() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Challenge == 0 {
		return 0
	}
	return t.Challenge
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 0
	}
	return *t.DestructTimeout
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetHelloInterval() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return nil
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetIdleTimeout() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return nil
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 0
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 0
	}
	return *t.MaxRetriesNotEstab
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 0
	}
	return *t.ReceiveWindowSize
}

// GetRemoteName retrieves the value of the leaf RemoteName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteName is set, it can
// safely use t.GetRemoteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetRemoteName() string {
	if t == nil || t.RemoteName == nil {
		return ""
	}
	return *t.RemoteName
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetSessionLimit() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_SessionLimit_Union {
	if t == nil || t.SessionLimit == nil {
		return nil
	}
	return t.SessionLimit
}

// GetTunnelName retrieves the value of the leaf TunnelName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelName is set, it can
// safely use t.GetTunnelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) GetTunnelName() string {
	if t == nil || t.TunnelName == nil {
		return ""
	}
	return *t.TunnelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoEstablish == nil {
		var v bool = false
		t.AutoEstablish = &v
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	t.Failover.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.Lns.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover struct {
	RecoveryMethod E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime   *int32                                       `path:"recovery-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) IsYANGGoStruct() {}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return 0
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 struct {
	PrivateTcpMssAdjust NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PrivateTcpMssAdjust_Union `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PublicTcpMssAdjust_Union  `path:"public-tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) IsYANGGoStruct() {}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) GetPrivateTcpMssAdjust() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PrivateTcpMssAdjust_Union {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return nil
	}
	return t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) GetPublicTcpMssAdjust() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac struct {
	DfBit E_NokiaTypesSros_BoolWithInherit `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) IsYANGGoStruct() {}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) GetDfBit() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.DfBit == 0 {
		return 0
	}
	return t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns struct {
	LnsGroup          *uint32                                                                    `path:"lns-group" module:"nokia-conf"`
	LoadBalanceMethod E_NokiaTypesL2Tp_ChildLoadBalanceMethod                                    `path:"load-balance-method" module:"nokia-conf"`
	Mlppp             *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp `path:"mlppp" module:"nokia-conf" yangPresence:"true"`
	Ppp               *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp   `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) IsYANGGoStruct() {}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetOrCreateMlppp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp{}
	return t.Ppp
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetMlppp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetPpp() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetLnsGroup retrieves the value of the leaf LnsGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LnsGroup is set, it can
// safely use t.GetLnsGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LnsGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetLnsGroup() uint32 {
	if t == nil || t.LnsGroup == nil {
		return 0
	}
	return *t.LnsGroup
}

// GetLoadBalanceMethod retrieves the value of the leaf LoadBalanceMethod from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalanceMethod is set, it can
// safely use t.GetLoadBalanceMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalanceMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetLoadBalanceMethod() E_NokiaTypesL2Tp_ChildLoadBalanceMethod {
	if t == nil || t.LoadBalanceMethod == 0 {
		return 0
	}
	return t.LoadBalanceMethod
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mlppp.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns/mlppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp struct {
	AdminState           E_NokiaTypesSros_AdminStateWithInherit                                              `path:"admin-state" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint `path:"endpoint" module:"nokia-conf"`
	Interleave           E_NokiaTypesSros_BoolWithInherit                                                    `path:"interleave" module:"nokia-conf"`
	MaxFragmentDelay     *uint32                                                                             `path:"max-fragment-delay" module:"nokia-conf"`
	MaxLinks             *uint32                                                                             `path:"max-links" module:"nokia-conf"`
	ReassemblyTimeout    *uint32                                                                             `path:"reassembly-timeout" module:"nokia-conf"`
	ShortSequenceNumbers E_NokiaTypesSros_BoolWithInherit                                                    `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetAdminState() E_NokiaTypesSros_AdminStateWithInherit {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetInterleave retrieves the value of the leaf Interleave from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interleave is set, it can
// safely use t.GetInterleave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interleave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetInterleave() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Interleave == 0 {
		return 0
	}
	return t.Interleave
}

// GetMaxFragmentDelay retrieves the value of the leaf MaxFragmentDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFragmentDelay is set, it can
// safely use t.GetMaxFragmentDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFragmentDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetMaxFragmentDelay() uint32 {
	if t == nil || t.MaxFragmentDelay == nil {
		return 0
	}
	return *t.MaxFragmentDelay
}

// GetMaxLinks retrieves the value of the leaf MaxLinks from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinks is set, it can
// safely use t.GetMaxLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetMaxLinks() uint32 {
	if t == nil || t.MaxLinks == nil {
		return 0
	}
	return *t.MaxLinks
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetShortSequenceNumbers() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ShortSequenceNumbers == 0 {
		return 0
	}
	return t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp struct {
	Authentication        E_NokiaTypesL2Tp_ChildPppAuthProtocol                                                          `path:"authentication" module:"nokia-conf"`
	AuthenticationPolicy  *string                                                                                        `path:"authentication-policy" module:"nokia-conf"`
	ChapChallengeLength   *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength   `path:"chap-challenge-length" module:"nokia-conf"`
	DefaultGroupInterface *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface `path:"default-group-interface" module:"nokia-conf"`
	IpcpSubnetNegotiation E_NokiaTypesSros_BoolWithInherit                                                               `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive             *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive             `path:"keepalive" module:"nokia-conf"`
	LcpForceAckAccm       E_NokiaTypesSros_BoolWithInherit                                                               `path:"lcp-force-ack-accm" module:"nokia-conf"`
	LcpIgnoreMagicNumbers E_NokiaTypesSros_BoolWithInherit                                                               `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	Mtu                   *uint32                                                                                        `path:"mtu" module:"nokia-conf"`
	ProxyAuthentication   E_NokiaTypesSros_BoolWithInherit                                                               `path:"proxy-authentication" module:"nokia-conf"`
	ProxyLcp              E_NokiaTypesSros_BoolWithInherit                                                               `path:"proxy-lcp" module:"nokia-conf"`
	RejectDisabledNcp     E_NokiaTypesSros_BoolWithInherit                                                               `path:"reject-disabled-ncp" module:"nokia-conf"`
	UserDb                *string                                                                                        `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) IsYANGGoStruct() {}

// GetOrCreateChapChallengeLength retrieves the value of the ChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateChapChallengeLength() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength {
	if t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	t.ChapChallengeLength = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength{}
	return t.ChapChallengeLength
}

// GetOrCreateDefaultGroupInterface retrieves the value of the DefaultGroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface {
	if t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	t.DefaultGroupInterface = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface{}
	return t.DefaultGroupInterface
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive{}
	return t.Keepalive
}

// GetChapChallengeLength returns the value of the ChapChallengeLength struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field ChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetChapChallengeLength() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength {
	if t != nil && t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	return nil
}

// GetDefaultGroupInterface returns the value of the DefaultGroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field DefaultGroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface {
	if t != nil && t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetAuthentication retrieves the value of the leaf Authentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authentication is set, it can
// safely use t.GetAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetAuthentication() E_NokiaTypesL2Tp_ChildPppAuthProtocol {
	if t == nil || t.Authentication == 0 {
		return 0
	}
	return t.Authentication
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetIpcpSubnetNegotiation() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.IpcpSubnetNegotiation == 0 {
		return 0
	}
	return t.IpcpSubnetNegotiation
}

// GetLcpForceAckAccm retrieves the value of the leaf LcpForceAckAccm from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpForceAckAccm is set, it can
// safely use t.GetLcpForceAckAccm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpForceAckAccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetLcpForceAckAccm() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LcpForceAckAccm == 0 {
		return 0
	}
	return t.LcpForceAckAccm
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetLcpIgnoreMagicNumbers() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LcpIgnoreMagicNumbers == 0 {
		return 0
	}
	return t.LcpIgnoreMagicNumbers
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetProxyAuthentication retrieves the value of the leaf ProxyAuthentication from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyAuthentication is set, it can
// safely use t.GetProxyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetProxyAuthentication() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ProxyAuthentication == 0 {
		return 0
	}
	return t.ProxyAuthentication
}

// GetProxyLcp retrieves the value of the leaf ProxyLcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyLcp is set, it can
// safely use t.GetProxyLcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyLcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetProxyLcp() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ProxyLcp == 0 {
		return 0
	}
	return t.ProxyLcp
}

// GetRejectDisabledNcp retrieves the value of the leaf RejectDisabledNcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectDisabledNcp is set, it can
// safely use t.GetRejectDisabledNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectDisabledNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetRejectDisabledNcp() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.RejectDisabledNcp == 0 {
		return 0
	}
	return t.RejectDisabledNcp
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ChapChallengeLength.PopulateDefaults()
	t.DefaultGroupInterface.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns/ppp/chap-challenge-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns/ppp/default-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/group/tunnel/lns/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 0
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/ignore-avps YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps struct {
	SequencingRequired *bool `path:"sequencing-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) IsYANGGoStruct() {}

// GetSequencingRequired retrieves the value of the leaf SequencingRequired from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequencingRequired is set, it can
// safely use t.GetSequencingRequired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequencingRequired == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) GetSequencingRequired() bool {
	if t == nil || t.SequencingRequired == nil {
		return false
	}
	return *t.SequencingRequired
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SequencingRequired == nil {
		var v bool = false
		t.SequencingRequired = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_IgnoreAvps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3 represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3 struct {
	CookieLength        *int32                                                                   `path:"cookie-length" module:"nokia-conf"`
	DigestType          E_NokiaTypesL2Tp_BaseV3DigestType                                        `path:"digest-type" module:"nokia-conf"`
	NonceLength         *int32                                                                   `path:"nonce-length" module:"nokia-conf"`
	Password            *string                                                                  `path:"password" module:"nokia-conf"`
	PrivateTcpMssAdjust *int32                                                                   `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  *int32                                                                   `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	TransportType       *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType `path:"transport-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreateTransportType retrieves the value of the TransportType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetOrCreateTransportType() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType {
	if t.TransportType != nil {
		return t.TransportType
	}
	t.TransportType = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType{}
	return t.TransportType
}

// GetTransportType returns the value of the TransportType struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3. If the receiver or the field TransportType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetTransportType() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType {
	if t != nil && t.TransportType != nil {
		return t.TransportType
	}
	return nil
}

// GetCookieLength retrieves the value of the leaf CookieLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CookieLength is set, it can
// safely use t.GetCookieLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CookieLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetCookieLength() int32 {
	if t == nil || t.CookieLength == nil {
		return 0
	}
	return *t.CookieLength
}

// GetDigestType retrieves the value of the leaf DigestType from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigestType is set, it can
// safely use t.GetDigestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigestType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetDigestType() E_NokiaTypesL2Tp_BaseV3DigestType {
	if t == nil || t.DigestType == 0 {
		return 0
	}
	return t.DigestType
}

// GetNonceLength retrieves the value of the leaf NonceLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonceLength is set, it can
// safely use t.GetNonceLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonceLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetNonceLength() int32 {
	if t == nil || t.NonceLength == nil {
		return 0
	}
	return *t.NonceLength
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) GetPublicTcpMssAdjust() int32 {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return 0
	}
	return *t.PublicTcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NonceLength == nil {
		var v int32 = 0
		t.NonceLength = &v
	}
	t.TransportType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/l2tpv3/transport-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType struct {
	Ip *bool `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) GetIp() bool {
	if t == nil || t.Ip == nil {
		return false
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ip == nil {
		var v bool = false
		t.Ip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_L2Tpv3_TransportType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/lac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac struct {
	CallingNumberFormat *string                                                              `path:"calling-number-format" module:"nokia-conf"`
	CiscoNasPort        *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort `path:"cisco-nas-port" module:"nokia-conf"`
	DfBit               *bool                                                                `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) IsYANGGoStruct() {}

// GetOrCreateCiscoNasPort retrieves the value of the CiscoNasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) GetOrCreateCiscoNasPort() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort {
	if t.CiscoNasPort != nil {
		return t.CiscoNasPort
	}
	t.CiscoNasPort = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort{}
	return t.CiscoNasPort
}

// GetCiscoNasPort returns the value of the CiscoNasPort struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac. If the receiver or the field CiscoNasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) GetCiscoNasPort() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort {
	if t != nil && t.CiscoNasPort != nil {
		return t.CiscoNasPort
	}
	return nil
}

// GetCallingNumberFormat retrieves the value of the leaf CallingNumberFormat from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingNumberFormat is set, it can
// safely use t.GetCallingNumberFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingNumberFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) GetCallingNumberFormat() string {
	if t == nil || t.CallingNumberFormat == nil {
		return "%S %s"
	}
	return *t.CallingNumberFormat
}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) GetDfBit() bool {
	if t == nil || t.DfBit == nil {
		return true
	}
	return *t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingNumberFormat == nil {
		var v string = "%S %s"
		t.CallingNumberFormat = &v
	}
	if t.DfBit == nil {
		var v bool = true
		t.DfBit = &v
	}
	t.CiscoNasPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/lac/cisco-nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort struct {
	Ethernet *string `path:"ethernet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) GetEthernet() string {
	if t == nil || t.Ethernet == nil {
		return ""
	}
	return *t.Ethernet
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_Lac_CiscoNasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/replace-result-code YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode struct {
	CdnInvalidDst            *bool `path:"cdn-invalid-dst" module:"nokia-conf"`
	CdnPermanentNoFacilities *bool `path:"cdn-permanent-no-facilities" module:"nokia-conf"`
	CdnTemporaryNoFacilities *bool `path:"cdn-temporary-no-facilities" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) IsYANGGoStruct() {}

// GetCdnInvalidDst retrieves the value of the leaf CdnInvalidDst from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnInvalidDst is set, it can
// safely use t.GetCdnInvalidDst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnInvalidDst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) GetCdnInvalidDst() bool {
	if t == nil || t.CdnInvalidDst == nil {
		return false
	}
	return *t.CdnInvalidDst
}

// GetCdnPermanentNoFacilities retrieves the value of the leaf CdnPermanentNoFacilities from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnPermanentNoFacilities is set, it can
// safely use t.GetCdnPermanentNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnPermanentNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) GetCdnPermanentNoFacilities() bool {
	if t == nil || t.CdnPermanentNoFacilities == nil {
		return false
	}
	return *t.CdnPermanentNoFacilities
}

// GetCdnTemporaryNoFacilities retrieves the value of the leaf CdnTemporaryNoFacilities from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnTemporaryNoFacilities is set, it can
// safely use t.GetCdnTemporaryNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnTemporaryNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) GetCdnTemporaryNoFacilities() bool {
	if t == nil || t.CdnTemporaryNoFacilities == nil {
		return false
	}
	return *t.CdnTemporaryNoFacilities
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CdnInvalidDst == nil {
		var v bool = false
		t.CdnInvalidDst = &v
	}
	if t.CdnPermanentNoFacilities == nil {
		var v bool = false
		t.CdnPermanentNoFacilities = &v
	}
	if t.CdnTemporaryNoFacilities == nil {
		var v bool = false
		t.CdnTemporaryNoFacilities = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_ReplaceResultCode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/tunnel-selection-blacklist YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist struct {
	AddTunnelOn   *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn        `path:"add-tunnel-on" module:"nokia-conf"`
	MaxListLength NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Union `path:"max-list-length" module:"nokia-conf"`
	MaxTime       *int32                                                                                          `path:"max-time" module:"nokia-conf"`
	TimeoutAction E_NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction     `path:"timeout-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) IsYANGGoStruct() {
}

// GetOrCreateAddTunnelOn retrieves the value of the AddTunnelOn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetOrCreateAddTunnelOn() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn {
	if t.AddTunnelOn != nil {
		return t.AddTunnelOn
	}
	t.AddTunnelOn = &NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn{}
	return t.AddTunnelOn
}

// GetAddTunnelOn returns the value of the AddTunnelOn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist. If the receiver or the field AddTunnelOn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetAddTunnelOn() *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn {
	if t != nil && t.AddTunnelOn != nil {
		return t.AddTunnelOn
	}
	return nil
}

// GetMaxListLength retrieves the value of the leaf MaxListLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxListLength is set, it can
// safely use t.GetMaxListLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxListLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetMaxListLength() NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Union {
	if t == nil || t.MaxListLength == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Enum_infinite
	}
	return t.MaxListLength
}

// GetMaxTime retrieves the value of the leaf MaxTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetMaxTime() int32 {
	if t == nil || t.MaxTime == nil {
		return 5
	}
	return *t.MaxTime
}

// GetTimeoutAction retrieves the value of the leaf TimeoutAction from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAction is set, it can
// safely use t.GetTimeoutAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetTimeoutAction() E_NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction {
	if t == nil || t.TimeoutAction == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction_remove_from_blacklist
	}
	return t.TimeoutAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxListLength == nil {
		t.MaxListLength = NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Enum_infinite
	}
	if t.MaxTime == nil {
		var v int32 = 5
		t.MaxTime = &v
	}
	if t.TimeoutAction == 0 {
		t.TimeoutAction = NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction_remove_from_blacklist
	}
	t.AddTunnelOn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn represents the /nokia-conf/configure/groups/group/service/vprn/l2tp/tunnel-selection-blacklist/add-tunnel-on YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn struct {
	AddressChangeTimeout      *bool `path:"address-change-timeout" module:"nokia-conf"`
	CdnErrCode                *bool `path:"cdn-err-code" module:"nokia-conf"`
	CdnInvalidDst             *bool `path:"cdn-invalid-dst" module:"nokia-conf"`
	CdnPermanentNoFacilities  *bool `path:"cdn-permanent-no-facilities" module:"nokia-conf"`
	CdnTemporaryNoFacilities  *bool `path:"cdn-temporary-no-facilities" module:"nokia-conf"`
	StopCcnErrCode            *bool `path:"stop-ccn-err-code" module:"nokia-conf"`
	StopCcnOther              *bool `path:"stop-ccn-other" module:"nokia-conf"`
	TxCdnNotEstablishedInTime *bool `path:"tx-cdn-not-established-in-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) IsYANGGoStruct() {
}

// GetAddressChangeTimeout retrieves the value of the leaf AddressChangeTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressChangeTimeout is set, it can
// safely use t.GetAddressChangeTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressChangeTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetAddressChangeTimeout() bool {
	if t == nil || t.AddressChangeTimeout == nil {
		return false
	}
	return *t.AddressChangeTimeout
}

// GetCdnErrCode retrieves the value of the leaf CdnErrCode from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnErrCode is set, it can
// safely use t.GetCdnErrCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnErrCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnErrCode() bool {
	if t == nil || t.CdnErrCode == nil {
		return false
	}
	return *t.CdnErrCode
}

// GetCdnInvalidDst retrieves the value of the leaf CdnInvalidDst from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnInvalidDst is set, it can
// safely use t.GetCdnInvalidDst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnInvalidDst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnInvalidDst() bool {
	if t == nil || t.CdnInvalidDst == nil {
		return false
	}
	return *t.CdnInvalidDst
}

// GetCdnPermanentNoFacilities retrieves the value of the leaf CdnPermanentNoFacilities from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnPermanentNoFacilities is set, it can
// safely use t.GetCdnPermanentNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnPermanentNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnPermanentNoFacilities() bool {
	if t == nil || t.CdnPermanentNoFacilities == nil {
		return false
	}
	return *t.CdnPermanentNoFacilities
}

// GetCdnTemporaryNoFacilities retrieves the value of the leaf CdnTemporaryNoFacilities from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnTemporaryNoFacilities is set, it can
// safely use t.GetCdnTemporaryNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnTemporaryNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnTemporaryNoFacilities() bool {
	if t == nil || t.CdnTemporaryNoFacilities == nil {
		return false
	}
	return *t.CdnTemporaryNoFacilities
}

// GetStopCcnErrCode retrieves the value of the leaf StopCcnErrCode from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopCcnErrCode is set, it can
// safely use t.GetStopCcnErrCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopCcnErrCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetStopCcnErrCode() bool {
	if t == nil || t.StopCcnErrCode == nil {
		return false
	}
	return *t.StopCcnErrCode
}

// GetStopCcnOther retrieves the value of the leaf StopCcnOther from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopCcnOther is set, it can
// safely use t.GetStopCcnOther() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopCcnOther == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetStopCcnOther() bool {
	if t == nil || t.StopCcnOther == nil {
		return false
	}
	return *t.StopCcnOther
}

// GetTxCdnNotEstablishedInTime retrieves the value of the leaf TxCdnNotEstablishedInTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxCdnNotEstablishedInTime is set, it can
// safely use t.GetTxCdnNotEstablishedInTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxCdnNotEstablishedInTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetTxCdnNotEstablishedInTime() bool {
	if t == nil || t.TxCdnNotEstablishedInTime == nil {
		return false
	}
	return *t.TxCdnNotEstablishedInTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AddressChangeTimeout == nil {
		var v bool = false
		t.AddressChangeTimeout = &v
	}
	if t.CdnErrCode == nil {
		var v bool = false
		t.CdnErrCode = &v
	}
	if t.CdnInvalidDst == nil {
		var v bool = false
		t.CdnInvalidDst = &v
	}
	if t.CdnPermanentNoFacilities == nil {
		var v bool = false
		t.CdnPermanentNoFacilities = &v
	}
	if t.CdnTemporaryNoFacilities == nil {
		var v bool = false
		t.CdnTemporaryNoFacilities = &v
	}
	if t.StopCcnErrCode == nil {
		var v bool = false
		t.StopCcnErrCode = &v
	}
	if t.StopCcnOther == nil {
		var v bool = false
		t.StopCcnOther = &v
	}
	if t.TxCdnNotEstablishedInTime == nil {
		var v bool = false
		t.TxCdnNotEstablishedInTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log represents the /nokia-conf/configure/groups/group/service/vprn/log YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct {
	Filter        map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter        `path:"filter" module:"nokia-conf"`
	LogId         map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId         `path:"log-id" module:"nokia-conf"`
	SnmpTrapGroup map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup `path:"snmp-trap-group" module:"nokia-conf"`
	Syslog        map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog        `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log) IsYANGGoStruct() {}

// NewFilter creates a new entry in the Filter list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) NewFilter(FilterName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter{
		FilterName: &FilterName,
	}

	return t.Filter[key], nil
}

// RenameFilter renames an entry in the list Filter within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) RenameFilter(oldK, newK string) error {
	if _, ok := t.Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Filter", newK)
	}

	e, ok := t.Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Filter", oldK)
	}
	e.FilterName = &newK

	t.Filter[newK] = e
	delete(t.Filter, oldK)
	return nil
}

// GetOrCreateFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetOrCreateFilter(FilterName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter {

	key := FilterName

	if v, ok := t.Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFilter got unexpected error: %v", err))
	}
	return v
}

// GetFilter retrieves the value with the specified key from
// the Filter map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetFilter(FilterName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) DeleteFilter(FilterName string) {
	key := FilterName

	delete(t.Filter, key)
}

// AppendFilter appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct to the
// list Filter of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) AppendFilter(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter)
	}

	if _, ok := t.Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Filter %v", key)
	}

	t.Filter[key] = v
	return nil
}

// NewLogId creates a new entry in the LogId list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) NewLogId(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LogId == nil {
		t.LogId = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LogId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LogId", key)
	}

	t.LogId[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId{
		Name: &Name,
	}

	return t.LogId[key], nil
}

// RenameLogId renames an entry in the list LogId within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) RenameLogId(oldK, newK string) error {
	if _, ok := t.LogId[newK]; ok {
		return fmt.Errorf("key %v already exists in LogId", newK)
	}

	e, ok := t.LogId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LogId", oldK)
	}
	e.Name = &newK

	t.LogId[newK] = e
	delete(t.LogId, oldK)
	return nil
}

// GetOrCreateLogId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetOrCreateLogId(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId {

	key := Name

	if v, ok := t.LogId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLogId(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLogId got unexpected error: %v", err))
	}
	return v
}

// GetLogId retrieves the value with the specified key from
// the LogId map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetLogId(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LogId[key]; ok {
		return lm
	}
	return nil
}

// DeleteLogId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) DeleteLogId(Name string) {
	key := Name

	delete(t.LogId, key)
}

// AppendLogId appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId struct to the
// list LogId of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) AppendLogId(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LogId == nil {
		t.LogId = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId)
	}

	if _, ok := t.LogId[key]; ok {
		return fmt.Errorf("duplicate key for list LogId %v", key)
	}

	t.LogId[key] = v
	return nil
}

// NewSnmpTrapGroup creates a new entry in the SnmpTrapGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) NewSnmpTrapGroup(LogName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SnmpTrapGroup == nil {
		t.SnmpTrapGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup)
	}

	key := LogName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SnmpTrapGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SnmpTrapGroup", key)
	}

	t.SnmpTrapGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup{
		LogName: &LogName,
	}

	return t.SnmpTrapGroup[key], nil
}

// RenameSnmpTrapGroup renames an entry in the list SnmpTrapGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) RenameSnmpTrapGroup(oldK, newK string) error {
	if _, ok := t.SnmpTrapGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SnmpTrapGroup", newK)
	}

	e, ok := t.SnmpTrapGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SnmpTrapGroup", oldK)
	}
	e.LogName = &newK

	t.SnmpTrapGroup[newK] = e
	delete(t.SnmpTrapGroup, oldK)
	return nil
}

// GetOrCreateSnmpTrapGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetOrCreateSnmpTrapGroup(LogName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup {

	key := LogName

	if v, ok := t.SnmpTrapGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSnmpTrapGroup(LogName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSnmpTrapGroup got unexpected error: %v", err))
	}
	return v
}

// GetSnmpTrapGroup retrieves the value with the specified key from
// the SnmpTrapGroup map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetSnmpTrapGroup(LogName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup {

	if t == nil {
		return nil
	}

	key := LogName

	if lm, ok := t.SnmpTrapGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSnmpTrapGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) DeleteSnmpTrapGroup(LogName string) {
	key := LogName

	delete(t.SnmpTrapGroup, key)
}

// AppendSnmpTrapGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup struct to the
// list SnmpTrapGroup of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) AppendSnmpTrapGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) error {
	if v.LogName == nil {
		return fmt.Errorf("invalid nil key received for LogName")
	}

	key := *v.LogName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SnmpTrapGroup == nil {
		t.SnmpTrapGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup)
	}

	if _, ok := t.SnmpTrapGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SnmpTrapGroup %v", key)
	}

	t.SnmpTrapGroup[key] = v
	return nil
}

// NewSyslog creates a new entry in the Syslog list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) NewSyslog(SyslogName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Syslog == nil {
		t.Syslog = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog)
	}

	key := SyslogName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Syslog[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Syslog", key)
	}

	t.Syslog[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog{
		SyslogName: &SyslogName,
	}

	return t.Syslog[key], nil
}

// RenameSyslog renames an entry in the list Syslog within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) RenameSyslog(oldK, newK string) error {
	if _, ok := t.Syslog[newK]; ok {
		return fmt.Errorf("key %v already exists in Syslog", newK)
	}

	e, ok := t.Syslog[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Syslog", oldK)
	}
	e.SyslogName = &newK

	t.Syslog[newK] = e
	delete(t.Syslog, oldK)
	return nil
}

// GetOrCreateSyslog retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetOrCreateSyslog(SyslogName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog {

	key := SyslogName

	if v, ok := t.Syslog[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSyslog(SyslogName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSyslog got unexpected error: %v", err))
	}
	return v
}

// GetSyslog retrieves the value with the specified key from
// the Syslog map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) GetSyslog(SyslogName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog {

	if t == nil {
		return nil
	}

	key := SyslogName

	if lm, ok := t.Syslog[key]; ok {
		return lm
	}
	return nil
}

// DeleteSyslog deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) DeleteSyslog(SyslogName string) {
	key := SyslogName

	delete(t.Syslog, key)
}

// AppendSyslog appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog struct to the
// list Syslog of NokiaConf_Configure_Groups_Group_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) AppendSyslog(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) error {
	if v.SyslogName == nil {
		return fmt.Errorf("invalid nil key received for SyslogName")
	}

	key := *v.SyslogName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Syslog == nil {
		t.Syslog = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog)
	}

	if _, ok := t.Syslog[key]; ok {
		return fmt.Errorf("duplicate key for list Syslog %v", key)
	}

	t.Syslog[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.LogId {
		e.PopulateDefaults()
	}
	for _, e := range t.SnmpTrapGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Syslog {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter represents the /nokia-conf/configure/groups/group/service/vprn/log/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct {
	DefaultAction E_NokiaTypesLog_FilterAction                                                                                                                     `path:"default-action" module:"nokia-conf"`
	Description   *string                                                                                                                                          `path:"description" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry `path:"entry" module:"nokia-conf"`
	FilterName    *string                                                                                                                                          `path:"filter-name" module:"nokia-conf"`
	NamedEntry    map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry                                                                  `path:"named-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) AppendEntry(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// NewNamedEntry creates a new entry in the NamedEntry list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) NewNamedEntry(EntryName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry)
	}

	key := EntryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NamedEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NamedEntry", key)
	}

	t.NamedEntry[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry{
		EntryName: &EntryName,
	}

	return t.NamedEntry[key], nil
}

// RenameNamedEntry renames an entry in the list NamedEntry within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) RenameNamedEntry(oldK, newK string) error {
	if _, ok := t.NamedEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in NamedEntry", newK)
	}

	e, ok := t.NamedEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NamedEntry", oldK)
	}
	e.EntryName = &newK

	t.NamedEntry[newK] = e
	delete(t.NamedEntry, oldK)
	return nil
}

// GetOrCreateNamedEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetOrCreateNamedEntry(EntryName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry {

	key := EntryName

	if v, ok := t.NamedEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNamedEntry(EntryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNamedEntry got unexpected error: %v", err))
	}
	return v
}

// GetNamedEntry retrieves the value with the specified key from
// the NamedEntry map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetNamedEntry(EntryName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry {

	if t == nil {
		return nil
	}

	key := EntryName

	if lm, ok := t.NamedEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteNamedEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) DeleteNamedEntry(EntryName string) {
	key := EntryName

	delete(t.NamedEntry, key)
}

// AppendNamedEntry appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry struct to the
// list NamedEntry of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) AppendNamedEntry(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) error {
	if v.EntryName == nil {
		return fmt.Errorf("invalid nil key received for EntryName")
	}

	key := *v.EntryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry)
	}

	if _, ok := t.NamedEntry[key]; ok {
		return fmt.Errorf("duplicate key for list NamedEntry %v", key)
	}

	t.NamedEntry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetDefaultAction() E_NokiaTypesLog_FilterAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesLog_FilterAction_forward
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesLog_FilterAction_forward
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
	for _, e := range t.NamedEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry struct {
	Action      E_NokiaTypesLog_FilterAction                                                 `path:"action" module:"nokia-conf"`
	Description *string                                                                      `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) GetAction() E_NokiaTypesLog_FilterAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match struct {
	Application *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application `path:"application" module:"nokia-conf"`
	Event       *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event       `path:"event" module:"nokia-conf"`
	Message     *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message     `path:"message" module:"nokia-conf"`
	Severity    *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity    `path:"severity" module:"nokia-conf"`
	Subject     *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject     `path:"subject" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateApplication() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application{}
	return t.Application
}

// GetOrCreateEvent retrieves the value of the Event field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateEvent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event {
	if t.Event != nil {
		return t.Event
	}
	t.Event = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event{}
	return t.Event
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateMessage() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message{}
	return t.Message
}

// GetOrCreateSeverity retrieves the value of the Severity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateSeverity() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity {
	if t.Severity != nil {
		return t.Severity
	}
	t.Severity = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity{}
	return t.Severity
}

// GetOrCreateSubject retrieves the value of the Subject field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateSubject() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject {
	if t.Subject != nil {
		return t.Subject
	}
	t.Subject = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject{}
	return t.Subject
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetApplication() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetEvent returns the value of the Event struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Event is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetEvent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event {
	if t != nil && t.Event != nil {
		return t.Event
	}
	return nil
}

// GetMessage returns the value of the Message struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetMessage() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity returns the value of the Severity struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Severity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetSeverity() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity {
	if t != nil && t.Severity != nil {
		return t.Severity
	}
	return nil
}

// GetSubject returns the value of the Subject struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Subject is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) GetSubject() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject {
	if t != nil && t.Subject != nil {
		return t.Subject
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Application.PopulateDefaults()
	t.Event.PopulateDefaults()
	t.Message.PopulateDefaults()
	t.Severity.PopulateDefaults()
	t.Subject.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry/match/application YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application struct {
	Eq  E_NokiaTypesLog_ApplicationObsolete `path:"eq" module:"nokia-conf"`
	Neq E_NokiaTypesLog_ApplicationObsolete `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) GetEq() E_NokiaTypesLog_ApplicationObsolete {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) GetNeq() E_NokiaTypesLog_ApplicationObsolete {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry/match/event YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event struct {
	Eq  *uint32 `path:"eq" module:"nokia-conf"`
	Gt  *uint32 `path:"gt" module:"nokia-conf"`
	Gte *uint32 `path:"gte" module:"nokia-conf"`
	Lt  *uint32 `path:"lt" module:"nokia-conf"`
	Lte *uint32 `path:"lte" module:"nokia-conf"`
	Neq *uint32 `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) GetGte() uint32 {
	if t == nil || t.Gte == nil {
		return 0
	}
	return *t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) GetLte() uint32 {
	if t == nil || t.Lte == nil {
		return 0
	}
	return *t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) GetNeq() uint32 {
	if t == nil || t.Neq == nil {
		return 0
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry/match/message YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Message) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry/match/severity YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity struct {
	Eq  E_NokiaTypesLog_SeverityLevel `path:"eq" module:"nokia-conf"`
	Gt  E_NokiaTypesLog_SeverityLevel `path:"gt" module:"nokia-conf"`
	Gte E_NokiaTypesLog_SeverityLevel `path:"gte" module:"nokia-conf"`
	Lt  E_NokiaTypesLog_SeverityLevel `path:"lt" module:"nokia-conf"`
	Lte E_NokiaTypesLog_SeverityLevel `path:"lte" module:"nokia-conf"`
	Neq E_NokiaTypesLog_SeverityLevel `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) GetEq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) GetGt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gt == 0 {
		return 0
	}
	return t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) GetGte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gte == 0 {
		return 0
	}
	return t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) GetLt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lt == 0 {
		return 0
	}
	return t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) GetLte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lte == 0 {
		return 0
	}
	return t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) GetNeq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Severity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/entry/match/subject YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_Entry_Match_Subject) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry struct {
	Action      E_NokiaTypesLog_FilterAction                                               `path:"action" module:"nokia-conf"`
	Description *string                                                                    `path:"description" module:"nokia-conf"`
	EntryName   *string                                                                    `path:"entry-name" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) GetMatch() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) GetAction() E_NokiaTypesLog_FilterAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryName retrieves the value of the leaf EntryName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryName is set, it can
// safely use t.GetEntryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) GetEntryName() string {
	if t == nil || t.EntryName == nil {
		return ""
	}
	return *t.EntryName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryName == nil {
		return nil, fmt.Errorf("nil value for key EntryName")
	}

	return map[string]interface{}{
		"entry-name": *t.EntryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match struct {
	Application *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application `path:"application" module:"nokia-conf"`
	Event       *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event       `path:"event" module:"nokia-conf"`
	Message     *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message     `path:"message" module:"nokia-conf"`
	Severity    *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity    `path:"severity" module:"nokia-conf"`
	Subject     *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject     `path:"subject" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) IsYANGGoStruct() {}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateApplication() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application{}
	return t.Application
}

// GetOrCreateEvent retrieves the value of the Event field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateEvent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event {
	if t.Event != nil {
		return t.Event
	}
	t.Event = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event{}
	return t.Event
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateMessage() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message{}
	return t.Message
}

// GetOrCreateSeverity retrieves the value of the Severity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateSeverity() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity {
	if t.Severity != nil {
		return t.Severity
	}
	t.Severity = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity{}
	return t.Severity
}

// GetOrCreateSubject retrieves the value of the Subject field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateSubject() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject {
	if t.Subject != nil {
		return t.Subject
	}
	t.Subject = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject{}
	return t.Subject
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetApplication() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetEvent returns the value of the Event struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Event is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetEvent() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event {
	if t != nil && t.Event != nil {
		return t.Event
	}
	return nil
}

// GetMessage returns the value of the Message struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetMessage() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity returns the value of the Severity struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Severity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetSeverity() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity {
	if t != nil && t.Severity != nil {
		return t.Severity
	}
	return nil
}

// GetSubject returns the value of the Subject struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Subject is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) GetSubject() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject {
	if t != nil && t.Subject != nil {
		return t.Subject
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Application.PopulateDefaults()
	t.Event.PopulateDefaults()
	t.Message.PopulateDefaults()
	t.Severity.PopulateDefaults()
	t.Subject.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry/match/application YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application struct {
	Eq  E_NokiaTypesLog_Application `path:"eq" module:"nokia-conf"`
	Neq E_NokiaTypesLog_Application `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) GetEq() E_NokiaTypesLog_Application {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) GetNeq() E_NokiaTypesLog_Application {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry/match/event YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event struct {
	Eq  *uint32 `path:"eq" module:"nokia-conf"`
	Gt  *uint32 `path:"gt" module:"nokia-conf"`
	Gte *uint32 `path:"gte" module:"nokia-conf"`
	Lt  *uint32 `path:"lt" module:"nokia-conf"`
	Lte *uint32 `path:"lte" module:"nokia-conf"`
	Neq *uint32 `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetGte() uint32 {
	if t == nil || t.Gte == nil {
		return 0
	}
	return *t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetLte() uint32 {
	if t == nil || t.Lte == nil {
		return 0
	}
	return *t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetNeq() uint32 {
	if t == nil || t.Neq == nil {
		return 0
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry/match/message YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Message) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry/match/severity YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity struct {
	Eq  E_NokiaTypesLog_SeverityLevel `path:"eq" module:"nokia-conf"`
	Gt  E_NokiaTypesLog_SeverityLevel `path:"gt" module:"nokia-conf"`
	Gte E_NokiaTypesLog_SeverityLevel `path:"gte" module:"nokia-conf"`
	Lt  E_NokiaTypesLog_SeverityLevel `path:"lt" module:"nokia-conf"`
	Lte E_NokiaTypesLog_SeverityLevel `path:"lte" module:"nokia-conf"`
	Neq E_NokiaTypesLog_SeverityLevel `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetEq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetGt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gt == 0 {
		return 0
	}
	return t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetGte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gte == 0 {
		return 0
	}
	return t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetLt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lt == 0 {
		return 0
	}
	return t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetLte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lte == 0 {
		return 0
	}
	return t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetNeq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject represents the /nokia-conf/configure/groups/group/service/vprn/log/filter/named-entry/match/subject YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId represents the /nokia-conf/configure/groups/group/service/vprn/log/log-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId struct {
	AdminState    E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                              `path:"description" module:"nokia-conf"`
	Destination   *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination `path:"destination" module:"nokia-conf"`
	Filter        *string                                                              `path:"filter" module:"nokia-conf"`
	Name          *string                                                              `path:"name" module:"nokia-conf"`
	NetconfStream *string                                                              `path:"netconf-stream" module:"nokia-conf"`
	PythonPolicy  *string                                                              `path:"python-policy" module:"nokia-conf"`
	Source        *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source      `path:"source" module:"nokia-conf"`
	TimeFormat    E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_TimeFormat `path:"time-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) IsYANGGoStruct() {}

// GetOrCreateDestination retrieves the value of the Destination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetOrCreateDestination() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination {
	if t.Destination != nil {
		return t.Destination
	}
	t.Destination = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination{}
	return t.Destination
}

// GetOrCreateSource retrieves the value of the Source field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetOrCreateSource() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source {
	if t.Source != nil {
		return t.Source
	}
	t.Source = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source{}
	return t.Source
}

// GetDestination returns the value of the Destination struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId. If the receiver or the field Destination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetDestination() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination {
	if t != nil && t.Destination != nil {
		return t.Destination
	}
	return nil
}

// GetSource returns the value of the Source struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId. If the receiver or the field Source is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetSource() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source {
	if t != nil && t.Source != nil {
		return t.Source
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilter retrieves the value of the leaf Filter from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filter is set, it can
// safely use t.GetFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetFilter() string {
	if t == nil || t.Filter == nil {
		return ""
	}
	return *t.Filter
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNetconfStream retrieves the value of the leaf NetconfStream from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetconfStream is set, it can
// safely use t.GetNetconfStream() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetconfStream == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetNetconfStream() string {
	if t == nil || t.NetconfStream == nil {
		return ""
	}
	return *t.NetconfStream
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetTimeFormat retrieves the value of the leaf TimeFormat from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeFormat is set, it can
// safely use t.GetTimeFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) GetTimeFormat() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_TimeFormat {
	if t == nil || t.TimeFormat == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_TimeFormat_utc
	}
	return t.TimeFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.TimeFormat == 0 {
		t.TimeFormat = NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_TimeFormat_utc
	}
	t.Destination.PopulateDefaults()
	t.Source.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination represents the /nokia-conf/configure/groups/group/service/vprn/log/log-id/destination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination struct {
	Netconf *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf `path:"netconf" module:"nokia-conf" yangPresence:"true"`
	Snmp    *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp    `path:"snmp" module:"nokia-conf" yangPresence:"true"`
	Syslog  *string                                                                      `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) IsYANGGoStruct() {}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) GetOrCreateNetconf() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf{}
	return t.Netconf
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) GetOrCreateSnmp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp{}
	return t.Snmp
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) GetNetconf() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) GetSnmp() *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetSyslog retrieves the value of the leaf Syslog from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syslog is set, it can
// safely use t.GetSyslog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syslog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) GetSyslog() string {
	if t == nil || t.Syslog == nil {
		return ""
	}
	return *t.Syslog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Netconf.PopulateDefaults()
	t.Snmp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf represents the /nokia-conf/configure/groups/group/service/vprn/log/log-id/destination/netconf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf struct {
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) IsYANGGoStruct() {
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 100
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 100
		t.MaxEntries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp represents the /nokia-conf/configure/groups/group/service/vprn/log/log-id/destination/snmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp struct {
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) IsYANGGoStruct() {}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 100
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 100
		t.MaxEntries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Destination_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source represents the /nokia-conf/configure/groups/group/service/vprn/log/log-id/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source struct {
	Change   *bool `path:"change" module:"nokia-conf"`
	Debug    *bool `path:"debug" module:"nokia-conf"`
	Main     *bool `path:"main" module:"nokia-conf"`
	Security *bool `path:"security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) IsYANGGoStruct() {}

// GetChange retrieves the value of the leaf Change from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Change is set, it can
// safely use t.GetChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Change == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) GetChange() bool {
	if t == nil || t.Change == nil {
		return false
	}
	return *t.Change
}

// GetDebug retrieves the value of the leaf Debug from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debug is set, it can
// safely use t.GetDebug() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debug == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) GetDebug() bool {
	if t == nil || t.Debug == nil {
		return false
	}
	return *t.Debug
}

// GetMain retrieves the value of the leaf Main from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Main is set, it can
// safely use t.GetMain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Main == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) GetMain() bool {
	if t == nil || t.Main == nil {
		return false
	}
	return *t.Main
}

// GetSecurity retrieves the value of the leaf Security from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Security is set, it can
// safely use t.GetSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Security == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) GetSecurity() bool {
	if t == nil || t.Security == nil {
		return false
	}
	return *t.Security
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Change == nil {
		var v bool = false
		t.Change = &v
	}
	if t.Debug == nil {
		var v bool = false
		t.Debug = &v
	}
	if t.Main == nil {
		var v bool = false
		t.Main = &v
	}
	if t.Security == nil {
		var v bool = false
		t.Security = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_LogId_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup represents the /nokia-conf/configure/groups/group/service/vprn/log/snmp-trap-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup struct {
	Description *string                                                                                `path:"description" module:"nokia-conf"`
	LogId       *int32                                                                                 `path:"log-id" module:"nokia-conf"`
	LogName     *string                                                                                `path:"log-name" module:"nokia-conf"`
	TrapTarget  map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget `path:"trap-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) IsYANGGoStruct() {}

// NewTrapTarget creates a new entry in the TrapTarget list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) NewTrapTarget(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrapTarget == nil {
		t.TrapTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrapTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrapTarget", key)
	}

	t.TrapTarget[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget{
		Name: &Name,
	}

	return t.TrapTarget[key], nil
}

// RenameTrapTarget renames an entry in the list TrapTarget within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) RenameTrapTarget(oldK, newK string) error {
	if _, ok := t.TrapTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in TrapTarget", newK)
	}

	e, ok := t.TrapTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrapTarget", oldK)
	}
	e.Name = &newK

	t.TrapTarget[newK] = e
	delete(t.TrapTarget, oldK)
	return nil
}

// GetOrCreateTrapTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) GetOrCreateTrapTarget(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget {

	key := Name

	if v, ok := t.TrapTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrapTarget(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrapTarget got unexpected error: %v", err))
	}
	return v
}

// GetTrapTarget retrieves the value with the specified key from
// the TrapTarget map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) GetTrapTarget(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TrapTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrapTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) DeleteTrapTarget(Name string) {
	key := Name

	delete(t.TrapTarget, key)
}

// AppendTrapTarget appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget struct to the
// list TrapTarget of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) AppendTrapTarget(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrapTarget == nil {
		t.TrapTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget)
	}

	if _, ok := t.TrapTarget[key]; ok {
		return fmt.Errorf("duplicate key for list TrapTarget %v", key)
	}

	t.TrapTarget[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLogId retrieves the value of the leaf LogId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogId is set, it can
// safely use t.GetLogId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) GetLogId() int32 {
	if t == nil || t.LogId == nil {
		return 0
	}
	return *t.LogId
}

// GetLogName retrieves the value of the leaf LogName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogName is set, it can
// safely use t.GetLogName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) GetLogName() string {
	if t == nil || t.LogName == nil {
		return ""
	}
	return *t.LogName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TrapTarget {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LogName == nil {
		return nil, fmt.Errorf("nil value for key LogName")
	}

	return map[string]interface{}{
		"log-name": *t.LogName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget represents the /nokia-conf/configure/groups/group/service/vprn/log/snmp-trap-group/trap-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget struct {
	Address         *string                                                                                    `path:"address" module:"nokia-conf"`
	Description     *string                                                                                    `path:"description" module:"nokia-conf"`
	Name            *string                                                                                    `path:"name" module:"nokia-conf"`
	NotifyCommunity *string                                                                                    `path:"notify-community" module:"nokia-conf"`
	Port            *int32                                                                                     `path:"port" module:"nokia-conf"`
	Replay          *bool                                                                                      `path:"replay" module:"nokia-conf"`
	SecurityLevel   E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel `path:"security-level" module:"nokia-conf"`
	Version         E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version       `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNotifyCommunity retrieves the value of the leaf NotifyCommunity from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotifyCommunity is set, it can
// safely use t.GetNotifyCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotifyCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetNotifyCommunity() string {
	if t == nil || t.NotifyCommunity == nil {
		return ""
	}
	return *t.NotifyCommunity
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 162
	}
	return *t.Port
}

// GetReplay retrieves the value of the leaf Replay from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replay is set, it can
// safely use t.GetReplay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetReplay() bool {
	if t == nil || t.Replay == nil {
		return false
	}
	return *t.Replay
}

// GetSecurityLevel retrieves the value of the leaf SecurityLevel from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityLevel is set, it can
// safely use t.GetSecurityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetSecurityLevel() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel {
	if t == nil || t.SecurityLevel == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel_no_auth_no_privacy
	}
	return t.SecurityLevel
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetVersion() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version_snmpv3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 162
		t.Port = &v
	}
	if t.Replay == nil {
		var v bool = false
		t.Replay = &v
	}
	if t.SecurityLevel == 0 {
		t.SecurityLevel = NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel_no_auth_no_privacy
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version_snmpv3
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog represents the /nokia-conf/configure/groups/group/service/vprn/log/syslog YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog struct {
	Address          *string                                                                  `path:"address" module:"nokia-conf"`
	Description      *string                                                                  `path:"description" module:"nokia-conf"`
	Facility         E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Facility      `path:"facility" module:"nokia-conf"`
	LogPrefix        NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_LogPrefix_Union `path:"log-prefix" module:"nokia-conf"`
	Port             *int32                                                                   `path:"port" module:"nokia-conf"`
	Severity         E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Severity      `path:"severity" module:"nokia-conf"`
	SyslogName       *string                                                                  `path:"syslog-name" module:"nokia-conf"`
	TlsClientProfile *string                                                                  `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacility retrieves the value of the leaf Facility from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetFacility() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Facility {
	if t == nil || t.Facility == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Facility_local7
	}
	return t.Facility
}

// GetLogPrefix retrieves the value of the leaf LogPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPrefix is set, it can
// safely use t.GetLogPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetLogPrefix() NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_LogPrefix_Union {
	if t == nil || t.LogPrefix == nil {
		return UnionString("TMNX")
	}
	return t.LogPrefix
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 514
	}
	return *t.Port
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetSeverity() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Severity {
	if t == nil || t.Severity == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Severity_info
	}
	return t.Severity
}

// GetSyslogName retrieves the value of the leaf SyslogName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyslogName is set, it can
// safely use t.GetSyslogName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyslogName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetSyslogName() string {
	if t == nil || t.SyslogName == nil {
		return ""
	}
	return *t.SyslogName
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Facility == 0 {
		t.Facility = NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Facility_local7
	}
	if t.LogPrefix == nil {
		t.LogPrefix = UnionString("TMNX")
	}
	if t.Port == nil {
		var v int32 = 514
		t.Port = &v
	}
	if t.Severity == 0 {
		t.Severity = NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog_Severity_info
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SyslogName == nil {
		return nil, fmt.Errorf("nil value for key SyslogName")
	}

	return map[string]interface{}{
		"syslog-name": *t.SyslogName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Log_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Management represents the /nokia-conf/configure/groups/group/service/vprn/management YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Management struct {
	AllowFtp     *bool `path:"allow-ftp" module:"nokia-conf"`
	AllowGrpc    *bool `path:"allow-grpc" module:"nokia-conf"`
	AllowNetconf *bool `path:"allow-netconf" module:"nokia-conf"`
	AllowSsh     *bool `path:"allow-ssh" module:"nokia-conf"`
	AllowTelnet  *bool `path:"allow-telnet" module:"nokia-conf"`
	AllowTelnet6 *bool `path:"allow-telnet6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Management implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Management) IsYANGGoStruct() {}

// GetAllowFtp retrieves the value of the leaf AllowFtp from the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFtp is set, it can
// safely use t.GetAllowFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) GetAllowFtp() bool {
	if t == nil || t.AllowFtp == nil {
		return false
	}
	return *t.AllowFtp
}

// GetAllowGrpc retrieves the value of the leaf AllowGrpc from the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowGrpc is set, it can
// safely use t.GetAllowGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowGrpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) GetAllowGrpc() bool {
	if t == nil || t.AllowGrpc == nil {
		return false
	}
	return *t.AllowGrpc
}

// GetAllowNetconf retrieves the value of the leaf AllowNetconf from the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowNetconf is set, it can
// safely use t.GetAllowNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowNetconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) GetAllowNetconf() bool {
	if t == nil || t.AllowNetconf == nil {
		return false
	}
	return *t.AllowNetconf
}

// GetAllowSsh retrieves the value of the leaf AllowSsh from the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowSsh is set, it can
// safely use t.GetAllowSsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowSsh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) GetAllowSsh() bool {
	if t == nil || t.AllowSsh == nil {
		return false
	}
	return *t.AllowSsh
}

// GetAllowTelnet retrieves the value of the leaf AllowTelnet from the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet is set, it can
// safely use t.GetAllowTelnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) GetAllowTelnet() bool {
	if t == nil || t.AllowTelnet == nil {
		return false
	}
	return *t.AllowTelnet
}

// GetAllowTelnet6 retrieves the value of the leaf AllowTelnet6 from the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet6 is set, it can
// safely use t.GetAllowTelnet6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) GetAllowTelnet6() bool {
	if t == nil || t.AllowTelnet6 == nil {
		return false
	}
	return *t.AllowTelnet6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Management
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFtp == nil {
		var v bool = false
		t.AllowFtp = &v
	}
	if t.AllowGrpc == nil {
		var v bool = false
		t.AllowGrpc = &v
	}
	if t.AllowNetconf == nil {
		var v bool = false
		t.AllowNetconf = &v
	}
	if t.AllowSsh == nil {
		var v bool = false
		t.AllowSsh = &v
	}
	if t.AllowTelnet == nil {
		var v bool = false
		t.AllowTelnet = &v
	}
	if t.AllowTelnet6 == nil {
		var v bool = false
		t.AllowTelnet6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Management"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Management) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Management.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Management) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes represents the /nokia-conf/configure/groups/group/service/vprn/maximum-ipv4-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv4Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes represents the /nokia-conf/configure/groups/group/service/vprn/maximum-ipv6-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_MaximumIpv6Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes represents the /nokia-conf/configure/groups/group/service/vprn/mc-maximum-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_McMaximumRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld represents the /nokia-conf/configure/groups/group/service/vprn/mld YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                                    `path:"admin-state" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                                                        `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface                                                                                   `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface                                                                                        `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                                                        `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                                                        `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                                                        `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                                                        `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_SsmTranslate                                                                                                `path:"ssm-translate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/groups/group/service/vprn/mld.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) AppendForwardingGroupInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) AppendGroupInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_SsmTranslate{}
	return t.SsmTranslate
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface represents the /nokia-conf/configure/groups/group/service/vprn/mld/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ForwardingService         *string                                                                          `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                                          `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                                          `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                          `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                          `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                          `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                          `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                          `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                          `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                                          `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                            `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                            `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                            `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                                      `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/groups/group/service/vprn/mld/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                                    `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                                    `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {
}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vprn/mld/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface represents the /nokia-conf/configure/groups/group/service/vprn/mld/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	GroupInterfaceName        *string                                                                `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                                `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                                `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                  `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                  `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                  `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                            `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac represents the /nokia-conf/configure/groups/group/service/vprn/mld/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                          `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                          `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vprn/mld/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ImportPolicy              *string                                                                   `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                                   `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                   `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                   `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                   `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                   `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                   `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                   `path:"query-response-interval" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                     `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static       `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetStatic() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                         `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                                         `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints struct {
	Level            map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level                     `path:"level" module:"nokia-conf"`
	NumberDown       map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                                                                                                                                            `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) NewLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) error {
	key := v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level struct {
	Bandwidth *uint32                                                                                            `path:"bandwidth" module:"nokia-conf"`
	LevelId   NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) GetLevelId() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown struct {
	Level             *uint32                                                                                                           `path:"level" module:"nokia-conf"`
	NumberLagPortDown NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union {
	if t == nil || t.NumberLagPortDown == nil {
		return nil
	}
	return t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-lag-port-down": t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/service/vprn/mld/interface/ssm-translate.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct {
	End    *string                                                                                                `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                                `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group                                                                                 `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/service/vprn/mld/interface/static.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group struct {
	GroupAddress *string                                                                                     `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                   `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange struct {
	End    *string                                                                                          `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg  YANGEmpty                                                                                        `path:"starg" module:"nokia-conf"`
	Start  *string                                                                                          `path:"start" module:"nokia-conf"`
	Step   *string                                                                                          `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source represents the /nokia-conf/configure/groups/group/service/vprn/mld/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Mld_Interface_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}
